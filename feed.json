{
    "version": "https://jsonfeed.org/version/1",
    "title": "沿岸踱步",
    "subtitle": "成长日记",
    "icon": "https://lklyx.github.io/images/favicon.ico",
    "description": "沿岸踱步 & 成长记录",
    "home_page_url": "https://Lklyx.github.io",
    "items": [
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/React/React/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/React/React/",
            "title": "React",
            "date_published": "2021-04-28T16:00:00.000Z",
            "content_html": "<h1 id=\"什么是react\"><a class=\"anchor\" href=\"#什么是react\">#</a> 什么是 React？</h1>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "React",
                "React"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/Blog/Git%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86/",
            "url": "https://lklyx.github.io/Growth-Diary/Blog/Git%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86/",
            "title": "Git仓库管理",
            "date_published": "2021-04-11T16:00:00.000Z",
            "content_html": "<h1 id=\"git使用\"><a class=\"anchor\" href=\"#git使用\">#</a> Git 使用</h1>\n<p>git bash 命令窗口写命令：</p>\n<ol>\n<li>\n<p>克隆远程仓库：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git cloen <span class=\"token comment\">// 加仓库的地址</span></pre></td></tr></table></figure></li>\n<li>\n<p>本地仓库代码推送到远程仓库，需要先关联远程仓库：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git remote add origin <span class=\"token comment\">// + 仓库地址</span></pre></td></tr></table></figure></li>\n<li>\n<p>每一次提交添加：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git add <span class=\"token punctuation\">.</span> <span class=\"token comment\">// 提交所有，后面的点。代表所有本次新加的</span></pre></td></tr></table></figure></li>\n<li>\n<p>添加提交的说明，注释 / 说明。就是本次提交修改的类容的缩写，比如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"修改首页\"</span> <span class=\"token comment\">// 在 git 上显示的就是修改首页。英文的双引号可以省略。</span></pre></td></tr></table></figure></li>\n<li>\n<p>提交。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git push <span class=\"token comment\">// 提交到默认分支、或你现在切换的分支。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git push origin master <span class=\"token comment\">// 提交到 master 分支。加上 origin 就是指定提交的分支。</span></pre></td></tr></table></figure></li>\n<li>\n<p>查看当前分支：</p>\n<pre><code>git branch\n</code></pre>\n</li>\n<li>\n<p>查看仓库状态：</p>\n<pre><code>git status\n</code></pre>\n</li>\n<li>\n<p>切换分支：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git checkout <span class=\"token comment\">// + 需要切换的分支名称</span></pre></td></tr></table></figure></li>\n<li>\n<p>合并分支：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git merge  <span class=\"token comment\">// + 分支名。（在需要合并的分支上敲。在没写好的上面，合并写好的）</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"git返回之前版本\"><a class=\"anchor\" href=\"#git返回之前版本\">#</a> Git 返回之前版本</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git reset <span class=\"token operator\">--</span>hard <span class=\"token punctuation\">&#123;</span>hash<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>版本回退。</p>\n<h1 id=\"git报错openssl-ssl_read-connection-was-reset-errno-10054\"><a class=\"anchor\" href=\"#git报错openssl-ssl_read-connection-was-reset-errno-10054\">#</a> Git 报错：OpenSSL SSL_read: Connection was reset, errno 10054</h1>\n<p>有时候会在克隆，拉取项目，推送项目时报这个错，这是因为服务器的 SSl 证书没有经过第三方机构的签署，所以报错。解决办法如下：</p>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git config <span class=\"token function\">-</span><span class=\"token function\">-</span>global http<span class=\"token dyadic-operator operator\">.</span>sslVerify \"false\"</pre></td></tr></table></figure><h1 id=\"git常见的问题解决方法\"><a class=\"anchor\" href=\"#git常见的问题解决方法\">#</a> Git 常见的问题解决方法</h1>\n<p>问题<br />\n (1) 更新代码后显示： <strong> <code>unable to unlink old ‘xxx/xxx/xx’ : invalid argument</code> </strong><br />\n 问题原因：<br />\n要提交或更新的文件被系统线程占用<br />\n解决方法：<br />\n把相关服务暂停，重新 pull 代码<br />\n (2) 更新代码后显示： <strong> <code>the following untracked working tree files would be overwritten by checkout</code> </strong><br />\n 问题原因：<br />\n本地代码仓库目录下有 untracked 文件<br />\n解决方法：<br />\n如果没有需要上库的代码，直接执行 git clean -d -fx 删除 untracked 文件<br />\n (3) 更新代码后显示：<br />\n<strong> <code>your local changes to the following files would be overwritten by merge…</code> </strong><br />\n<strong> <code>please move or remove them before you merge</code> </strong></p>\n<p>问题原因：<br />\n新修改的代码之前未提交，可能被服务器上的代码覆盖<br />\n解决方法 1：<br />\n保留本地修改，然后 add/commit/push 到远程仓库</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git stash\t\t\t\t\t<span class=\"token comment\">// 暂存本地修改</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git pull origin master\t\t<span class=\"token comment\">// 拉取服务器最新代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git stash pop\t\t\t\t<span class=\"token comment\">// 暂存代码恢复</span></pre></td></tr></table></figure><p>解决方法 2：<br />\n放弃本地修改 - 直接回退到上一版本，再拉取服务器最新代码</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git reset <span class=\"token operator\">--</span>hard\t\t\t<span class=\"token comment\">// 可加上 commit id</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git pull origin master</pre></td></tr></table></figure><p>(4) git pull 的时候认证失败：<br />\n<strong> <code>remote: invalid Login or password</code> </strong><br />\n<strong> <code>fatal: Authentication failed for 'https://…'</code> </strong></p>\n<p>问题原因：<br />\n账号密码失效或者是未登录<br />\n解决方法：<br />\nwindows 账户下，控制面板 -&gt; 用户帐户 -&gt;windows 凭据 -&gt; 修改 git 密码<br />\n (5) 版本回退 git reset --hard {hash} 后提示：<br />\n** <code>fatal: could not parse object &quot;hash id&quot;**</code></p>\n<p>问题原因：<br />\n切换到 master 分支后没有更新最新代码，git log 不包含要 reset 的节点<br />\n解决方法：<br />\n更新代码后 git log 找到对应节点 hash id 再 reset<br />\n (6) 切分支后提示文件有修改，撤销文件修改报错 / 对这个文件任何修改都报错<br />\n <code>**unlink of file ‘modifyFile.c’ failed. should I try again?(y/n)</code> **</p>\n<p>问题原因：<br />\n与问题 (1) 一样，有线程占用要修改的文件，比如代码查看器等<br />\n解决方法：<br />\n把相关服务停了，重新处理<br />\n (7) git push 后提示:<br />\n <code>**to https://.git**</code> <br />\n <code>**![rejected] localRepo-&gt;remoteRepo(fetch first)**</code> <br />\n <code>**error: failed to push some refs to 'https://.git’**</code> <br />\n <code>**Updates were rejected because the remote contain work that you do not have locally.</code> **</p>\n<p>问题原因：<br />\n本地仓库不包含远程仓库修改<br />\n解决方法：<br />\n更新远程分支并重新 add/commit/push<br />\n (8) git push 后提示:<br />\n <code>**to https://.git**</code> <br />\n <code>**![rejected] localRepo-&gt;remoteRepo(fetch first)**</code> <br />\n <code>**error: failed to push some refs to 'https://.git’**</code> <br />\n <code>**Updates were rejected because the tip of your current branch is behind its remote couterpart. Integrate the remote changes bufore pushing again.</code> **</p>\n<p>问题原因：<br />\n本地仓库节点落后于远程仓库节点，当然这可能是自己主动回退的<br />\n解决方法：<br />\n方案 1：强推。覆盖远程分支，这样会使远程修改丢失，多人同一分支写作的时候不可取</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git push <span class=\"token operator\">-</span>u origin <span class=\"token constant\">YOUR_BRANCH</span> <span class=\"token operator\">-</span>f</pre></td></tr></table></figure><p>方案 2：重新拉取远程仓库 merge 再 push。结合具体代码修改情况做处理</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git pull origin <span class=\"token constant\">YOUR_BRANCH</span> <span class=\"token comment\">// 修改～</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git push <span class=\"token operator\">-</span>u origin <span class=\"token constant\">YOUR_BRANCH</span></pre></td></tr></table></figure><p>方案 3：直接推到新分支，原分支作废</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git push origin <span class=\"token constant\">YOUR_BRANCH_NEW</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git branch <span class=\"token constant\">YOUR_BRANCH_NEW</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git push <span class=\"token operator\">-</span>u origin <span class=\"token constant\">YOUR_BRANCH_NEW</span></pre></td></tr></table></figure><p>(9) git pull 后提示<br />\n <code>**fatal: refuse to merge unrelated histories</code> **</p>\n<p>问题原因：<br />\n出现这个问题的最主要原因还是在于本地仓库和远程仓库实际上是独立的两个仓库，如果一开始用 git clone 拷贝到本地就不存在这个问题。本地 git init 后尝试与远程分支关联<br />\n解决方法：<br />\npull 命令后加 --allow-unrelated-histories 来解决，合并两个独立启动仓库的历史</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git pull origin master <span class=\"token operator\">--</span>allow<span class=\"token operator\">-</span>unrelated<span class=\"token operator\">-</span>histories</pre></td></tr></table></figure><p>(10) git checkout 后提示:<br />\n <code>**error: cannot stat ‘file…’: Filename too long</code> **</p>\n<p>问题原因：<br />\n如提示，文件名过长无法 checkout。git 可以创建 4096 长度的文件名，然而在 windows 最多是 260，因为 git 用了旧版本的 windows api，导致出现这种情况。<br />\n解决方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git config <span class=\"token operator\">--</span>global core<span class=\"token punctuation\">.</span>longpaths <span class=\"token boolean\">true</span> \t<span class=\"token comment\">// 去除文件名长度限制</span></pre></td></tr></table></figure><p>(11) git pull 后撤销:<br />\n 问题原因：<br />\n主干分支当前跑不过等原因<br />\n解决方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git reflog <span class=\"token constant\">YOUR_BRANCH</span>\t\t\t\t\t<span class=\"token comment\">// 查看当前分支操作记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git reset <span class=\"token operator\">--</span>hard <span class=\"token constant\">YOUR_BRANCH</span>@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span>\t\t<span class=\"token comment\">// 回退到上一节点，拉取 master 之前</span></pre></td></tr></table></figure><p>(12) git checkout filename 后报错:<br />\nerror: pathspec did not match any files known to git</p>\n<p>问题原因：<br />\ngit checkout filename 回退未添加到缓存区的文件，但是对未 track 的文件不生效。git checkout 未 track 文件 git 以为是切分支<br />\n解决方法：<br />\n更新如果不需要该文件，直接删除</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rm filename</pre></td></tr></table></figure>",
            "tags": [
                "历练ing",
                "Blog",
                "Git"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E5%8A%AA%E5%8A%9B%E4%B8%8D%E6%98%AF%E6%B2%A1%E6%9C%89%E7%94%A8%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%8B%8D%E4%BD%A0%E4%B8%8D%E5%A4%9F%E5%8A%AA%E5%8A%9B/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E5%8A%AA%E5%8A%9B%E4%B8%8D%E6%98%AF%E6%B2%A1%E6%9C%89%E7%94%A8%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%8B%8D%E4%BD%A0%E4%B8%8D%E5%A4%9F%E5%8A%AA%E5%8A%9B/",
            "title": "努力不是没有用，就是拍你不够努力",
            "date_published": "2021-04-07T09:27:10.773Z",
            "content_html": "<p>来源：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sY2h4Lm9yZy8=\">励志一生</span> 文 / 唤醒沉睡的猪</p>\n<p><img data-src=\"http://www.lchx.org/d/file/2017092717/2017092717011514.jpg\" alt=\"努力不是没有用，就怕你不够努力\" /></p>\n<p>最近的某一天，我下班回到家，突然接到了一个陌生人的来电，原本我以为又是那些推销商铺的人给我打的电话，没想到打电话的人竟是一位某企业的合伙人。</p>\n<p>见到我接了电话，她快速表明来意，希望我能够抽空帮他们企业写个漂亮的简介。她说之前公司也有过一个版本的简介，但是写得太差了，现在企业不断发展壮大，企业的简介也要跟着更新换代。</p>\n<p>我问她是怎么认识我的，她说是一个朋友介绍的，说我曾经给过不少客户写材料，且一直从事与文字相关的工作，还听说我这些年一直坚持不懈的写作，所以觉得我定能够给他们量身定制一份非常完美的企业简介。</p>\n<p>她问我大概怎么收费，如果是前几年，我一定会特别不好意思的说你随便给吧，意思一下就可以了。可是，今天，我居然可以底气十足的和人家谈条件。</p>\n<p>当我把这些情况告诉给推荐我的那个朋友时，她打趣地说：“你现在居然敢和我朋友谈条件了，你太狠了。” 我告诉她，她不是也因为觉得我不错，才愿意把我介绍给人家吗，如果我的水平真差到都不需要回报，那人家找我干什么呢。朋友竖起大拇指，一个劲给我点赞，说她喜欢的就是我的这种霸气。</p>\n<p>没错，当你足够努力和足够优秀的时候，不仅认识你的愿意推荐你，甚至他们也会把认识你当作是一种荣幸。当你的能力已经在某个领域广为人知的时候，这时候就是你知识和能力变现的时候，也是你可以充满底气地和人家谈条件的时候。所以，不要总是觉得努力没有什么用，重要的是怕你不够努力。</p>\n<p>我曾经在一篇文章提到过一位知名的作家，她叫一直特立独行的猫，去年的时候，我给她写过一封邮件，请教她一些写作上的困惑。当我发出邮件的时候，是晚上的十一点多，我无比忐忑不安，因为我怕自己打扰到她休息了，让她对我心生厌恶。可是我没想到，当我一觉醒来的时候，我收到了她回复给我的邮件，那是凌晨三点多，她告诉我不用怕打扰她，她每天都会写作到深夜。</p>\n<p>她的回信对我触动很大，因为我一直觉得自己在很多的同龄人中算是能够吃苦的了，也是比较努力的了。毕竟自己出身穷苦农村，生活的艰难让我早早就学会了自力更生。读大学的时候，我已经学会四处打工赚钱养家，甚至给父母在农村起了漂亮的小楼房。这些经历让很多人都觉得我其实已经非常努力了，甚至连我自己也曾经一度错误地认为自己已经相当努力了，可是对比人家，我才发现，那只不过是冰山一角。难怪人家能够成为畅销书作家，三十岁出头就实现了财务自由，而我依然还在别人的管控下做着普普通通的工作。</p>\n<p>我很幸运我遇到了像一直特立独行的猫这样的人，她们的正向激励让我发现其实每一个普普通通的人都可以通过学习和努力去改变命运。</p>\n<p>就像我很多年前坚持写作一样，我真的也不相信有一天，我在还没大学毕业的时候就能够让多篇文章变成了铅字，还能够靠着文字谋生。而就在最近，我升职加薪了，还被放到了一个比较核心的部门，这一切，靠的不是别的，恰恰是我人无我有人有我优的职场核心竞争力，那就是扎实的写作功底。</p>\n<p>新单位头儿告诉我，之所以找到我，是多方了解得知我曾经有过多个岗位的锻炼经验，而且每到一个部门，工作都非常认真和努力，最重要的是，我有一项比较优势的技能，那就是写作，而他们想要的就是这样一位拥有较好写作功底，能够驾驭一些大型专题材料写作的人。</p>\n<p>很多人问我，是怎么来到这个单位的，我如实告诉了他们我获得这次机会的原因。当他们听到我说人家想要写作功底比较强的人的时候，他们无一例外的觉得，我就是那个最适合的人选。</p>\n<p>虽然这样的赞美我听了无数遍，已经不足为奇，但是，当听到人家说起文字功底好，第一个想到的就是我的时候，我的心中莫名的涌动着一股暖流。我突然觉得自己所有的努力都没有白费，那些曾经挑灯写作的夜晚，那些曾经不被看好的文字，终于在今天都变成了我职场竞争的有力武器。甚至，良好的写作功底，已经成为我个人的一个闪耀品牌，正在一点点改变着我的未来和命运。</p>\n<p>用自己这活生生的事例，印证了那一句话：努力不是没有用，就怕你不够努力。</p>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%90%9E%E7%AC%91%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%90%9E%E7%AC%91%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "title": "Book思议——就这？",
            "date_published": "2021-04-07T05:42:02.014Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdS5zaGFkaWFvLmFwcC8=\">毒鸡汤文案</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHAuc2hhZGlhby5hcHAv\">彩虹屁文案</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXEuc2hhZGlhby5hcHAv\">朋友圈文案</span></p>\n<ol>\n<li>\n<p>上帝说：如果给你 1 分钟的时间，让你打电话給五年前的你，你会对他说些什么？</p>\n<p>我说：给我五分钟吧！我怕那<strong> sb</strong> 不信。</p>\n</li>\n</ol>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Uni-App/Uni-App/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Uni-App/Uni-App/",
            "title": "Uni-app",
            "date_published": "2021-04-05T16:00:00.000Z",
            "content_html": "<p><code>学习视屏21集开始</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUJKNDExVzdwWD9wPTIxJmFtcDtzcG1faWRfZnJvbT1wYWdlRHJpdmVy\">学习视屏连接</span></p>\n<h1 id=\"数据缓存\"><a class=\"anchor\" href=\"#数据缓存\">#</a> 数据缓存</h1>\n<p>本章主要讲到<span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvL2FwaS9zdG9yYWdlL3N0b3JhZ2U/aWQ9c2V0c3RvcmFnZQ==\"> uni-app 官方文档</span>中的 APi 之下的数据缓存。介绍了以下三个的用法</p>\n<ol>\n<li><strong>uni-setStorage</strong></li>\n<li><strong>uni-getStorage</strong></li>\n<li><strong>uni-removeStorage</strong></li>\n</ol>\n<p>uni-setStorage 和 uni-setStorageSync 的区别在于没有带 Sync 的是异步的方法，带 Sync 的是同步的方法，常用的是同步的方法。</p>\n<h1 id=\"上传图片\"><a class=\"anchor\" href=\"#上传图片\">#</a> 上传图片</h1>\n<p>本章主要讲到<span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvL2FwaS9zdG9yYWdlL3N0b3JhZ2U/aWQ9c2V0c3RvcmFnZQ==\"> uni-app 官方文档</span>中的 APi 之下的媒体之下的图片。主要注意看参数表格。默认最大是 9 张图</p>\n<p>文档中的<span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvL2FwaS9tZWRpYS9pbWFnZT9pZD1jaG9vc2VpbWFnZQ==\"> uni.chooseImage</span> 是从本地相册选择图片或者是使用相机拍照。</p>\n<p><strong>OBJECT 参数说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">必填</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">平台差异说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">count</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">最多可以选择的图片张数，默认 9</td>\n<td style=\"text-align:left\">见下方说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sizeType</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">original 原图，compressed 压缩图，默认二者都有</td>\n<td style=\"text-align:left\">App、微信小程序、支付宝小程序、百度小程序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">extension</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">根据文件拓展名过滤，每一项都不能是空字符串。默认不过滤。</td>\n<td style=\"text-align:left\">H5(HBuilder X2.9.9+)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sourceType</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">album 从相册选图，camera 使用相机，默认二者都有。如需直接开相机或直接选相册，请只使用一个选项</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">success</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">成功则返回图片的本地文件路径列表 tempFilePaths</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fail</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">接口调用失败的回调函数</td>\n<td style=\"text-align:left\">小程序、App</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">complete</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">接口调用结束的回调函数（调用成功、失败都会执行）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p><strong>success 返回参数说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">tempFilePaths</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">图片的本地文件路径列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tempFiles</td>\n<td style=\"text-align:left\">Array&lt;Object&gt;、Array&lt;File&gt;</td>\n<td style=\"text-align:left\">图片的本地文件列表，每一项是一个 File 对象</td>\n</tr>\n</tbody>\n</table>\n<p><strong>File 对象结构如下</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">path</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">本地文件路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">size</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">本地文件大小，单位：B</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">name</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">包含扩展名的文件名称，仅 H5 支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">type</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">文件类型，仅 H5 支持</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>uni<span class=\"token punctuation\">.</span><span class=\"token function\">chooseImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    count<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认 9</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sizeType<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'original'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'compressed'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 可以指定是原图还是压缩图，默认二者都有</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sourceType<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'album'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 从相册选择</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>tempFilePaths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印出上传图片的路径。路径为一个数组，这是我们可以在 data 中声明一个数组，将上传的图片路径赋值（这里使用箭头函数，要不然 this 指向会出错）到这个数组中，再渲染出来，就可以查看到上传的图片了。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"23条件注释实现跨端兼容\"><a class=\"anchor\" href=\"#23条件注释实现跨端兼容\">#</a> 23. 条件注释实现跨端兼容</h1>\n<p>使用注释，在 == <code>注释中</code>  == 添加他的 <code>平台标识</code> ，以 <code>#ifdef</code>  开头，以 <code>#endif</code>  结尾。</p>\n<h1 id=\"24导航跳转\"><a class=\"anchor\" href=\"#24导航跳转\">#</a> 24. 导航跳转</h1>\n<p>有声明式导航和编程式导航。</p>\n<p>声明式：直接用 <code>navogator</code>  标签来跳转，</p>\n<p>编程式：给当前需要跳转的图片、文字、按钮一个方法，在方法中写</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在起始页面跳转到 test.vue 页面并传递参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>uni<span class=\"token punctuation\">.</span><span class=\"token function\">navigateTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'test?id=1&amp;name=uniapp'</span> <span class=\"token comment\">// 需要跳转的地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>跳转时传参数，只需在 url 后面，用 <code>问号？</code> + 需要传递过去的 “参数名”=“参数值”，多个参数用 <code>&amp;</code>  隔开。例子如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>url<span class=\"token operator\">:</span><span class=\"token string\">'/pages/detail/detail?id=80&amp;age=20'</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 跳转时，传递一个 id 等于 80 和 age 等于 20 的值过去</span></pre></td></tr></table></figure><p>在传过去以后，接受页面跳转传过来的参数保存在 <code>onLoad</code>  生命周期函数参数中的 <code>options</code>  中，例子如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>expord defaule <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">onLoad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"25组件中的生命周期函数\"><a class=\"anchor\" href=\"#25组件中的生命周期函数\">#</a> 25. 组件中的生命周期函数</h1>\n<p>和 vue 中的一样。但是，其中页面数据发生改变之前，和页面数据发生改变之后两个生命周期函数只在安卓程序中能使用。</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Uni-app",
                "Uni-app"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E5%9B%9B%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E5%9B%9B%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "title": "四月的风-微甜。",
            "date_published": "2021-04-02T02:54:36.324Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试。\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"c3df33876727d36d0afc45677b472b1d6fc63ab567df891222b5c964d78662da\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">请输入密码查看，密码为6位数哦~。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%83%85%E6%84%9F%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%83%85%E6%84%9F%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "title": "Book思议——情感",
            "date_published": "2021-03-31T05:23:49.015Z",
            "content_html": "<ol>\n<li>其实我也没有在等你，只是我喜欢不上别人而已。</li>\n</ol>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "title": "Book思议——励志",
            "date_published": "2021-03-30T03:08:25.236Z",
            "content_html": "<ol>\n<li>生活中，如果你的影子总走在你之前，那是因为你前进的路上没有光。</li>\n<li>人群拥挤？只要你有目标、有方向，全世界都会为你让路。</li>\n</ol>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Es6/Es6/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Es6/Es6/",
            "title": "Es6学习篇",
            "date_published": "2021-03-28T16:00:00.000Z",
            "content_html": "<h1 id=\"es6介绍\"><a class=\"anchor\" href=\"#es6介绍\">#</a> ES6 介绍</h1>\n<p><code>babel</code> <strong> 一个前端工具，可以将 es6 转为 es5，使浏览器支持 es6</strong></p>\n<p><strong>ES6</strong>：参考文档 (阮一峰老师)，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI1JFQURNRQ==\">ES6 入门教程</span></p>\n<p><strong>ES6</strong>：参考视屏 (bilibili)<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWF5NHkxcjc4Qj9wPTE=\"> ES6 从入门到精通</span></p>\n<ol>\n<li>为什么要学习 es6\n<ul>\n<li>ES5 语言的先天不足，比如变量的提升、内置对象的方法不灵活、模板化实现不完善等等</li>\n<li>为了后面的 vue、尤其是 react 框架做好了准备</li>\n<li>目前大部分公司的项目都在使用 es6</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"let和const命令\"><a class=\"anchor\" href=\"#let和const命令\">#</a> let 和 const 命令</h1>\n<p>ES6 新增了 <code>let</code>  命令，用来声明变量。它的用法类似于 <code>var</code> ，但是所声明的变量，只在 <code>let</code>  命令所在的代码块内有效。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token comment\">// ReferenceError: a is not defined.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>b <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>上面代码在代码块之中，分别用 <code>let</code>  和 <code>var</code>  声明了两个变量。然后在代码块之外调用这两个变量，结果 <code>let</code>  声明的变量报错， <code>var</code>  声明的变量返回了正确的值。这表明， <code>let</code>  声明的变量只在它所在的代码块有效。</p>\n<p>下面的代码如果使用 <code>var</code> ，最后输出的是 <code>10</code> 。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></pre></td></tr></table></figure><p>上面代码中，变量 <code>i</code>  是 <code>var</code>  命令声明的，在全局范围内都有效，所以全局只有一个变量 <code>i</code> 。每一次循环，变量 <code>i</code>  的值都会发生改变，而循环内被赋给数组 <code>a</code>  的函数内部的 <code>console.log(i)</code> ，里面的 <code>i</code>  指向的就是全局的 <code>i</code> 。也就是说，所有数组 <code>a</code>  的成员里面的 <code>i</code> ，指向的都是同一个 <code>i</code> ，导致运行时输出的是最后一轮的 <code>i</code>  的值，也就是 10。</p>\n<p>如果使用 <code>let</code> ，声明的变量仅在块级作用域内有效，最后输出的是 6。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span></pre></td></tr></table></figure><p>上面代码中，变量 <code>i</code>  是 <code>let</code>  声明的，当前的 <code>i</code>  只在本轮循环有效，所以每一次循环的 <code>i</code>  其实都是一个新的变量，所以最后输出的是 <code>6</code> 。你可能会问，如果每一轮循环的变量 <code>i</code>  都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量 <code>i</code>  时，就在上一轮循环的基础上进行计算。</p>\n<h2 id=\"不存在变量提升\"><a class=\"anchor\" href=\"#不存在变量提升\">#</a> 不存在变量提升</h2>\n<p><code>var</code>  命令会发生 “变量提升” 现象，即变量可以在声明之前使用，值为 <code>undefined</code> 。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//var 的情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 undefined</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//let 的情况</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错 ReferenceError</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了纠正这种现象， <code>let</code>  命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p>\n<p>上面代码中，变量 <code>foo</code>  用 <code>var</code>  命令声明，会发生变量提升，即脚本开始运行时，变量 <code>foo</code>  已经存在了，但是没有值，所以会输出 <code>undefined</code> 。变量 <code>bar</code>  用 <code>let</code>  命令声明，不会发生变量提升。这表示在声明它之前，变量 <code>bar</code>  是不存在的，这时如果用到它，就会抛出一个错误。</p>\n<h2 id=\"暂时性死区\"><a class=\"anchor\" href=\"#暂时性死区\">#</a> 暂时性死区</h2>\n<p>只要块级作用域内存在 <code>let</code>  命令，它所声明的变量就 “绑定”（binding）这个区域，不再受外部的影响。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  tmp <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中，存在全局变量 <code>tmp</code> ，但是块级作用域内 <code>let</code>  又声明了一个局部变量 <code>tmp</code> ，导致后者绑定这个块级作用域，所以在 <code>let</code>  声明变量前，对 <code>tmp</code>  赋值会报错。</p>\n<p>ES6 明确规定，如果区块中存在 <code>let</code>  和 <code>const</code>  命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p>总之，在代码块内，使用 <code>let</code>  命令声明变量之前，该变量都是不可用的。这在语法上，称为 “暂时性死区”（temporal dead zone，简称 TDZ）。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// TDZ 开始</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  tmp <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> tmp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// TDZ 结束</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  tmp <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中，在 <code>let</code>  命令声明变量 <code>tmp</code>  之前，都属于变量 <code>tmp</code>  的 “死区”。</p>\n<p>“暂时性死区” 也意味着 <code>typeof</code>  不再是一个百分之百安全的操作。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，变量 <code>x</code>  使用 <code>let</code>  命令声明，所以在声明之前，都属于 <code>x</code>  的 “死区”，只要用到该变量就会报错。因此， <code>typeof</code>  运行时就会抛出一个 <code>ReferenceError</code> 。</p>\n<p>作为比较，如果一个变量根本没有被声明，使用 <code>typeof</code>  反而不会报错。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> undeclared_variable <span class=\"token comment\">// \"undefined\"</span></pre></td></tr></table></figure><p>上面代码中， <code>undeclared_variable</code>  是一个不存在的变量名，结果返回 “undefined”。所以，在没有 <code>let</code>  之前， <code>typeof</code>  运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。</p>\n<p>有些 “死区” 比较隐蔽，不太容易发现。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p>上面代码中，调用 <code>bar</code>  函数之所以报错（某些实现可能不报错），是因为参数 <code>x</code>  默认值等于另一个参数 <code>y</code> ，而此时 <code>y</code>  还没有声明，属于 “死区”。如果 <code>y</code>  的默认值是 <code>x</code> ，就不会报错，因为此时 <code>x</code>  已经声明了。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 2]</span></pre></td></tr></table></figure><p>另外，下面的代码也会报错，与 <code>var</code>  的行为不同。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// ReferenceError: x is not defined</span></pre></td></tr></table></figure><p>上面代码报错，也是因为暂时性死区。使用 <code>let</code>  声明变量时，只要变量在还没有声明完成前使用，就会报错。上面这行就属于这个情况，在变量 <code>x</code>  的声明语句还没有执行完成前，就去取 <code>x</code>  的值，导致报错”x 未定义 “。</p>\n<p>ES6 规定暂时性死区和 <code>let</code> 、 <code>const</code>  语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。</p>\n<p>总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p>\n<h2 id=\"不允许重复声明\"><a class=\"anchor\" href=\"#不允许重复声明\">#</a> 不允许重复声明</h2>\n<p><code>let</code>  不允许在相同作用域内，重复声明同一个变量。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因此，不能在函数内部重新声明参数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 不报错</span></pre></td></tr></table></figure><h2 id=\"为什么需要块级作用\"><a class=\"anchor\" href=\"#为什么需要块级作用\">#</a> 为什么需要块级作用</h2>\n<p>为了防止块级作用域的变量提升，块级作用域里面的变量会覆盖全局变量。</p>\n<h2 id=\"es6的块级作用域\"><a class=\"anchor\" href=\"#es6的块级作用域\">#</a> ES6 的块级作用域</h2>\n<p><code>let</code>  实际上为 JavaScript 新增了块级作用域。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的函数有两个代码块，都声明了变量 <code>n</code> ，运行后输出 5。这表示外层代码块不受内层代码块的影响。如果两次都使用 <code>var</code>  定义变量 <code>n</code> ，最后输出的值才是 10。</p>\n<h1 id=\"模板字符串\"><a class=\"anchor\" href=\"#模板字符串\">#</a> 模板字符串</h1>\n<p>使用 tab 键上面的反引号  <code>··</code> ，插入变量时使用 <code 变量名=\"\">$</code> ，就可以了</p>\n<p>模板字符串中嵌入变量，需要将变量名写在 <code>$&#123;&#125;</code>  之中。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">hasPrivilege</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 传统写法为</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 'User '</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// + user.name</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// + ' is not authorized to do '</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// + action</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// + '.'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">User </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>user<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> is not authorized to do </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>action<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p>\n<h2 id=\"标签模板\"><a class=\"anchor\" href=\"#标签模板\">#</a> 标签模板</h2>\n<p>模板字符串的功能，不仅仅是上面这些。它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为 “标签模板” 功能（tagged template）。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>alert<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签” 指的就是函数，紧跟在后面的模板字符串就是它的参数。</p>\n<h1 id=\"字符串的新增方法\"><a class=\"anchor\" href=\"#字符串的新增方法\">#</a> 字符串的新增方法</h1>\n<h2 id=\"stringfromcodepoint\"><a class=\"anchor\" href=\"#stringfromcodepoint\">#</a> String.fromCodePoint()</h2>\n<p>ES5 提供 <code>String.fromCharCode()</code>  方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于 <code>0xFFFF</code>  的字符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20BB7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// \"ஷ\"</span></pre></td></tr></table></figure><p>上面代码中， <code>String.fromCharCode()</code>  不能识别大于 <code>0xFFFF</code>  的码点，所以 <code>0x20BB7</code>  就发生了溢出，最高位 <code>2</code>  被舍弃了，最后返回码点 <code>U+0BB7</code>  对应的字符，而不是码点 <code>U+20BB7</code>  对应的字符。</p>\n<p>ES6 提供了 <code>String.fromCodePoint()</code>  方法，可以识别大于 <code>0xFFFF</code>  的字符，弥补了 <code>String.fromCharCode()</code>  方法的不足。在作用上，正好与下面的 <code>codePointAt()</code>  方法相反。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCodePoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20BB7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// \"𠮷\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCodePoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1f680</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x79</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'x\\uD83D\\uDE80y'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码中，如果 <code>String.fromCodePoint</code>  方法有多个参数，则它们会被合并成一个字符串返回。</p>\n<p>注意， <code>fromCodePoint</code>  方法定义在 <code>String</code>  对象上，而 <code>codePointAt</code>  方法定义在字符串的实例对象上。</p>\n<h2 id=\"stringraw\"><a class=\"anchor\" href=\"#stringraw\">#</a> String.raw()</h2>\n<p>ES6 还为原生的 String 对象，提供了一个 <code>raw()</code>  方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String<span class=\"token punctuation\">.</span>raw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 实际返回 \"Hi\\\\n5!\"，显示的是转义后的结果 \"Hi\\n5!\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>String<span class=\"token punctuation\">.</span>raw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi\\u000A!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 实际返回 \"Hi\\\\u000A!\"，显示的是转义后的结果 \"Hi\\u000A!\"</span></pre></td></tr></table></figure><p>如果原字符串的斜杠已经转义，那么 <code>String.raw()</code>  会进行再次转义。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String<span class=\"token punctuation\">.</span>raw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi\\\\n</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 返回 \"Hi\\\\\\\\n\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>String<span class=\"token punctuation\">.</span>raw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi\\\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">===</span> <span class=\"token string\">\"Hi\\\\\\\\n\"</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>String.raw()</code>  方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。</p>\n<p><code>String.raw()</code>  本质上是一个正常的函数，只是专用于模板字符串的标签函数。如果写成正常函数的形式，它的第一个参数，应该是一个具有 <code>raw</code>  属性的对象，且 <code>raw</code>  属性的值应该是一个数组，对应模板字符串解析后的值。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// `foo$&#123;1 + 2&#125;bar`</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>String<span class=\"token punctuation\">.</span><span class=\"token function\">raw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> raw<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"foo3bar\"</span></pre></td></tr></table></figure><p>上面代码中， <code>String.raw()</code>  方法的第一个参数是一个对象，它的 <code>raw</code>  属性等同于原始的模板字符串解析后得到的数组。</p>\n<p>作为函数， <code>String.raw()</code>  的代码实现基本如下。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">raw</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    output <span class=\"token operator\">+=</span> strings<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  output <span class=\"token operator\">+=</span> strings<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实例方法codepointat\"><a class=\"anchor\" href=\"#实例方法codepointat\">#</a> 实例方法：codePointAt ()</h2>\n<p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为 <code>2</code>  个字节。对于那些需要 <code>4</code>  个字节储存的字符（Unicode 码点大于 <code>0xFFFF</code>  的字符），JavaScript 会认为它们是两个字符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"𠮷\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 55362</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 57271</span></pre></td></tr></table></figure><p>上面代码中，汉字 “𠮷”（注意，这个字不是 “吉祥” 的 “吉”）的码点是 <code>0x20BB7</code> ，UTF-16 编码为 <code>0xD842 0xDFB7</code> （十进制为 <code>55362 57271</code> ），需要 <code>4</code>  个字节储存。对于这种 <code>4</code>  个字节的字符，JavaScript 不能正确处理，字符串长度会误判为 <code>2</code> ，而且 <code>charAt()</code>  方法无法读取整个字符， <code>charCodeAt()</code>  方法只能分别返回前两个字节和后两个字节的值。</p>\n<p>ES6 提供了 <code>codePointAt()</code>  方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 134071</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 57271</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 97</span></pre></td></tr></table></figure><p><code>codePointAt()</code>  方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将 “𠮷a” 视为三个字符，codePointAt 方法在第一个字符上，正确地识别了 “𠮷”，返回了它的十进制码点 134071（即十六进制的 <code>20BB7</code> ）。在第二个字符（即 “𠮷” 的后两个字节）和第三个字符 “a” 上， <code>codePointAt()</code>  方法的结果与 <code>charCodeAt()</code>  方法相同。</p>\n<p>总之， <code>codePointAt()</code>  方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与 <code>charCodeAt()</code>  方法相同。</p>\n<p><code>codePointAt()</code>  方法返回的是码点的十进制值，如果想要十六进制的值，可以使用 <code>toString()</code>  方法转换一下。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"20bb7\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"61\"</span></pre></td></tr></table></figure><p>你可能注意到了， <code>codePointAt()</code>  方法的参数，仍然是不正确的。比如，上面代码中，字符 <code>a</code>  在字符串 <code>s</code>  的正确位置序号应该是 1，但是必须向 <code>codePointAt()</code>  方法传入 2。解决这个问题的一个办法是使用 <code>for...of</code>  循环，因为它会正确识别 32 位的 UTF-16 字符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> ch <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 20bb7</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 61</span></pre></td></tr></table></figure><p>另一种方法也可以，使用扩展运算符（ <code>...</code> ）进行展开运算。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token string\">'𠮷a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// arr.length === 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token parameter\">ch</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 20bb7</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 61</span></pre></td></tr></table></figure><p><code>codePointAt()</code>  方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">is32Bit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">is32Bit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"𠮷\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">is32Bit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h2 id=\"实例方法normalize\"><a class=\"anchor\" href=\"#实例方法normalize\">#</a> 实例方法：normalize ()</h2>\n<p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如 <code>Ǒ</code> （\\u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如 <code>O</code> （\\u004F）和 <code>ˇ</code> （\\u030C）合成 <code>Ǒ</code> （\\u004F\\u030C）。</p>\n<p>这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'\\u01D1'</span><span class=\"token operator\">===</span><span class=\"token string\">'\\u004F\\u030C'</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'\\u01D1'</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'\\u004F\\u030C'</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 2</span></pre></td></tr></table></figure><p>上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。</p>\n<p>ES6 提供字符串实例的 <code>normalize()</code>  方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'\\u01D1'</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'\\u004F\\u030C'</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>normalize</code>  方法可以接受一个参数来指定 <code>normalize</code>  的方式，参数的四个可选值如下。</p>\n<ul>\n<li><code>NFC</code> ，默认参数，表示 “标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓 “标准等价” 指的是视觉和语义上的等价。</li>\n<li><code>NFD</code> ，表示 “标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。</li>\n<li><code>NFKC</code> ，表示 “兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓 “兼容等价” 指的是语义上存在等价，但视觉上不等价，比如 “囍” 和 “喜喜”。（这只是用来举例， <code>normalize</code>  方法不能识别中文。）</li>\n<li><code>NFKD</code> ，表示 “兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'\\u004F\\u030C'</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NFC'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'\\u004F\\u030C'</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NFD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 2</span></pre></td></tr></table></figure><p>上面代码表示， <code>NFC</code>  参数返回字符的合成形式， <code>NFD</code>  参数返回字符的分解形式。</p>\n<p>不过， <code>normalize</code>  方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。</p>\n<h2 id=\"实例方法includes-startswith-endswith\"><a class=\"anchor\" href=\"#实例方法includes-startswith-endswith\">#</a> 实例方法：includes (), startsWith (), endsWith ()</h2>\n<p>传统上，JavaScript 只有 <code>indexOf</code>  方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p>\n<ul>\n<li><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串。</li>\n<li><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的头部。</li>\n<li><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>上面代码表示，使用第二个参数 <code>n</code>  时， <code>endsWith</code>  的行为与其他两个方法有所不同。它针对前 <code>n</code>  个字符，而其他两个方法针对从第 <code>n</code>  个位置直到字符串结束。</p>\n<h2 id=\"实例方法repeat\"><a class=\"anchor\" href=\"#实例方法repeat\">#</a> 实例方法：repeat ()</h2>\n<p><code>repeat</code>  方法返回一个新字符串，表示将原字符串重复 <code>n</code>  次。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"xxx\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hellohello\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"\"</span></pre></td></tr></table></figure><p>参数如果是小数，会被取整。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"nana\"</span></pre></td></tr></table></figure><p>如果 <code>repeat</code>  的参数是负数或者 <code>Infinity</code> ，会报错。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// RangeError</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// RangeError</span></pre></td></tr></table></figure><p>但是，如果参数是 0 到 - 1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到 - 1 之间的小数，取整以后等于 <code>-0</code> ， <code>repeat</code>  视同为 0。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"\"</span></pre></td></tr></table></figure><p>参数 <code>NaN</code>  等同于 0。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"\"</span></pre></td></tr></table></figure><p>如果 <code>repeat</code>  的参数是字符串，则会先转换成数字。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'na'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"nanana\"</span></pre></td></tr></table></figure><h2 id=\"实例方法padstartpadend\"><a class=\"anchor\" href=\"#实例方法padstartpadend\">#</a> 实例方法：padStart ()，padEnd ()</h2>\n<p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。 <code>padStart()</code>  用于头部补全， <code>padEnd()</code>  用于尾部补全。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'ababx'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'abax'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'xabab'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'xaba'</span></pre></td></tr></table></figure><p>上面代码中， <code>padStart()</code>  和 <code>padEnd()</code>  一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。</p>\n<p>如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'xxx'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'xxx'</span></pre></td></tr></table></figure><p>如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'abc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0123456789'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// '0123456abc'</span></pre></td></tr></table></figure><p>如果省略第二个参数，默认使用空格补全长度。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '   x'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'x   '</span></pre></td></tr></table></figure><p><code>padStart()</code>  的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'1'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0000000001\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'12'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0000000012\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'123456'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0000123456\"</span></pre></td></tr></table></figure><p>另一个用途是提示字符串格式。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'12'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYY-MM-DD'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"YYYY-MM-12\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'09-12'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYY-MM-DD'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"YYYY-09-12\"</span></pre></td></tr></table></figure><h2 id=\"实例方法trimstarttrimend\"><a class=\"anchor\" href=\"#实例方法trimstarttrimend\">#</a> 实例方法：trimStart ()，trimEnd ()</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbQ==\">ES2019</span> 对字符串实例新增了 <code>trimStart()</code>  和 <code>trimEnd()</code>  这两个方法。它们的行为与 <code>trim()</code>  一致， <code>trimStart()</code>  消除字符串头部的空格， <code>trimEnd()</code>  消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'  abc  '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"abc\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">trimStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"abc  \"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">trimEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"  abc\"</span></pre></td></tr></table></figure><p>上面代码中， <code>trimStart()</code>  只消除头部的空格，保留尾部的空格。 <code>trimEnd()</code>  也是类似行为。</p>\n<p>除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。</p>\n<p>浏览器还部署了额外的两个方法， <code>trimLeft()</code>  是 <code>trimStart()</code>  的别名， <code>trimRight()</code>  是 <code>trimEnd()</code>  的别名。</p>\n<h2 id=\"实例方法matchall\"><a class=\"anchor\" href=\"#实例方法matchall\">#</a> 实例方法：matchAll ()</h2>\n<p><code>matchAll()</code>  方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章。</p>\n<h2 id=\"实例方法replaceall\"><a class=\"anchor\" href=\"#实例方法replaceall\">#</a> 实例方法：replaceAll ()</h2>\n<p>历史上，字符串的实例方法 <code>replace()</code>  只能替换第一个匹配。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 'aa_bcc'</span></pre></td></tr></table></figure><p>上面例子中， <code>replace()</code>  只将第一个 <code>b</code>  替换成了下划线。</p>\n<p>如果要替换所有的匹配，不得不使用正则表达式的 <code>g</code>  修饰符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">b</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 'aa__cc'</span></pre></td></tr></table></figure><p>正则表达式毕竟不是那么方便和直观，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXJlcGxhY2VhbGw=\">ES2021</span> 引入了 <code>replaceAll()</code>  方法，可以一次性替换所有匹配。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 'aa__cc'</span></pre></td></tr></table></figure><p>它的用法与 <code>replace()</code>  相同，返回一个新字符串，不会改变原字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>searchValue<span class=\"token punctuation\">,</span> replacement<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面代码中， <code>searchValue</code>  是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有 <code>g</code>  修饰符）。</p>\n<p>如果 <code>searchValue</code>  是一个不带有 <code>g</code>  修饰符的正则表达式， <code>replaceAll()</code>  会报错。这一点跟 <code>replace()</code>  不同。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">b</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">b</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面例子中， <code>/b/</code>  不带有 <code>g</code>  修饰符，会导致 <code>replaceAll()</code>  报错。</p>\n<p><code>replaceAll()</code>  的第二个参数 <code>replacement</code>  是一个字符串，表示替换的文本，其中可以使用一些特殊字符串。</p>\n<ul>\n<li><code>$&amp;</code> ：匹配的子字符串。</li>\n<li><code>$</code>  `：匹配结果前面的文本。</li>\n<li><code>$'</code> ：匹配结果后面的文本。</li>\n<li><code>$n</code> ：匹配成功的第 <code>n</code>  组内容， <code>n</code>  是从 1 开始的自然数。这个参数生效的前提是，第一个参数必须是正则表达式。</li>\n<li><code>$$</code> ：指代美元符号 <code>$</code> 。</li>\n</ul>\n<p>下面是一些例子。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// $&amp; 表示匹配的字符串，即 `b` 本身</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 所以返回结果与原字符串一致</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'abbc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$&amp;'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 'abbc'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// $` 表示匹配结果之前的字符串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 对于第一个 `b`，$`指代`a`</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 对于第二个 `b`，$`指代`ab`</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token string\">'abbc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$`'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 'aaabc'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// $' 表示匹配结果之后的字符串</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 对于第一个 `b`，$' 指代 `bc`</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 对于第二个 `b`，$' 指代 `c`</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token string\">'abbc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">$'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 'abccc'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// $1 表示正则表达式的第一个组匹配，指代 `ab`</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// $2 表示正则表达式的第二个组匹配，指代 `bc`</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token string\">'abbc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(ab)(bc)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$2$1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 'bcab'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// $$ 指代 $</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token string\">'abc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$$'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 'a$c'</span></pre></td></tr></table></figure><p><code>replaceAll()</code>  的第二个参数 <code>replacement</code>  除了为字符串，也可以是一个函数，该函数的返回值将替换掉第一个参数 <code>searchValue</code>  匹配的文本。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 'aa__cc'</span></pre></td></tr></table></figure><p>上面例子中， <code>replaceAll()</code>  的第二个参数是一个函数，该函数的返回值会替换掉所有 <code>b</code>  的匹配。</p>\n<p>这个替换函数可以接受多个参数。第一个参数是捕捉到的匹配内容，第二个参数捕捉到是组匹配（有多少个组匹配，就有多少个对应的参数）。此外，最后还可以添加两个参数，倒数第二个参数是捕捉到的内容在整个字符串中的位置，最后一个参数是原字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'123abc456'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\d+)([a-z]+)(\\d+)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">replacer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">match<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' - '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 123 - abc - 456</span></pre></td></tr></table></figure><p>上面例子中，正则表达式有三个组匹配，所以 <code>replacer()</code>  函数的第一个参数 <code>match</code>  是捕捉到的匹配内容（即字符串 <code>123abc456</code> ），后面三个参数 <code>p1</code> 、 <code>p2</code> 、 <code>p3</code>  则依次为三个组匹配。</p>\n<h1 id=\"正则的扩展\"><a class=\"anchor\" href=\"#正则的扩展\">#</a> 正则的扩展</h1>\n<p>内容过多不易记、请直接看阮一峰老师的笔记<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI2RvY3MvcmVnZXg=\"> ES6 正则的扩展</span></p>\n<h1 id=\"数值的扩展\"><a class=\"anchor\" href=\"#数值的扩展\">#</a> 数值的扩展</h1>\n<p>新增内容较多、用到的时候可以自行查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI2RvY3MvbnVtYmVy\">数值的扩展</span></p>\n<blockquote>\n<ol>\n<li>二进制和八进制表示法</li>\n<li>Number.isFinite(), Number.isNaN()</li>\n<li>Number.parseInt(), Number.parseFloat()</li>\n<li>Number.isInteger()</li>\n<li>Number.EPSILON</li>\n<li>安全整数和 Number.isSafeInteger ()</li>\n<li>指数运算符</li>\n<li>BigInt 数据类型</li>\n</ol>\n</blockquote>\n<h1 id=\"promise-对象\"><a class=\"anchor\" href=\"#promise-对象\">#</a> Promise 对象</h1>\n<h2 id=\"promise-的含义\"><a class=\"anchor\" href=\"#promise-的含义\">#</a> Promise 的含义</h2>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案 —— 回调函数和事件 —— 更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了 <code>Promise</code>  对象。</p>\n<p>所谓 <code>Promise</code> ，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n<p><code>Promise</code>  对象有以下两个特点。</p>\n<p>（1）对象的状态不受外界影响。 <code>Promise</code>  对象代表一个异步操作，有三种状态： <code>pending</code> （进行中）、 <code>fulfilled</code> （已成功）和 <code>rejected</code> （已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 <code>Promise</code>  这个名字的由来，它的英语意思就是 “承诺”，表示其他手段无法改变。</p>\n<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。 <code>Promise</code>  对象的状态改变，只有两种可能：从 <code>pending</code>  变为 <code>fulfilled</code>  和从 <code>pending</code>  变为 <code>rejected</code> 。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对 <code>Promise</code>  对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n<p>注意，为了行文方便，本章后面的 <code>resolved</code>  统一只指 <code>fulfilled</code>  状态，不包含 <code>rejected</code>  状态。</p>\n<p>有了 <code>Promise</code>  对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外， <code>Promise</code>  对象提供统一的接口，使得控制异步操作更加容易。</p>\n<p><code>Promise</code>  也有一些缺点。首先，无法取消 <code>Promise</code> ，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数， <code>Promise</code>  内部抛出的错误，不会反应到外部。第三，当处于 <code>pending</code>  状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>\n<p>如果某些事件不断地反复发生，一般来说，使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbA==\">Stream</span> 模式是比部署 <code>Promise</code>  更好的选择。</p>\n<h2 id=\"基本用法\"><a class=\"anchor\" href=\"#基本用法\">#</a> 基本用法</h2>\n<p>ES6 规定， <code>Promise</code>  对象是一个构造函数，用来生成 <code>Promise</code>  实例。</p>\n<p>下面代码创造了一个 <code>Promise</code>  实例。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ... some code</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 异步操作成功 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Promise</code>  构造函数接受一个函数作为参数，该函数的两个参数分别是 <code>resolve</code>  和 <code>reject</code> 。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p>\n<p><code>resolve</code>  函数的作用是，将 <code>Promise</code>  对象的状态从 “未完成” 变为 “成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去； <code>reject</code>  函数的作用是，将 <code>Promise</code>  对象的状态从 “未完成” 变为 “失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>\n<p><code>Promise</code>  实例生成以后，可以用 <code>then</code>  方法分别指定 <code>resolved</code>  状态和 <code>rejected</code>  状态的回调函数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// success</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// failure</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>then</code>  方法可以接受两个回调函数作为参数。第一个回调函数是 <code>Promise</code>  对象的状态变为 <code>resolved</code>  时调用，第二个回调函数是 <code>Promise</code>  对象的状态变为 <code>rejected</code>  时调用。这两个函数都是可选的，不一定要提供。它们都接受 <code>Promise</code>  对象传出的值作为参数。</p>\n<p>下面是一个 <code>Promise</code>  对象的简单例子。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">,</span> <span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中， <code>timeout</code>  方法返回一个 <code>Promise</code>  实例，表示一段时间以后才会发生的结果。过了指定的时间（ <code>ms</code>  参数）以后， <code>Promise</code>  实例的状态变为 <code>resolved</code> ，就会触发 <code>then</code>  方法绑定的回调函数。</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Es6",
                "Es6"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/JavaScript/JavaScript/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/JavaScript/JavaScript/",
            "title": "JavaScript",
            "date_published": "2021-03-28T16:00:00.000Z",
            "content_html": "<h1 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<p>看阮一峰老师的笔记。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYXZhc2NyaXB0LnJ1YW55aWZlbmcuY29tL2dyYW1tYXIvYmFzaWMuaHRtbA==\">基本语法</span></p>\n<h1 id=\"dom概述\"><a class=\"anchor\" href=\"#dom概述\">#</a> DOM 概述</h1>\n<p>（DOM 是操作网页的，而 BOM 是操作浏览器的）</p>\n<ol>\n<li>\n<p>DOM 是 JavaScript 操作网页的接口，全称为 “文档对象模型”，他的作用是将一个网页转为一个 JavaScript 对象，从而可以用脚本语言进行各种操作。（增删内容）。</p>\n</li>\n<li>\n<p>DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。</p>\n<ul>\n<li><strong>Document</strong>：整个文档树的顶层节点</li>\n<li><strong>DocumentType：doctype</strong> 标签（比如 <code>&lt;!DOCTYPE html&gt;</code> ）</li>\n<li>Element：网页的各种 HTML 标签（比如 <code>&lt;body&gt;</code> 、 <code>&lt;a&gt;</code>  等 `）</li>\n<li><strong>Attr</strong>：网页元素的属性（比如 class=&quot;right&quot;）</li>\n<li><strong>Text</strong>：标签之间或标签包含的文本</li>\n<li><strong>Comment</strong>：注释</li>\n<li><strong>DocumentFragment</strong>：文档的片段</li>\n</ul>\n</li>\n<li>\n<p><strong>节点树</strong></p>\n<p>一个文档的所有节点，按照所在的层级，可以抽象成一种树状结构。这种树状结构就是 DOM 树。它有一个顶层节点，下一层都是顶层节点的子节点，然后子节点又有自己的子节点，就这样层层衍生出一个金字塔结构，又像一棵树。浏览器原生提供 document 节点，代表整个文档。</p>\n</li>\n<li>\n<p><strong>document</strong>--- 整个文档树</p>\n<p>文档的第一层有两个节点，第一个是文档类型节点（&lt;!doctype html&gt;），第二个是 HTML 网页的顶层容器标签 <code>&lt;html&gt;</code> 。后者构成了树结构的根节点（root node），其他 HTML 标签节点都是它的下级节点。</p>\n<p>除了根节点，其他节点都有三种层级关系。</p>\n<ul>\n<li>\n<p>父节点关系（<strong>parentNode</strong>）：直接的上级节点</p>\n</li>\n<li>\n<p>子节点关系（<strong>childNodes</strong>）：直接的下级节点</p>\n</li>\n<li>\n<p>同级节点关系（<strong>sibling</strong>）：拥有同一个父节点的节点</p>\n<p>DOM 提供操作接口，用来获取这三种关系的节点。比如，子节点接口包括 firstChild（第一个子节点）和 lastChild（最后一个子节点）等属性，同级节点接口包括 nextSibling（紧邻在后的那个同级节点）和 previousSibling（紧邻在前的那个同级节点）属性。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"dom查询\"><a class=\"anchor\" href=\"#dom查询\">#</a> DOM 查询</h1>\n<ol>\n<li><strong>childNodes</strong>;<br />\n 表示当前节点的所有子节点。（节点，包含空格、换行）</li>\n<li><strong>children</strong>;<br />\n 表示可以获取当前元素的所有子元素。（元素，标签，经常用）</li>\n<li><strong>firstChild</strong>;<br />\n 表示当前节点的第一个子节点。</li>\n<li><strong>lastChild</strong>；<br />\n表示当前节点的最后一个子节点。</li>\n<li><strong>parentNode</strong>；<br />\n表示当前节点的父节点。</li>\n<li><strong>previousSibling</strong>；<br />\n表示当前节点的前一个兄弟节点。</li>\n<li><strong>nextSibling</strong>；<br />\n表示当前节点的后一个兄弟节点。</li>\n</ol>\n<h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<p>JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。</p>\n<ol>\n<li>\n<p>数值（number）：整数和小数</p>\n</li>\n<li>\n<p>字符串（string）：文本</p>\n</li>\n<li>\n<p>布尔值（boolean）：true 和 false</p>\n</li>\n<li>\n<p>undefined：表示未定义或不存在。</p>\n</li>\n<li>\n<p>null：表示空值。</p>\n</li>\n<li>\n<p>对象：（objeck）各种值组成的集合。</p>\n<p>其中：在对象中又分为<br />\n（1）狭义的对象（object）<br />\n（2）数组（array）<br />\n（3）函数（function）</p>\n</li>\n</ol>\n<p>逻辑运算符<br />\n与 &amp;&amp;<br />\n 或 ||<br />\n 非 ！</p>\n<p>相等运算符<br />\n === 绝对相等<br />\n == 等于<br />\n！=  不等于</p>\n<h1 id=\"对象\"><a class=\"anchor\" href=\"#对象\">#</a> 对象</h1>\n<ol>\n<li>\n<p>对象<br />\n简单来说，对象就是一组键值对。</p>\n<p>键名：属性名<br />\n键值：属性值<br />\n对象可以是一个方法</p>\n<p>例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function-variable function\">p</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//2</span></pre></td></tr></table></figure></li>\n<li>\n<p>属性的操作<br />\n读取属性：<br />\n采用点运算符和方括号运算符来读取属性 中的值。点运算符和方括号运算符也可以用来赋值。</p>\n<p>查看一个对象本身的所有属性可以用<br />\n object.keys (对象名)</p>\n<p>delete 命令用于删除对象的属性。删除成功后会返回 true。<br />\n例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> p：<span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>p。</pre></td></tr></table></figure><p>注：删除一个不存在的属性时，delete 不会报错。而且也是返回一个 true。</p>\n</li>\n<li>\n<p>in 运算符<br />\n in 运算符是检查对象是否包含某个属性，注意（检查的是属性，不是属性值）如果包含就返回 ture。<br />\n例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> p：<span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>‘p’<span class=\"token keyword\">in</span> obj</pre></td></tr></table></figure><p>此时，控制台返回一个 true</p>\n<p>for ...in 循环。<br />\nfor ...in 循环用来遍历一个对象的全部属性值。<br />\n例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>a：<span class=\"token number\">1</span>，b：<span class=\"token number\">2</span>，c：<span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> （<span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> obj）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> obj<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时控制台输出 1,2,3</p>\n</li>\n</ol>\n<h1 id=\"对象的继承\"><a class=\"anchor\" href=\"#对象的继承\">#</a> 对象的继承</h1>\n<p>面向对象编程很重要的一个方面，就是对象的继承。A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于代码的复用是非常有用的。大部分编程语言都是通过类（class）实现对象的继承。<br />\njs 继承不是通过（class）而是通过原型对象（prototype）实现继承的。</p>\n<ol>\n<li>\n<p>constructor 属性<br />\n prototype 对象有一个 constructor 属性，默认指向 prototype 对象所在的构造函数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">P</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> <span class=\"token constant\">P</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>由于 constructor 属性定义在 prototype 对象上面，意味着可以被所有实例对象继承。</p>\n</li>\n</ol>\n<h1 id=\"面向对象编程\"><a class=\"anchor\" href=\"#面向对象编程\">#</a> 面向对象编程</h1>\n<ol>\n<li>\n<p>对象是什么？</p>\n<ol>\n<li>面向对象编程。缩写为 OOP，是目前主流的编程范式。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</li>\n<li>每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。对象可以复用，通过继承机制还可以定制。因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</li>\n<li>对象是单个实物的抽象。一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</li>\n<li>对象是一个容器，封装了属性（property）和方法（method）。属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为 animal 对象，使用 “属性” 记录具体是那一种动物，使用 “方法” 表示动物的某种行为（奔跑、捕猎、休息等等）。</li>\n</ol>\n</li>\n<li>\n<p>构造函数。</p>\n<p>​\t\t面向对象编程的第一步，就是要生成对象。前面说过，对象是单个实物的抽象。通常需要一个模板，表示某一类实物的共同特征，然后对象根据这个模板生成。<br />\n​\t\t典型的面向对象编程语言（比如 C++ 和 Java），都有 “类”（class）这个概念。所谓 “类” 就是对象的模板，对象就是 “类” 的实例。但是，JavaScript 语言的对象体系，不是基于 “类” 的，而是基于构造函数（constructor）和原型链（prototype）。<br />\n​\t\tJavaScript 语言使用构造函数（constructor）作为对象的模板。所谓” 构造函数”，就是专门用来生成实例对象的函数。它就是对象的模板，描述实例对象的基本结构。一个构造函数，可以生成多个实例对象，这些实例对象都有相同的结构造函数就是一个普通的函数，但是有自己的特征和用法。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Vehicle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span>（）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中，Vehicle 就是构造函数。为了与普通函数区别，构造函数名字的第一个字母通常大写。</p>\n<p>构造函数的两个特点：</p>\n<ul>\n<li>函数体内部使用了 this 关键字，代表了所要生成的对象的实例。</li>\n<li>生成对象的时候，必须使用 new 命令。</li>\n</ul>\n</li>\n<li>\n<p>new 命令的原理</p>\n<p>使用 new 命令时，他后面的函数依次执行下面的步骤。</p>\n<ul>\n<li>（1）创建一个空对象，作为将要返回的对象实例。</li>\n<li>（2）将这个空对象的原型，指向构造函数的 prtotype 属性。</li>\n<li>（3）将这个空对象赋值给函数内部的 this 关键字。</li>\n<li>（4）开始执行构造函数内部的代码。</li>\n</ul>\n<p>也就是说，构造函数内部，this 指的是一个新生成的空对象，所有针对 this 的操作，都会发生在这个空对象上。构造函数之所以叫 “构造函数”，就是说这个函数的目的，就是操作一个空对象（即 this 对象），将其 “构造” 为需要的样子。</p>\n</li>\n</ol>\n<h1 id=\"bom对象\"><a class=\"anchor\" href=\"#bom对象\">#</a> BOM 对象</h1>\n<p>浏览器对象模型，BOM 可以使我们通过 js 来操作浏览器，在 BOM 中提供一组对象，用来完成对浏览器的操作</p>\n<ol>\n<li>\n<p><strong>window</strong></p>\n<p>代表的是整个浏览器的窗口，同时 window 也是网页中的全局对象。</p>\n</li>\n<li>\n<p><strong>Navigator</strong></p>\n<p>代表的是当前浏览器的信息，通过该对象可以来识别不同的浏览器。</p>\n</li>\n<li>\n<p><strong>Location</strong></p>\n<p>代表当前浏览器的地址信息，通过 Location 可以获取地址栏信息，或者操作浏览器跳转页面</p>\n</li>\n<li>\n<p><strong>History</strong></p>\n<p>代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录，由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器想前或者像后。而且该操作只在档次访问时有效。（关闭在打开就没有效果了）</p>\n</li>\n</ol>\n<h1 id=\"date对象\"><a class=\"anchor\" href=\"#date对象\">#</a> Date 对象</h1>\n<p>Date 对象是 JavaScript 原生的时间库。它以国际标准时间（UTC）1970 年 1 月 1 日 00:00:00 作为时间的零点，可以表示的时间范围是前后各 1 亿天（单位为毫秒）。</p>\n<ol>\n<li>\n<p>用法</p>\n<p>Date 对象可以作为普通函数直接调用，返回一个代表当前时间的字符串。Date（）</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// \"Tue Dec 01 2015 09:34:43 GMT+0800 (CST)\"</pre></td></tr></table></figure><p>无论有没有参数，返回的总是当前时间。</p>\n</li>\n<li>\n<p>实例方法</p>\n<p>Date 的实例对象，有几十个自己的方法，除了<strong> valueOf</strong> 和<strong> toString</strong>，可以分为以下三类。</p>\n<ol>\n<li>to 类：从 Date 对象返回一个字符串，表示指定时间。</li>\n<li>get 类：获取 Date 对象的日期和时间。</li>\n<li>set 类：设置 Date 对象的日期和时间。</li>\n</ol>\n</li>\n<li>\n<p>拿到当前时间打印出来，输出在页面显示。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"time\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t现在还不是时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\twindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t<span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">function</span> <span class=\"token function\">times</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> uu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> year <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> yue <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> day <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> shi <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> fen <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> miao <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> zhou <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//\t\t\tconsole.log(zhou)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> arr_week <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期日\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期一\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期二\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期六\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tweek <span class=\"token operator\">=</span> arr_week<span class=\"token punctuation\">[</span>zhou<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>yue<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\tyue<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token operator\">+</span>yue</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>miao<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\tmiao <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token operator\">+</span>miao</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fen<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\tfen <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token operator\">+</span>fen</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> time <span class=\"token operator\">=</span> <span class=\"token string\">\"现在是\"</span><span class=\"token operator\">+</span>year<span class=\"token operator\">+</span><span class=\"token string\">\"年\"</span><span class=\"token operator\">+</span>yue<span class=\"token operator\">+</span><span class=\"token string\">\"月\"</span><span class=\"token operator\">+</span>day<span class=\"token operator\">+</span><span class=\"token string\">\"日\"</span><span class=\"token operator\">+</span>shi<span class=\"token operator\">+</span><span class=\"token string\">\"点-\"</span><span class=\"token operator\">+</span>fen<span class=\"token operator\">+</span><span class=\"token string\">\"分-\"</span><span class=\"token operator\">+</span>miao<span class=\"token operator\">+</span><span class=\"token string\">\"秒-\"</span><span class=\"token operator\">+</span>week</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tuu<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"math对象\"><a class=\"anchor\" href=\"#math对象\">#</a> Math 对象</h1>\n<ol>\n<li>\n<p><code>Math静态方法：</code> <br />\nMath 对象提供以下一些静态方法。<br />\n<strong>Math.abs()</strong>：绝对值<br />\n<strong> Math.ceil ()</strong>：向上取整<br />\n<strong> Math.floor ()</strong>：向下取整<br />\n<strong> Math.max ()</strong>：最大值<br />\n<strong> Math.min ()</strong>：最小值<br />\n<strong> Math.pow ()</strong>：幂运算<br />\n<strong> Math.sqrt ()</strong>：平方根<br />\n<strong> Math.log ()</strong>：自然对数<br />\n<strong> Math.exp ()</strong>：e 的指数<br />\n<strong> Math.round ()</strong>：四舍五入<br />\n<strong> Math.random ()</strong>：随机数</p>\n</li>\n<li>\n<p><strong>Math.abs</strong><br />\nMath.abs 方法返回参数值的绝对值。</p>\n<p>例子：</p>\n<p>Math.abs (1) \t返回： 1<br />\nMath.abs (-1)\t返回： 1</p>\n</li>\n<li>\n<p><strong>Math.max( )</strong>，<strong>Math.min( )</strong>:<br />\nMath.max 方法返回参数之中最大的那个值，Math.min 返回最小的那个值。如果参数为空，Math.min 返回 Infinity, Math.max 返回 - Infinity。</p>\n<p>例子：</p>\n<blockquote>\n<p>Math.max(2, -1, 5)</p>\n<p>返回： 5<br />\nMath.min(2, -1, 5)</p>\n<p>返回： -1<br />\nMath.min()</p>\n<p>返回：Infinity<br />\nMath.max()</p>\n<p>返回： -Infinity</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Math.floor（）</strong>，<strong>Math.ceil（）</strong></p>\n<blockquote>\n<ol>\n<li>\n<p>Math.floor 方法返回小于参数值的最大整数（地板值）。</p>\n<p>Math.floor(3.2)</p>\n<p>返回： 3<br />\nMath.floor(-3.2)</p>\n<p>返回： -4</p>\n</li>\n<li>\n<p>Math.ceil 方法返回大于参数值的最小整数（天花板值）。</p>\n<p>Math.ceil(3.2)</p>\n<p>返回： 4<br />\nMath.ceil(-3.2)</p>\n<p>返回： -3<br />\n 这两个方法可以结合起来，实现一个总是返回数值的整数部分的函数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ToInteger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的方法传入以下参数得到的返回值如下：</p>\n<p>ToInteger (3.2)\t返回： 3<br />\nToInteger (3.5)\t返回： 3<br />\nToInteger (3.8)\t返回： 3<br />\nToInteger (-3.2)\t返回：-3<br />\nToInteger (-3.5)\t返回： -3<br />\nToInteger (-3.8)\t返回： -3</p>\n<p>上面代码中，不管正数或负数，ToInteger 函数总是返回一个数值的整数部分。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p><strong>Math.round（）</strong><br />\nMath.round（）方法用于四舍五入。</p>\n<p>例子：</p>\n<p>Math.round (0.1)\t返回：0<br />\nMath.round (0.5) \t返回： 1<br />\nMath.round (0.6) \t返回： 1</p>\n<p>等同于<br />\n Math.floor (x + 0.5)<br />\n 注意，它对负数的处理（主要是对 0.5 的处理）。</p>\n<p>Math.round (-1.1)\t返回： -1<br />\nMath.round (-1.5)\t返回： -1<br />\nMath.round (-1.6)\t返回： -2</p>\n</li>\n<li>\n<p><strong>Math.sqrt（）</strong><br />\nMath.sqrt 方法返回参数值的平方根。如果参数是一个负值，则返回 NaN。</p>\n<p>Math.sqrt (4) \t返回： 2<br />\nMath.sqrt (-4) \t返回：NaN</p>\n</li>\n<li>\n<p><strong>Math.random（）</strong></p>\n<p>Math.random（）返回 0 到 1 之间的一个伪随机数，可能等于 0，但是一定小于 1。</p>\n<p>Math.random（）返回： 0.7151307314634323</p>\n<ul>\n<li>任意范围内的随机数生成函数如下。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getRandomArbitrary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token punctuation\">,</span> max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>getRandomArbitrary (1.5, 6.5)\t返回：2.4942810038223864</p>\n<hr />\n<ul>\n<li>任意范围的随机整数生成函数如下。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getRandomInt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token punctuation\">,</span> max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>getRandomInt (1, 6) \t返回： 5</p>\n<ul>\n<li>返回随机字符的例子如下：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">random_str</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">var</span> <span class=\"token constant\">ALPHABET</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token constant\">ALPHABET</span> <span class=\"token operator\">+=</span> <span class=\"token string\">'abcdefghijklmnopqrstuvwxyz'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token constant\">ALPHABET</span> <span class=\"token operator\">+=</span> <span class=\"token string\">'0123456789-_'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">var</span> rand <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token constant\">ALPHABET</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    str <span class=\"token operator\">+=</span> <span class=\"token constant\">ALPHABET</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">,</span> rand <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>random_str (6) \t返回：&quot;NdQKOr&quot;<br />\n 上面代码中，random_str 函数接受一个整数作为参数，返回变量 ALPHABET 内的随机字符所组成的指定长度的字符串。</p>\n</li>\n</ol>\n<h1 id=\"object对象\"><a class=\"anchor\" href=\"#object对象\">#</a> Object 对象</h1>\n<p>**Object 的实例方法：** 所谓的实例方法就是在定义 Object 原型对象 Object.prototype 上的方法。他可以被 Object 实例直接使用。</p>\n<p><strong>instanceof</strong> 运算符用来验证，一个对象是否为指定的构造函数的实例。</p>\n<p><strong>Object ( )</strong> 本身是一个函数，可以当作工具方法使用，将任意值转为对象。这个方法常用于保证某个值一定是对象。如果参数为空，（或者为 undefined 和 null），Object（）返回一个空对象。</p>\n<p>属性的描述对象。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  valeu：<span class=\"token number\">123</span>，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  writable：<span class=\"token boolean\">false</span>，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  enumerable：<span class=\"token boolean\">true</span>，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  configurable：<span class=\"token boolean\">false</span>，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">get</span>：<span class=\"token keyword\">undefined</span>，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">set</span>：<span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>属性描述对象提供 6 个属性；</strong></p>\n<ol>\n<li><code>value</code> <br />\nvalue 是该属性的属性值，默认为 undefined。</li>\n<li><code>writable</code> <br />\nwritable 是一个布尔值，表示属性值（value）是否可以改变（即是否可以写），默认是 true。</li>\n<li><code>enumerable</code>  是一个布尔值，表示该属性是否可遍历，默认为 true。如果设为 false，会使得某些操作（比如 for...in 循环、Object.keys ()）跳过该属性。</li>\n<li><code>configurable</code>  是一个布尔值，表示可配置性，默认为 true。如果设为 false，将阻止某些操作改写该属性，比如无法删除该属性，也不得改变该属性的属性描述对象（value 属性除外）。<br />\n也就是说，configurable 属性控制了属性描述对象的可写性。</li>\n<li><code>get</code> <br />\nget 是一个函数，表示该属性的取值函数（getter），默认为 undefined。</li>\n<li><code>set</code> <br />\nset 是一个函数，表示该属性的存值函数（setter），默认为 undefined。</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"promise对象\"><a class=\"anchor\" href=\"#promise对象\">#</a> Promise 对象</h1>\n<ol>\n<li>\n<p>什么是 Promise。</p>\n<p>Promise 对象是 JavaScript 的异步操作解决方案，为异步操作提供统一接口。它起到代理作用（proxy），充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口。Promise 可以让异步操作写起来，就像在写同步操作的流程，而不必一层层地嵌套回调函数。总的来说，Promise 就是解决异步操作的解决方法。首先，Promise 是一个对象，也是一个构造函数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 异步代码...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面代码中，Promise 构造函数接受一个回调函数 f1 作为参数，f1 里面是异步操作的代码。然后，返回的 p1 就是一个 Promise 实例。Promise 的设计思想是，所有异步任务都返回一个 Promise 实例。Promise 实例有一个 then 方法，用来指定下一步的回调函数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，f1 的异步操作执行完成，就会执行 f2。</p>\n</li>\n<li>\n<p>Promise 对象的状态</p>\n<p>Promise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。</p>\n<ol>\n<li>\n<p>异步操作未完成（pending）</p>\n</li>\n<li>\n<p>异步操作成功（fulfilled）</p>\n</li>\n<li>\n<p>异步操作失败（rejected）</p>\n<p>上面三种状态里面，fulfilled 和 rejected 合在一起称为 resolved（已定型）。这三种状态的变化途径只有两种。</p>\n<ul>\n<li>从 “未完成” 到 “成功”</li>\n<li>从 “未完成” 到 “失败” 所以，异步操作，要嘛就是成功，要嘛就是失败。</li>\n</ul>\n<p>如果成功：Promise 实例传回一个值（value），状态为 fulfilled。<br />\n如果失败：Promise 实例抛出一个错误（error），状态为 rejected。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>Promise 构造函数</p>\n<p>JavaScript 提供原生的 Promise 构造函数，用来生成 Promise 实例。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 异步操作成功 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 异步操作失败 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。它们是两个函数，由 JavaScript 引擎提供，不用自己实现。</p>\n<p><strong>resolve 函数的作用是</strong>，将 Promise 实例的状态从 “未完成” 变为 “成功”（即从 pending 变为 fulfilled），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。<br />\n<strong>reject 函数的作用是</strong>，将 Promise 实例的状态从 “未完成” 变为 “失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>\n</li>\n<li>\n<p>Promise.protoytype.then()  <code>下面的p2中reject为什么要加new关键字？？？？？搞懂以后删除此</code></p>\n<p>Promise 实例的 then 方法，用来添加回调函数。<br />\nthen 方法可以接受两个回调函数，第一个是异步操作成功时（变为 fulfilled 状态）的回调函数，第二个是异步操作失败（变为 rejected）时的回调函数（该参数可以省略）。一旦状态改变，就调用相应的回调函数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// \"成功\"，如果 p1 返回的是成功，那么 then 调用成功的方法。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'失败'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ????</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// Error: 失败，如果 p2 返回的是失败，则调用失败的方法。</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"this关键字\"><a class=\"anchor\" href=\"#this关键字\">#</a> this 关键字</h1>\n<p><strong>this</strong> 可以用在构造函数之中，表示实例对象。除此之外，this 还可以用在别的场合。但是不管事什么场合，this 都有一个共同点：他总是返回一个对象。</p>\n<ol>\n<li>\n<p>涵义</p>\n<p>简单来说：this 就是属性或方法 “当前” 所在的对象。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">describe</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'姓名：'</span><span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// \"姓名：张三\"</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"age\"</span> size<span class=\"token operator\">=</span><span class=\"token number\">3</span> onChange<span class=\"token operator\">=</span><span class=\"token string\">\"validate(this, 18, 99);\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> lowval<span class=\"token punctuation\">,</span> hival</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> lowval<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">></span> hival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid Value!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中，this.name 表示 name 属性所在的那个对象。由于 this.name 是在 describe 方法中调用，而 describe 方法所在的当前对象是 person，因此 this 指向 person，<span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMueG4tLW5hbWVwZXJzb24tbTE0c2kzN2cubmFtZQ==\">this.name 就是 person.name</span>。<br />\n总结一下，JavaScript 语言之中，一切皆对象，运行环境也是对象，所以函数都是在某个对象之中运行，this 就是函数运行时所在的对象（环境）。这本来并不会让用户糊涂，但是 JavaScript 支持运行环境动态切换，也就是说，this 的指向是动态的，没有办法事先确定到底指向哪个对象，这才是最让初学者感到困惑的地方。</p>\n</li>\n<li>\n<p>实质</p>\n<p>this 的设计目的就是在函数体内部，指代函数当前的运行环境。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中，函数体里面的 this.x 就是指当前运行环境的 x。</p>\n</li>\n<li>\n<p>使用场合</p>\n<ul>\n<li>全局环境使用 this，他指的就是顶层对象 window。</li>\n<li>构造函数，构造函数中的 this，指的是实例对象。</li>\n</ul>\n</li>\n<li>\n<p>避免多层 this</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function-variable function\">f1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>o<span class=\"token punctuation\">.</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// Object</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// Object</span></pre></td></tr></table></figure><p>上面代码定义了变量 that，固定指向外层的 this，然后在内层使用 that，就不会发生 this 指向的改变。事实上，使用一个变量固定 this 的值，然后内层函数调用这个变量，是非常常见的做法，请务必掌握。内层的 this 不能指向外层的对象。而是指向定层的对象。解决方法就是上面的例子。使用一个变量接受 this，把当前的 this 赋值给声明的这个变量。就可以在下层运用这个变量来获取外层的对象了。</p>\n</li>\n<li>\n<p>绑定 this 的方法</p>\n<p>javascript 提供了 <strong>call</strong>、<strong>apply</strong>、<strong>bind</strong> 这三种方法，来切换固定 this 的指向。</p>\n<ol>\n<li>call（）</li>\n</ol>\n<p>函数实例的 call 方法，可以指定函数内部 this 的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数。call 方法的参数，应该是一个对象。如果参数为空、null 和 undefined，则默认传入全局对象。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> n<span class=\"token operator\">:</span> <span class=\"token number\">456</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 456</span></pre></td></tr></table></figure><p>上面代码中，a 函数中的 this 关键字，如果指向全局对象，返回结果为 123。如果使用 call 方法将 this 关键字指向 obj 对象，返回结果为 456。可以看到，如果 call 方法没有参数，或者参数为 null 或 undefined，则等同于指向全局对象。</p>\n<p>如果 call 方法的参数是一个原始值，那么这个原始值会自动转成对应的包装对象，然后传入 call 方法。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Number &#123;[[PrimitiveValue]]: 5&#125;</span></pre></td></tr></table></figure><p>上面代码中，call 的参数为 5，不是对象，会被自动转成包装对象（Number 的实例），绑定 f 内部的 this。<br />\ncall 的第一个参数就是 this 所要指向的那个对象，后面的参数则是函数调用时所需的参数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>上面代码中，call 方法指定函数 add 内部的 this 绑定当前环境（对象），并且参数为 1 和 2，因此函数 add 运行后得到 3。</p>\n<p><strong>总的来说</strong>：call 方法就是让 this 绑定到当前的方法中去。</p>\n<ol start=\"2\">\n<li>\n<p>apply（）</p>\n<p>apply 方法的第一个参数也是 this 所要指向的那个对象，如果设为 null 或 undefined，则等同于指定全局对象。第二个参数则是一个数组，该数组的所有成员依次作为参数，传入原函数。原函数的参数，在 call 方法中必须一个个添加，但是在 apply 方法中，必须以数组形式添加。</p>\n<p>例：找出数组中最大的元素<br />\n JavaScript 不提供找出数组最大元素的函数。结合使用 apply 方法和 Math.max 方法，就可以返回数组的最大元素。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 15</span></pre></td></tr></table></figure></li>\n<li>\n<p>bind（）</p>\n<p>bind () 方法用于将函数体内的 this 绑定到某个对象，然后返回一个新函数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>d<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1481869925657</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> print <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>getTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Uncaught TypeError: this is not a Date object.</span></pre></td></tr></table></figure><p>上面代码中，我们将 d.getTime () 方法赋给变量 print，然后调用 print () 就报错了。这是因为 getTime () 方法内部的 this，绑定 Date 对象的实例，赋给变量 print 以后，内部的 this 已经不指向 Date 对象的实例了。</p>\n<p>bind () 方法可以解决这个问题。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> print <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1481869925657</span></pre></td></tr></table></figure><p>上面代码中，bind () 方法将 getTime () 方法内部的 this 绑定到 d 对象，这时就可以安全地将这个方法赋值给其他变量了。</p>\n<p>bind 方法的参数就是所要绑定 this 的对象，下面是一个更清晰的例子。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">inc</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> func <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">inc</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>counter<span class=\"token punctuation\">.</span>count <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>上面代码中，counter.inc () 方法被赋值给变量 func。这时必须用 bind () 方法将 inc () 内部的 this，绑定到 counter，否则就会出错。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"定时器\"><a class=\"anchor\" href=\"#定时器\">#</a> 定时器</h1>\n<p>JavaScript 提供定时执行代码的功能，叫做定时器（timer），主要由 setTimeout () 和 setInterval () 这两个函数来完成。它们向任务队列添加定时任务。</p>\n<ol>\n<li>\n<p>setTimeout（）<br />\n<strong>setTimeout</strong> 函数用来指定某个函数或某段代码，在多少毫秒之后执行。它返回一个整数，表示定时器的编号，以后可以用来取消这个定时器。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> timerId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">|</span>code<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，<strong>setTimeout</strong> 函数接受两个参数，第一个参数 func|code 是将要推迟执行的函数名或者一段代码，第二个参数 delay 是推迟执行的毫秒数。</p>\n</li>\n<li>\n<p>setInterval（）</p>\n<p><strong>setInterval</strong> 函数的用法与<strong> setTimeout</strong> 完全一致，区别仅仅在于 setInterval 指定某个任务每隔一段时间就执行一次，也就是无限次的定时执行。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面代码中，每隔 1000 毫秒就输出一个 2，会无限运行下去，直到关闭当前窗口。</p>\n</li>\n<li>\n<p>clearTimeout ()，clearInterval () 关闭定时器</p>\n<p><strong>setTimeout</strong> 和<strong> setInterval</strong> 函数，都返回一个整数值，表示计数器编号。将该整数传入 clearTimeout 和 clearInterval 函数，就可以取消对应的定时器。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> id1 <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> id2 <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，回调函数 f 不会再执行了，因为两个定时器都被取消了。</p>\n</li>\n<li>\n<p>debounce 函数。（防止抖动）</p>\n<p>防止抖动，意思就是在多少时间内，发生重复的事情可以不触发。比如用户点击键盘，如果用户一直点击，就会造成事件的重复发生。可以让他多少时间，（就是多少秒之后再继续执行一次）</p>\n</li>\n</ol>\n<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<ol>\n<li>\n<p>概述</p>\n<ol>\n<li>javascript 有三种方法声明函数。</li>\n</ol>\n<ul>\n<li>\n<p>function 命令声明的代码区块，就是一个函数。function 命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。</p>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> print（s）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用函数：<strong>print()</strong>。函数名加上（）；</p>\n</li>\n</ul>\n</li>\n<li>\n<p>变量赋值的写法声明</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> print <span class=\"token operator\">=</span> funtion（s）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span>log（s）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>采用函数表达式声明函数时，function 命令后面不带有函数名。如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。<br />\n注：这种表达式声明的函数必须在语句的结尾加上分号，表示语句结束。而上面一种不需要在结尾加分号。</p>\n</li>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span>（</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t‘x’<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">'return  x+y'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>）<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>因为这种声明方法不直观，所以用得很少。<br />\n如果一个函数被多次声明，后面的声明会覆盖前面的声明。<br />\n调用函数时，要使用圆括号。里面可以放置参数。</p>\n</li>\n<li>\n<p>函数的属性和方法</p>\n<ol>\n<li>\n<p>name 属性：返回函数的名字。</p>\n<p>如果是通过变量赋值定义的函数，那么，name 属性返回的是变量名。<strong>注：只有在变量的值是一个匿名函数的时候才会如此</strong>。在函数中，参数 <code>.name</code> 。就能在控制台打印出当前函数的 name。</p>\n<p>匿名函数：例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> （）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tf2<span class=\"token punctuation\">.</span>name  <span class=\"token comment\">// name = f2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>具名函数：例：注意：下面这个函数真正的函数名还是 f2，Myname 名字只能在函数内部可以用。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> Myname（）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tf2<span class=\"token punctuation\">.</span>name  <span class=\"token comment\">// name=Myname</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>length 属性</p>\n<p>函数的 length 属性返回函数预期传入的参数个数，即函数定义之中的参数个数。不管调用时候传入了多少个参数，length 属性值返回创建时小括号中的个数。</p>\n</li>\n<li>\n<p>toString（）</p>\n<p>toString（）方法，返回一个字符串。</p>\n<p>例：</p>\n<p>var a = 123：此时的 a 是 number 数字类型。<br />\ntoString（a）；返回一个 “123”</p>\n</li>\n<li>\n<p>函数的作用域</p>\n<p>在函数内部声明的变量叫局部变量，在函数外部声明的变量叫全局变量。函数的作用域是在 函数定义时的作用域，而不是在调用时的作用域。</p>\n</li>\n<li>\n<p>参数</p>\n<p>函数运行的时候，有时候需要提供外部的数据，不同的外部数据会得到不同的结果。这种外部数据就叫做参数。</p>\n<p>例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> square （x）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>x；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>square（2）；在调用函数时，传入一个 2 作为参数，返回的结果就是 2*2=4<br />\nsquare（3）；返回的结果是 9.</p>\n</li>\n<li>\n<p>arguments</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span>（a，b）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\targuments<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\targuments<span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面的代码中，函数 f（）调用时传入的参数，在函数内部被修改成 3 和 2</p>\n</li>\n<li>\n<p>闭包</p>\n<p>定义在一个函数内部的函数。特点：就是它可以记住诞生的环境。在本质上，闭包就是将函数别不核函数外部连接起来的一座桥梁。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"事件的冒泡\"><a class=\"anchor\" href=\"#事件的冒泡\">#</a> 事件的冒泡</h1>\n<p>事件的冒泡就是点击一个最上面的（z-index 最大）的 div。触发事件以后，在他之后的 div（z-index 第二个）的事件也会触发。还有最大的一个 div（z-index 最小的）事件也会触发</p>\n<p>冒泡：事件的向上传导</p>\n<p>例：一个 span 标签上的 onclick，触发一个 p 标签上的 onclick，触发一个 div 上的 onclick。。。。。。<br />\n切触发的是相同的时间。如，鼠标点击事件，就只冒泡点击事件。如鼠标移动事件就只触发移动事件。</p>\n<p>取消冒泡：<br />\n属性.cancelBubble = true;</p>\n<h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<p>数组时按次序排列的一组值。每个值的位置都有编号。编号从 0 开始。整个数组用方括号表示 ：[ ]。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b,'</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这就是一个简单数组，数组的 a 的下标是 0。第一位是 0，第二位是 1，第三位是 2. 以此类推。所以数组的下标总是比数组的长度小一。数组也是可以先定义、再赋值的。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>任何类型的数据，都可以放入数组中。比如。函数、对象、方法、数值、字符串、数组里面也能嵌套数组。这时候叫多维数组......</p>\n<ol>\n<li>\n<p>数组的长度</p>\n<p>使用 length 属性可以返回数组的长度。清空数组可以将 length 属性设置为 0。如果人为设置 length 大于当前元素个数，则数组的成员数量会增加到这个值，新增的位置都是空位。使用 undefined 站位。表示空，未定义。</p>\n</li>\n<li>\n<p>数组的遍历</p>\n<p>数组的遍历可以用 for 循环、while 循环、不建议用 for...in 循环。常用的是 forEach 循环。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//for 循环</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 打印出 a 数组的每一项</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//while 循环：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//forEeach 循环：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>colors<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 打印出 colors 的每一项。</span></pre></td></tr></table></figure></li>\n<li>\n<p>delete 删除</p>\n<p>如果使用 delete 命令删除数组中的某一项。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> a<span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除 a 数组的第二个数。</span></pre></td></tr></table></figure><p>此时：a [1] 打印出来的值 = undefined。</p>\n<p>此时：a.length=3</p>\n<p>数组的某个位置是空位、与某个位置是 undefined 是不一样的，如果是空位，但是对 length 属性没有影响。所以用 length 遍历时要小心。如果是空位，使用数组的 forEach 方法、for...in 结构、以及 Object.keys 方法进行遍历，空位都会被跳过。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span>x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\".\"</span><span class=\"token operator\">+</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>i 代表每一项的值，x 代表每一项的下标。</p>\n</li>\n</ol>\n<h1 id=\"高级数组\"><a class=\"anchor\" href=\"#高级数组\">#</a> 高级数组</h1>\n<ol>\n<li>\n<p>Array.isArray（）方法</p>\n<p>返回一个布尔值。表示参数是否为数组。他可以弥补 typeof 运算符的不足。说白了，就是用来判断一个参数，或者一个变量是不是数组。</p>\n</li>\n<li>\n<p>valueOf 方法<br />\n valueOf 方法是一个所有对象都拥有的方法，表示对该对象求值。不同对象的 valueOf 方法不尽一致，数组的 valueOf 方法返回数组的本身。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 控制台输出 [1, 2, 3]</span></pre></td></tr></table></figure><p>返回数组的本身。</p>\n</li>\n<li>\n<p>toString 方法</p>\n<p>toString 方法也是对象通用的方法，数组的 toString 方法返回数组的字符串形势。<br />\n例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 控制台输出 “1,2,3”；</span></pre></td></tr></table></figure><p>就是把数组里面的值都变成一串长的字符串。即使是数组里面有嵌套也是一样的。</p>\n</li>\n<li>\n<p><strong>数组中的方法</strong></p>\n<ol>\n<li>\n<p><strong>push（）</strong></p>\n<p>push 方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。<br />\n例</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>此时 arr 数组里面的值为。【1，‘a’，true，{ }】上面的代码使用 push 方法，往数组中添加的四个成员。</p>\n</li>\n<li>\n<p><strong>pop（）</strong></p>\n<p>pop 方法用于删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'c'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr <span class=\"token comment\">// ['a', 'b']</span></pre></td></tr></table></figure><p>此时在控制台打印输出 arr 的值为 ['a', 'b'], 因为最后一个元素被删除了。<strong>注意</strong>，对空数字使用 pop（）不会报错，而是返回一个 undefined。</p>\n</li>\n<li>\n<p>shift（）</p>\n<p>shift ( ) 方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 删除 a 中的 'a'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token comment\">// 此时 a 数组只剩下 ['b', 'c']</span></pre></td></tr></table></figure><p>只能数组名.shift。然后删除该数组中的第一项。<br />\nshift（）可以遍历清空一个数组。前提是数组的元素不能是 0 或者任何布尔值等于 false 的元素，所以，用这个遍历数组不是很可靠。</p>\n</li>\n<li>\n<p>unshift（）</p>\n<p>unshift ( ) 方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。unshift（）方法可以接受多个参数，这些参数都会加到目标数组的头部。也就是前面。</p>\n</li>\n<li>\n<p>join（）</p>\n<p>join ( ) 方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '1 2 3 4'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' | '</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1 | 2 | 3 | 4\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1,2,3,4\"</span></pre></td></tr></table></figure><p>传入的参数是什么，就会在返回的数组中间加什么。用双引号引起来。如果元素是 undefined 和 null。或者空位，会被转成空字符串。“ ” 就是一个空格的样子。</p>\n</li>\n<li>\n<p>concat（）</p>\n<p>concat 方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// [\"hello\", \"world\"]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// [\"hello\", \"world\", \"!\"]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// [&#123; a: 1 &#125;, &#123; b: 2 &#125;]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// [2, &#123;a: 1&#125;]</span></pre></td></tr></table></figure></li>\n<li>\n<p>reverse（）</p>\n<p>reverse 方法用于颠倒排列数组元素，返回改变后的数组。注意，该方法将改变原数组</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"c\", \"b\", \"a\"]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token comment\">// [\"c\", \"b\", \"a\"]</span></pre></td></tr></table></figure><p>就是第一个在最后一个，最后一个在第一个。颠倒过来了。</p>\n</li>\n<li>\n<p>slice（）</p>\n<p>sliec（）方法用于提取目标数组的一部分，返回一个新数组，原数组不变。它的第一个参数为起始位置（从 0 开始，会包括在返回的新数组之中），第二个参数为终止位置（但该位置的元素本身不包括在内）<br />\n如果省略第二个参数，则一直返回到原数组的最后一个成员。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\"]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"b\", \"c\"]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"b\"]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"c\"]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\"]。</span></pre></td></tr></table></figure><p>截取一个数组中的某元素到某元素的那一段，组成一个新的数组。新的数组包含第一个元素，不包含最后一个元素。且原数组不会改变。如果没有参数。如上面的最后一个例子：则就是拷贝一个与原数组相同的新数组出来。如果给的参数是负数。则表示从后面开始计算。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"b\", \"c\"]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"b\"]</span></pre></td></tr></table></figure><p>上面代码中，-2 表示倒数计算的第二个位置，-1 表示倒数计算的第一个位置。如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组</p>\n</li>\n<li>\n<p><strong>splice（）</strong></p>\n<p>splice 的第一个参数是删除的起始位置（从 0 开始）第二个参数是被删除的元素个数。如果后面还有更多参数，则表示这些就是要被插入数组的新元素。<strong>注意</strong>，该方法会改变原数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"e\", \"f\"]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></pre></td></tr></table></figure><p>就是删除一个数组里面的元素。第一个参数是下标的位置，第二个参数是删除的个数。从下标是第几个开始删除。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"e\", \"f\"]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token comment\">// [\"a\", \"b\", \"c\", \"d\", 1, 2]</span></pre></td></tr></table></figure><p>删除以后又加进来两个新元素。如果起始位置是负数，就表示从倒数位置开始删除。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"c\", \"d\"]</span></pre></td></tr></table></figure><p>倒数第四个开始删除，删除开始以后的前两个元素。所以删除的是【“c”，“d”】<br />\n如果是单纯的插入元素，也可以使用 splice（）将第二个参数设置为 0，就可以了。这时候，第一个参数表示插入的位置，第三个或者第三个以后的参数就是需要插入的新元素。如果只提供一个参数。就等同于将原数组才拆分为两个数组。从第一个参数的位置起开始拆分。</p>\n<p>例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3, 4]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token comment\">// [1, 2]</span></pre></td></tr></table></figure></li>\n<li>\n<p>sort（）</p>\n<p>sort 方法对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// ['a', 'b', 'c', 'd']</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// [1, 2, 3, 4]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// [101, 11]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">10111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// [10111, 1101, 111]</span></pre></td></tr></table></figure><p>上面代码的最后两个例子，需要特殊注意。sort () 方法不是按照大小排序，而是按照字典顺序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以 101 排在 11 的前面。</p>\n</li>\n<li>\n<p><strong>map（）</strong></p>\n<p>map 方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// [2, 3, 4]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>numbers</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// [1, 2, 3]</span></pre></td></tr></table></figure><p>上面代码中，numbers 数组的所有成员依次执行参数函数，运行结果组成一个新数组返回，原数组没有变化。</p>\n<p>map 方法接受一个函数作为参数。该函数调用时，map 方法向它传入三个参数：当前成员、当前位置和数组本身。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> elem <span class=\"token operator\">*</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// [0, 2, 6]</span></pre></td></tr></table></figure><p>上面代码中，map 方法的回调函数有三个参数，elem 为当前成员的值，index 为当前成员的位置，arr 为原数组（[1, 2, 3]）。</p>\n</li>\n<li>\n<p><strong>foreach（）</strong></p>\n<p>forEach 的用法与 map 方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'['</span> <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token string\">'] = '</span> <span class=\"token operator\">+</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// [0] = 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// [1] = 5</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// [2] = 9</span></pre></td></tr></table></figure><p>上面代码中，forEach 遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以不必使用 map 方法。<strong>注意</strong>：forEach（）参数是一个方法，方法中的第一个参数是当前数组中的值，第一个值就是第一个值打印出来，第二个参数是当前数组的当前值的下标。第三个参数是整个数组。且记住，大写 Each 的首字母。</p>\n<p>forEach 方法也可以接受第二个参数，绑定参数函数的 this 变量。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> out <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>elem <span class=\"token operator\">*</span> elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  out <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>out <span class=\"token comment\">// [1, 4, 9]</span></pre></td></tr></table></figure><p>上面代码中，空数组 out 是 forEach 方法的第二个参数，结果，回调函数内部的 this 关键字就指向 out。</p>\n<p><strong>注意</strong>，forEach 方法无法中断执行，总是会将所有成员遍历完，forEach 方法也会跳过数组的空位。</p>\n</li>\n<li>\n<p><strong>filter（）</strong></p>\n<p>filter 方法用于过滤数组成员，满足条件的成员组成一个新数组返回。它的参数是一个函数，所有数组成员依次执行该函数，返回结果为 true 的成员组成一个新数组返回。该方法不会改变原数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>elem <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// [4, 5]</span></pre></td></tr></table></figure><p>上面代码将大于 3 的数组成员，作为一个新数组返回。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// [1, \"a\"]</span></pre></td></tr></table></figure><p>上面代码中，filter 方法返回数组 arr 里面所有布尔值为 true 的成员。filter 方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> index <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// [1, 3, 5]</span></pre></td></tr></table></figure><p>上面代码返回偶数位置的成员组成的新数组。</p>\n<p>filter 方法还可以接受第二个参数，用来绑定参数函数内部的 this 变量。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">MAX</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myFilter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>myFilter<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [8, 4, 9]</span></pre></td></tr></table></figure><p>上面代码中，过滤器 myFilter 内部有 this 变量，它可以被 filter 方法的第二个参数 obj 绑定，返回大于 3 的成员。</p>\n</li>\n<li>\n<p>some（），every（）</p>\n<p>他们和 forEach 一样都接受一个函数作为参数。分别是当前成员，当前成员的下标。整个数组。不同是，some（），every（）返回一个布尔值。some 方法是只要一个成员的返回值是 true，则整个 some 方法的返回值就是 true，否则返回 false。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> elem <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>some 方法是只要一个成员的返回值是 true，则整个 some 方法的返回值就是 true，否则返回 false。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> elem <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// false</span></pre></td></tr></table></figure></li>\n<li>\n<p>indexOf（），lastIndexOf（）</p>\n<p>indexOf 方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回 - 1。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span></pre></td></tr></table></figure><p>indexOf 方法还可以接受第二个参数，表示搜索的开始位置。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span></pre></td></tr></table></figure><p>上面代码从 1 号位置开始搜索字符 a，结果为 - 1，表示没有搜索到。lastIndexOf 方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回 - 1。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span></pre></td></tr></table></figure><p>注意，这两个方法不能用来搜索 NaN 的位置，即它们无法确定数组成员是否包含 NaN。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"异步操作的概述\"><a class=\"anchor\" href=\"#异步操作的概述\">#</a> 异步操作的概述</h1>\n<ol>\n<li>\n<p>回调函数。</p>\n<p>下面是两个函数 f1 和 f2，编程的意图是 f2 必须等到 f1 执行完成，才能执行。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码的问题在于，如果 f1 是异步操作，f2 会立即执行，不会等到 f1 结束再执行。这时，可以考虑改写 f1，把 f2 写成 f1 的回调函数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>回调函数的优点是简单、容易理解和实现，缺点是不利于代码的阅读和维护，各个部分之间高度耦合（coupling），使得程序结构混乱、流程难以追踪（尤其是多个回调函数嵌套的情况），而且每个任务只能指定一个回调函数。</p>\n</li>\n</ol>\n<h1 id=\"元素的其他属性\"><a class=\"anchor\" href=\"#元素的其他属性\">#</a> 元素的其他属性</h1>\n<ol>\n<li>\n<p>clientWidth（获取元素的宽度）<br />\nclientHeight（获取元素的高度）<br />\n这两个属性可以获取元素的可见宽度。获取的值不带 px，可以直接计算，包含 padding。属性只读，不能修改。</p>\n</li>\n<li>\n<p>offsetWidth 和 offsetHeigth<br />\n 获取元素的整个高度，包括 boder，padding。内容。</p>\n</li>\n<li>\n<p>offsetLeft<br />\n 当前元素相对于其定位父元素的水平偏移量</p>\n</li>\n<li>\n<p>offsetTop<br />\n 当前元素相对于其定位父元素的垂直偏移量</p>\n</li>\n<li>\n<p>scrollLeft<br />\n 可以获取水平滚动条滚动的距离<br />\n scrollTop<br />\n 可以获取垂直滚动条滚动的距离<br />\n scrollHeight</p>\n</li>\n<li>\n<p>元素的滚动高度</p>\n</li>\n<li>\n<p>事件对象，enent 获取鼠标当前位置</p>\n</li>\n</ol>\n<h1 id=\"字符串的方法\"><a class=\"anchor\" href=\"#字符串的方法\">#</a> 字符串的方法</h1>\n<ol>\n<li>\n<p>charAt（）</p>\n<p>获取输入字符串指定位置的字符。下标从 0 开始。</p>\n</li>\n<li>\n<p>charCodeAt（）</p>\n<p>获取指定位置的字符编码。</p>\n</li>\n<li>\n<p>indexof（）</p>\n<p>该方法可以检索一个字符串中是否含有指定的内容。返回，如果字符串中有含有该内容的，则会返回其第一次出现的索引位置。如果没有找到指定的内容，则返回 - 1，可以指定开始查找的位置。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>lastIndexOf（）</p>\n<p>方法和 indexOf 基本一样，一个从前  一个从后。</p>\n</li>\n<li>\n<p>slice（）</p>\n<p>可以从字符串中截取指定的内容，不会影响原来的字符串。而是将截取的字符串返回。参数，第一个，开始位置的索引（包括开始位置）第二个，结束位置的索引（不包括结束位置）第二个参数可以省略，则从第一个开始截取到最后的字符串。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str<span class=\"token operator\">=</span> “abcdefkjak”</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> bc。</pre></td></tr></table></figure></li>\n<li>\n<p>substr（）</p>\n<p>从第几个开始截取，截取后面的几个字符。</p>\n</li>\n</ol>\n<h1 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h1>\n<p>正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照 “给定模式” 匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。</p>\n<ol>\n<li>\n<p>新建一个正则表达式：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>xyz<span class=\"token operator\">/</span>；</pre></td></tr></table></figure><p>以斜杠表示开始和结束。</p>\n<p>以斜杠表示开始和结束。</p>\n</li>\n<li>\n<p>test（）<br />\n正则实例 test（）方法返回一个布尔值，表示当前模式是否能匹配参数字符串。如果能匹配，返回一个 true。</p>\n</li>\n<li>\n<p>index：<br />\n模式匹配成功的开始位置。下标从 0 开始。</p>\n</li>\n<li>\n<p>input：<br />\n整个原字符串。(3、4) 例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">a(b+)a</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_abbba_aba_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr <span class=\"token comment\">// [\"abbba\", \"bbb\"]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>arr<span class=\"token punctuation\">.</span>index <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>arr<span class=\"token punctuation\">.</span>input <span class=\"token comment\">// \"_abbba_aba_\"</span></pre></td></tr></table></figure><p>上面代码中的 index 属性等于 1，是因为从原字符串的第二个位置开始匹配成功。</p>\n</li>\n<li>\n<p>String.prototype.search( )</p>\n<p>字符串对象的 search 方法，返回第一个满足条件的匹配结果在整个字符串中的位置。如果没有任何匹配，则返回 - 1。</p>\n</li>\n<li>\n<p>位置字符<br />\n ^：表示字符串的开始位置。<br />\n$：表示字符串的结束位置。<br />\n例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//test 必须出现在开始位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">^</span>test<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test123'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//test 必须出现在结束位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">/</span>test$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new test'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 从开始位置到结束位置只有 test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">^</span>test$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">^</span>test$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test test'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure></li>\n<li>\n<p>选择符（ | ）</p>\n<p>竖线符号（|）在正则表达式中表示 “或关系”（OR），即 cat|dog 表示匹配 cat 或 dog。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">11|22</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'911'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码中，正则表达式指定必须匹配 11 或 22。多个选择符可以联合使用。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匹配 fred、barney、betty 之中的一个</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">fred|barney|betty</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr></table></figure></li>\n<li>\n<p>连字符</p>\n<p>某些情况下，对于连续序列的字符，连字符（-）用来提供简写形式，表示字符的连续范围。比如，[abc] 可以写成 [a-c]，[0123456789] 可以写成 [0-9]，同理 [A-Z] 表示 26 个大写字母。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">a-z</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>z<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码中，当连字号（dash）不出现在方括号之中，就不具备简写的作用，只代表字面的含义，所以不匹配字符 b。只有当连字号用在方括号之中，才表示连续的字符序列。</p>\n<p>以下都是合法的字符类简写形式。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9.</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>a<span class=\"token operator\">-</span>fA<span class=\"token operator\">-</span><span class=\"token constant\">F</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token operator\">-</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>上面代码中最后一个字符类 [1-31]，不代表 1 到 31，只代表 1 到 3。</p>\n<p>连字符还可以用来指定 Unicode 字符的范围。</p>\n</li>\n<li>\n<p>预定义模式<br />\n预定义模式指的是某些常见模式的简写方式。</p>\n<p><code>\\d</code>  匹配 0-9 之间的任一数字，相当于 <code>[0-9]</code> 。<br />\n <code>\\D</code>  匹配所有 0-9 以外的字符，相当于 [^0-9]。<br />\n <code>\\w</code>  匹配任意的字母、数字和下划线，相当于 <code>[A-Za-z0-9_]</code> 。<br />\n <code>\\W</code>  除所有字母、数字和下划线以外的字符，相当于 <code>[^A-Za-z0-9]</code> 。<br />\n <code>\\s</code>  匹配空格（包括换行符、制表符、空格符等），相等于 <code>[ \\t\\r\\n\\v\\f]</code> 。<br />\n <code>\\S</code>  匹配非空格的字符，相当于 <code>[^ \\t\\r\\n\\v\\f]</code> 。<br />\n <code>\\b</code>  匹配词的边界。<br />\n <code>\\B</code>  匹配非词边界，即在词的内部。<br />\n下面是一些例子。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// \\s 的例子</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span>\\s\\w<span class=\"token operator\">*</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\" world\"]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// \\b 的例子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">/</span>\\bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">/</span>\\bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello-world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">/</span>\\bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'helloworld'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// \\B 的例子</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">/</span>\\Bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello-world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">/</span>\\Bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'helloworld'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码中，\\s 表示空格，所以匹配结果会包括空格。\\b 表示词的边界，所以 world 的词首必须独立（词尾是否独立未指定），才会匹配。同理，\\B 表示非词的边界，只有 world 的词首不独立，才会匹配。</p>\n</li>\n<li>\n<p>重复类型<br />\n模式的精确匹配次数，使用大括号（{}）表示。{n} 表示恰好重复 n 次，{n,} 表示至少重复 n 次，{n,m} 表示重复不少于 n 次，不多于 m 次。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">lo&#123;2&#125;k</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'look'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span>lo<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>k<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'looook'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码中，第一个模式指定 o 连续出现 2 次，第二个模式指定 o 连续出现 2 次到 5 次之间。</p>\n</li>\n<li 1，=\"\">\n<p>量词符<br />\n？：问号表示某个模式出现 0 次或者 1 次，等同于 {0,1}<br />\n*：星好表示某个模式出现 0 次或者多次，等同于 {0，}<br />\n+：加号表示某个模式出现 1 次或者多次，等同于</p>\n<p>量词：<br />\nreg = /(ab){3}/  表示 ab 出现 3 次<br />\n reg = /b {3}/  表示 b 出现 3 次<br />\n reg = /ab {1，3} c/  表示 a 和 c 中间的 b 出现至少一次或 3 次。<br />\nreg = /ab {3,} c/ 表示 a 和 c 中间的 b 出现 3 次，或 3 次以上。</p>\n</li>\n</ol>\n<h1 id=\"js后半部部分\"><a class=\"anchor\" href=\"#js后半部部分\">#</a> js 后半部部分</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXA0NDExdTdUVD9wPTExNA==\">学习地址</span></p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "JavaScript",
                "JavaScript"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Vue%E6%BA%90%E7%A0%81/Vue%E6%BA%90%E7%A0%81/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Vue%E6%BA%90%E7%A0%81/Vue%E6%BA%90%E7%A0%81/",
            "title": "Vue源码",
            "date_published": "2021-03-25T16:00:00.000Z",
            "content_html": "<h1 id=\"为什么要学习源码\"><a class=\"anchor\" href=\"#为什么要学习源码\">#</a> 为什么要学习源码？</h1>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Vue源码",
                "Vue源码"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Webpack/Webpack/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Webpack/Webpack/",
            "title": "webpack打包工具",
            "date_published": "2021-03-25T16:00:00.000Z",
            "content_html": "<h1 id=\"webpack五个核心概念\"><a class=\"anchor\" href=\"#webpack五个核心概念\">#</a> webpack 五个核心概念</h1>\n<ol>\n<li>\n<p>Entry</p>\n<p>入口（Entry）指示 Webpack 以那个文件为入口起点开始打包，分析构建内部依赖图。从哪儿打包。</p>\n</li>\n<li>\n<p>Output</p>\n<p>输出（Output）指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p>\n</li>\n<li>\n<p>Loader</p>\n<p>Loader 让 Webpack 能够去处理那些非 JavaScript 文件（Webpack）自身只理解 JavaScript 文件。就是翻译 css。以及茹铺，让他成为 Webpack 可以认识的东西。</p>\n</li>\n<li>\n<p>Plugins</p>\n<p>插件（Plugins）可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。做些功能更加强大的事。</p>\n</li>\n<li>\n<p>Mode</p>\n<p>模式（Mode）指示 Webpack 使用相应的模式配置。</p>\n<ul>\n<li>\n<p>development</p>\n<p>测试环境，能让代码本地调试、运行的环境，配置相对来说，简单一点。</p>\n</li>\n<li>\n<p>production</p>\n<p>生产环境，能让代码优化上线，运行的环境。优化更好。配置也比较全面。</p>\n</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Webpack",
                "Webpack"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E4%B8%89%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E4%B8%89%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "title": "雨季，一人撑伞、影子陪行。",
            "date_published": "2021-03-22T03:14:47.159Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试。\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"3535ba4468f0d6bebe6d15e2e7872375778132bb8cf7799771af19a423f76a91\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">请输入密码查看，密码为6位数哦~。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/BootstrapVue/Bootstarp-Vue/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/BootstrapVue/Bootstarp-Vue/",
            "title": "Bootstarp-Vue 框架",
            "date_published": "2021-03-17T16:00:00.000Z",
            "content_html": "<ol>\n<li>\n<h1 id=\"vue中引用bootstarpvue\"><a class=\"anchor\" href=\"#vue中引用bootstarpvue\">#</a> vue 中引用 bootstarpVue</h1>\n<blockquote>\n<ol>\n<li>\n<p>进入你的项目里</p>\n</li>\n<li>\n<p>打开命令行工具，安装 BootstrapVue,</p>\n</li>\n<li>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm i bootstrap<span class=\"token operator\">-</span>vue <span class=\"token operator\">-</span><span class=\"token constant\">S</span></pre></td></tr></table></figure></li>\n<li>\n<p>安装后，打开 main.js 主程序入口文件</p>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> BootstrapVue <span class=\"token keyword\">from</span> <span class=\"token string\">'bootstrap-vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'bootstrap/dist/css/bootstrap.css'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'bootstrap-vue/dist/bootstrap-vue.css'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 注册为全局组件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>BootstrapVue<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>完成，可以直接使用它的组件了</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Bootstarp-Vue",
                "BootstarpVue"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Element%20Ui/Element-Ui/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Element%20Ui/Element-Ui/",
            "title": "Element-Ui 框架",
            "date_published": "2021-03-17T16:00:00.000Z",
            "content_html": "<h1 id=\"自定义表格内外边框颜色\"><a class=\"anchor\" href=\"#自定义表格内外边框颜色\">#</a> 自定义表格内外边框颜色</h1>\n<h2 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<p>在我们使用饿了么 UI 框架做项目的时候，el-table 的自带的表格边框颜色有时候需要修改一下。本文简述一下修改 el-table 边框样式的注意事项。</p>\n<h3 id=\"初始代码\"><a class=\"anchor\" href=\"#初始代码\">#</a> 初始代码</h3>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;el-table \n      :data=&quot;tableData&quot; \n      style=&quot;width: 40%&quot; \n      border\n    &gt;\n      &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column prop=&quot;nation&quot; label=&quot;国别&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column prop=&quot;bornPlace&quot; label=&quot;出生地方&quot;&gt; &lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &quot;app&quot;,\n  data() &#123;\n    return &#123;\n      tableData: [\n        &#123;\n          name: &quot;刘备&quot;,\n          nation: &quot;蜀国&quot;,\n          bornPlace: &quot;涿郡涿县（河北省涿州市）&quot;,\n        &#125;,\n        &#123;\n          name: &quot;曹操&quot;,\n          nation: &quot;魏国&quot;,\n          bornPlace: &quot;沛国谯县（安徽省亳州市）&quot;,\n        &#125;,\n        &#123;\n          name: &quot;孙权&quot;,\n          nation: &quot;吴国&quot;,\n          bornPlace: &quot;吴郡富春县（浙江省杭州市富阳区）&quot;,\n        &#125;,\n        &#123;\n          name: &quot;关羽&quot;,\n          nation: &quot;蜀国&quot;,\n          bornPlace: &quot;河东郡解县（山西省运城市盐湖区解州镇）&quot;,\n        &#125;,\n      ],\n    &#125;;\n  &#125;,\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"初始效果\"><a class=\"anchor\" href=\"#初始效果\">#</a> 初始效果</h3>\n<p><img data-src=\"https://image-static.segmentfault.com/116/486/1164868583-600e6388628a4\" alt=\"image\" /></p>\n<h3 id=\"第一步加入单元格的回调\"><a class=\"anchor\" href=\"#第一步加入单元格的回调\">#</a> 第一步，加入单元格的回调</h3>\n<h4 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/393/733/3937331683-600e642992093\" alt=\"image\" /></p>\n<h4 id=\"效果如下\"><a class=\"anchor\" href=\"#效果如下\">#</a> 效果如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/384/833/3848336474-600e64951e0a1\" alt=\"image\" /></p>\n<h3 id=\"第二步加入表头的回调\"><a class=\"anchor\" href=\"#第二步加入表头的回调\">#</a> 第二步，加入表头的回调</h3>\n<h4 id=\"代码如下-2\"><a class=\"anchor\" href=\"#代码如下-2\">#</a> 代码如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/364/434/364434355-600e654c78c83\" alt=\"image\" /></p>\n<h4 id=\"效果如下-2\"><a class=\"anchor\" href=\"#效果如下-2\">#</a> 效果如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/248/389/2483891796-600e65a2a71b7\" alt=\"image\" /></p>\n<h3 id=\"第三步单独给表格加样式\"><a class=\"anchor\" href=\"#第三步单独给表格加样式\">#</a> 第三步，单独给表格加样式</h3>\n<h4 id=\"代码如下-3\"><a class=\"anchor\" href=\"#代码如下-3\">#</a> 代码如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/200/720/200720399-600e67f13b8ef\" alt=\"image\" /><br />\n<img data-src=\"https://image-static.segmentfault.com/405/061/4050614932-600e67c3c88e5\" alt=\"image\" /></p>\n<h4 id=\"效果如下-3\"><a class=\"anchor\" href=\"#效果如下-3\">#</a> 效果如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/179/167/1791671657-600e681be28ab\" alt=\"image\" /></p>\n<h1 id=\"表格自适应宽\"><a class=\"anchor\" href=\"#表格自适应宽\">#</a> 表格自适应宽</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 表格的自适应宽 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>All Columns auto-fit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddColumn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Column<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddRows<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Row<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token attr-name\">border</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token attr-name\">auto-fit-column</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>姓名2222<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token attr-name\">fixed</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄3333<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(option, index) in options<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token attr-name\">:label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.label<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token attr-name\">:prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.prop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token attr-name\">sortable</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token attr-name\">auto-fit</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Type to search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Max-width<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token attr-name\">border</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token attr-name\">auto-fit-column</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>姓名2222<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token attr-name\">fixed</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄3333<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token attr-name\">:max-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>130<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(option, index) in options<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token attr-name\">:label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.label<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token attr-name\">:prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.prop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token attr-name\">:max-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token attr-name\">sortable</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token attr-name\">auto-fit</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>          <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Type to search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Some Columns auto-fit (name &amp; age)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddColumn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Column<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddRows<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Row<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token attr-name\">border</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token attr-name\">auto-fit-column</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token attr-name\">:fit-styles</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styles<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token attr-name\">:fit-columns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[<span class=\"token punctuation\">'</span>name<span class=\"token punctuation\">'</span>, <span class=\"token punctuation\">'</span>age<span class=\"token punctuation\">'</span>, <span class=\"token punctuation\">'</span>salary<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token attr-name\">fixed</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Age<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Salary<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>salary<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token attr-name\">:formatter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formatter<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(option, index) in options<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>      <span class=\"token attr-name\">:label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.label<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>      <span class=\"token attr-name\">:prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.prop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>      <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>      <span class=\"token attr-name\">sortable</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>      <span class=\"token attr-name\">auto-fit</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>      <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>          <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>          <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>          <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Type to search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Show Summary<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddColumn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Column<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddRows<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Row<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleReverseColumn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Reverse Column<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleDynamicAutoColumn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Dynamic auth-width Column<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token attr-name\">border</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token attr-name\">auto-fit-column</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token attr-name\">show-summary</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token attr-name\">:summary-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>summaryMethod<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token attr-name\">:fit-styles</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styles<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token attr-name\">:fit-columns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fitColumns<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(column, cIndex) in autoWidthColumns<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>      <span class=\"token attr-name\">:label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column.label<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>      <span class=\"token attr-name\">:prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column.name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>      <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cIndex<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>      <span class=\"token attr-name\">:formatter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formatter<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>      <span class=\"token attr-name\">fixed</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(option, index) in options<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>      <span class=\"token attr-name\">:label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.label<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>      <span class=\"token attr-name\">:prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.prop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>      <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10 + index<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>      <span class=\"token attr-name\">sortable</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>      <span class=\"token attr-name\">auto-fit</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>      <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>          <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>          <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>          <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Type to search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>copyright<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&copy;\">&amp;copy;</span> www.kuaizi.ai<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currency</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> decimal <span class=\"token operator\">=</span> <span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>  <span class=\"token keyword\">let</span> parts</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  <span class=\"token keyword\">let</span> hasDecimal <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token comment\">// 检测是否有小数点</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    hasDecimal <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.\\d&#123;1,&#125;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token comment\">// 精度</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    n <span class=\"token operator\">=</span> hasDecimal <span class=\"token operator\">?</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span>decimal<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    parts <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\B(?=(\\d&#123;3&#125;)+(?!\\d))</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>hasDecimal <span class=\"token operator\">?</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token string\">'-'</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>  <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>      search<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>          age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>          salary<span class=\"token operator\">:</span> <span class=\"token number\">320000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>          remark<span class=\"token operator\">:</span> <span class=\"token string\">'sdfsdfsdfsdfsdfsdff'</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>          age<span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>          salary<span class=\"token operator\">:</span> <span class=\"token number\">525000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>          remark<span class=\"token operator\">:</span> <span class=\"token string\">'sdfsdfsdfsdfsdfsdff'</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>      autoWidthColumns<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>          label<span class=\"token operator\">:</span> <span class=\"token string\">'Name'</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>          label<span class=\"token operator\">:</span> <span class=\"token string\">'Age'</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'salary'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>          label<span class=\"token operator\">:</span> <span class=\"token string\">'Salary'</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'remark'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>          label<span class=\"token operator\">:</span> <span class=\"token string\">'Remark'</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>      styles<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>        header<span class=\"token operator\">:</span> <span class=\"token string\">'font-size: 14px; font-weight: bold; padding: 0 10px;'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        body<span class=\"token operator\">:</span> <span class=\"token string\">'font-size: 14px; padding: 0 10px;'</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token function\">fitColumns</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoWidthColumns<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>    <span class=\"token comment\">// formatter (row, column, cellValue, index) &#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>    <span class=\"token function\">formatter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">row<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">,</span> cellValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">.</span>property <span class=\"token operator\">!==</span> <span class=\"token string\">'salary'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cellValue</pre></td></tr><tr><td data-num=\"242\"></td><td><pre>      <span class=\"token comment\">// 获取字段名</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>      <span class=\"token comment\">// console.log(column.property)</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">currency</span><span class=\"token punctuation\">(</span>cellValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token function\">handleAddColumn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'remark'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'备注'</span><span class=\"token punctuation\">,</span> maxWidth<span class=\"token operator\">:</span> <span class=\"token number\">130</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token function\">handleAddRows</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>        name<span class=\"token operator\">:</span> <span class=\"token string\">'tommyshao'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>        salary<span class=\"token operator\">:</span> <span class=\"token number\">15000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>        remark<span class=\"token operator\">:</span> <span class=\"token string\">'sdfsdfsdf什么备注，不准换行啊啊啊啊啊啊啊啊啊啊啊'</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    <span class=\"token function\">summaryMethod</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> columns<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>      <span class=\"token keyword\">const</span> showSummaryCol <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'salary'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>      <span class=\"token keyword\">const</span> sums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>      columns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">column<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>          sums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'合计'</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>          <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>        <span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> showSummaryCol<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>          sums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> curr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>            <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>              <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> curr</pre></td></tr><tr><td data-num=\"271\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>              <span class=\"token keyword\">return</span> prev</pre></td></tr><tr><td data-num=\"273\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>          sums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">currency</span><span class=\"token punctuation\">(</span>sums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>          sums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>      <span class=\"token keyword\">return</span> sums</pre></td></tr><tr><td data-num=\"281\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>    <span class=\"token function\">handleReverseColumn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>      <span class=\"token comment\">// this.autoWidthColumns =</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoWidthColumns<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>    <span class=\"token function\">handleDynamicAutoColumn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoWidthColumns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'remark'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>          label<span class=\"token operator\">:</span> <span class=\"token string\">'Remark'</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>        <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoWidthColumns<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre></pre></td></tr><tr><td data-num=\"299\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"300\"></td><td><pre><span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>  <span class=\"token property\">overflow-x</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre><span class=\"token selector\">.el-table .cell</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>  <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre><span class=\"token selector\">.copyright</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 100px 20px 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px 0 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>  <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 1px solid #e7e7e7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"分页效果\"><a class=\"anchor\" href=\"#分页效果\">#</a> 分页效果</h1>\n<pre><code class=\"language-vue\">&lt;el-col :span=&quot;24&quot;&gt;\n    &lt;el-pagination\n    layout=&quot;prev, pager, next&quot;\n    :page-size=&quot;device.ps&quot;\n    :total=&quot;device.trw&quot;\n    @current-change=&quot;pageChange&quot;\n    /&gt;\n &lt;/el-col&gt;\n</code></pre>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pageChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">loadDevices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> pn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>分页效果使用在 element ui 的表格中，表格数据过多时，使它可以点击下一页。实现翻页，让页面美化。上面代码中， <code>layou</code> t 是组件的布局，其中<strong> prev</strong> 是表示上一页，默认是一个箭头。可以换为<strong> prev-test</strong> + 文字，自定义文字。反之 <code>next</code> 。中间的 pager 是组件的主体部分，显示一共几页。要给分页按钮添加颜色使用 background 属性即可。<strong>page-size</strong> 每页显示条目个数，即每页多少行。<strong>total</strong> 总的条目数，一共有多少行。pn 代表当前行。点击方法，点击以换分页显示数据。ps 代表每页可以显示多少行。</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Element-Ui",
                "ElementUi"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/Blog/GitHub%E5%AD%A6%E4%B9%A0%E7%AF%87/",
            "url": "https://lklyx.github.io/Growth-Diary/Blog/GitHub%E5%AD%A6%E4%B9%A0%E7%AF%87/",
            "title": "GitHub中遇到的问题",
            "date_published": "2021-03-16T16:00:00.000Z",
            "content_html": "<h1 id=\"打不开github官网\"><a class=\"anchor\" href=\"#打不开github官网\">#</a> 打不开 GitHub 官网</h1>\n<ol>\n<li>\n<p>百度搜<em>索查询网址 dns</em>，或者直接打开<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29sLmNoaW5hei5jb20vZG5zLw==\">网址查询</span></p>\n</li>\n<li>\n<p>检测到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmdpdGh1Yi5jb20=\"> https://github.com</span> 网址响应的 IP，将得到的 IP 添加到 hosts 文件中去。</p>\n</li>\n<li>\n<p>hosts 文件路径为：电脑磁盘中 <code>windows C:\\Windows\\System32\\drivers\\etc\\hosts</code>  右击，以管理员身份打开，打开方式为记事本。将上面查询到的 IP 地址输入到文件中保存即可。</p>\n</li>\n<li>\n<p>现在我加入的是：</p>\n<blockquote>\n<p>13.229.188.59 <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span><br />\n140.82.112.4 <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span></p>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "历练ing",
                "Blog",
                "GitHub"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/Blog/%E6%B7%BB%E5%8A%A0%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD/",
            "url": "https://lklyx.github.io/Growth-Diary/Blog/%E6%B7%BB%E5%8A%A0%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD/",
            "title": "完善博客功能",
            "date_published": "2021-03-15T16:00:00.000Z",
            "content_html": "<h1 id=\"在博客中添加搜索功能\"><a class=\"anchor\" href=\"#在博客中添加搜索功能\">#</a> 在博客中添加搜索功能</h1>\n<blockquote>\n<ol>\n<li>\n<p>添加效果</p>\n<p><img data-src=\"../../../images/blog/image-20201117153748902.png\" alt=\"image-20201117153748902\" /></p>\n</li>\n<li>\n<p>开始添加</p>\n<p>下载最新的 hexo 主题，因为新的主题已经集成了 algolia 搜索，可以省去很多配置和修改。去官网注册，也可以绑定 github 账号登录。<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxnb2xpYS5jb20=\">去 algolia 官网</span>，注册好以后进去新建一个 index。我们需要用到这个 index 的名字。</p>\n<p><img data-src=\"../../../images/blog/image-20201117153923833.png\" alt=\"image-20201117153923833\" /></p>\n</li>\n<li>\n<p>打开 API Keys 页面，里面的信息等会需要写到 hexo 的配置文件中</p>\n<p><img data-src=\"../../../images/blog/image-20201117154151931.png\" alt=\"image-20201117154151931\" /></p>\n</li>\n<li>\n<p>在根目录的站点配置文件_config.yml 中加入如下配置，参照上图的各种 key 值</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">algolia</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'appid'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">apiKey</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'apiKey'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">adminApiKey</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'adminApiKey'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">indexName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'上面填写的index名'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">chunkSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">fields</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">-</span> title</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">-</span> slug</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">-</span> path</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">-</span> content<span class=\"token punctuation\">:</span>strip</pre></td></tr></table></figure><p>我用的是 shoka 主题，这主题默认配置好了以下这些配置，所以 <code>无需手动配置</code> 。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">algolia_search</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">hits</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">per_page</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">input_placeholder</span><span class=\"token punctuation\">:</span> Search for Posts</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">hits_empty</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"我们没有找到任何搜索结果: $&#123;query&#125;\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">hits_stats</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"找到$&#123;hits&#125;条结果（用时$&#123;time&#125; ms）\"</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>重点：</code> 在 git bash 中执行 <code>hexo algolia</code>  把配置提交到 algolia 上。 <code>这一步是每次写完都要提交的</code></p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo algolia</pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n<h1 id=\"在文章中添加相册\"><a class=\"anchor\" href=\"#在文章中添加相册\">#</a> 在文章中添加相册</h1>\n<p>在插入的图片最后一张末尾加上 <code>&#123;.gallery&#125;</code>  或 <code>&#123;.gallery data-height=&quot;120&quot;&#125;</code> ，记得换行，不要跟在图片后面。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.gallery<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#  这是排列起来</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.gallery data<span class=\"token punctuation\">-</span>height=\"120\"<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 这是自定义高排列</span></pre></td></tr></table></figure><h1 id=\"添加评论功能\"><a class=\"anchor\" href=\"#添加评论功能\">#</a> 添加评论功能</h1>\n<blockquote>\n<ol>\n<li>\n<p>进入 Valine 官网，注册登录， 安照快速开始步骤进行。<span class=\"exturl\" data-url=\"aHR0cHM6Ly92YWxpbmUuanMub3JnLw==\">Valine 官网</span></p>\n</li>\n<li>\n<p>在评论的时候填入对应 MD5 值，在评论区头像上右击自己的头像，后面有一段字符串例如： <code>https://gravatar.loli.net/avatar/131ab989394372ace9fd15f9fc257a75?size=80&amp;d=mp</code></p>\n<p>中有，avatar 后面的字符串。记得在前面加上 <code>-</code> 。</p>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"在博客中添加宠物\"><a class=\"anchor\" href=\"#在博客中添加宠物\">#</a> 在博客中添加宠物</h1>\n<blockquote>\n<p>​\t在自己的博客中安装 2D 宠物，</p>\n<ol>\n<li>\n<p>安装插件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install <span class=\"token operator\">--</span>save hexo<span class=\"token operator\">-</span>helper<span class=\"token operator\">-</span>live2d</pre></td></tr></table></figure></li>\n<li>\n<p>选择自己喜欢的宠物，我在这里列出一部分宠物代码。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>chitose</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>epsilon2_1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>gf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>haru<span class=\"token operator\">/</span><span class=\"token number\">01</span> <span class=\"token punctuation\">(</span>use npm install <span class=\"token operator\">--</span>save live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>haru<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>haru<span class=\"token operator\">/</span><span class=\"token number\">02</span> <span class=\"token punctuation\">(</span>use npm install <span class=\"token operator\">--</span>save live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>haru<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>haruto</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>hibiki</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>hijiki</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>izumi</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>koharu</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>miku</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>ni<span class=\"token operator\">-</span>j</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>nico</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>nietzsche</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>nipsilon</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>nito</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>shizuku</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>tororo</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>tsumiki</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>unitychan</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>wanko</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>live2d<span class=\"token operator\">-</span>widget<span class=\"token operator\">-</span>model<span class=\"token operator\">-</span>z16</pre></td></tr></table></figure></li>\n<li>\n<p>具体的安装： <code>npm install + 宠物代码</code>  例：</p>\n<pre><code>npm isntall live2d-widget-model-tororo\n</code></pre>\n</li>\n<li>\n<p>在站点配置文件中 <code>_config.yml</code>  添加配置</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>live2d:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  enable: true</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  scriptFrom: local</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  pluginRootPath: live2dw/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  pluginJsPath: lib/</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  pluginModelPath: assets/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  model:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    # 这是白猫的模型</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    use: live2d-widget-model-tororo</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  display:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    # 设置模型的位置</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    position: right</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    width: 120 # 宽度</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    height: 240 # 高度</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  mobile:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    show: false</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  react:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    opacityDefault: 1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    opacityOnHover: 1</pre></td></tr></table></figure></li>\n<li>\n<p>这里需要注意的是，每一个宠物模型都需要 <code>npm install + 宠物模型代码</code> 来安装才能使用，且安装以后需要在配置文件中配置 <code>use</code>  的模型值，值为你安装的宠物模型代码。最后运行部署就可以了。</p>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"hexo博客文章加密\"><a class=\"anchor\" href=\"#hexo博客文章加密\">#</a> hexo 博客文章加密</h1>\n<blockquote>\n<ol>\n<li>\n<p>前言</p>\n<p>有时候我们可能需要一些私密的博客空间，这部分的文章类容不想让别人看见，在 hexo 中，此时我们可以通过一个插件来实现这种功能。 <code>hexo-blog-encrypt</code></p>\n</li>\n<li>\n<p>安装</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install <span class=\"token operator\">--</span>save hexo<span class=\"token operator\">-</span>blog<span class=\"token operator\">-</span>encrypt</pre></td></tr></table></figure></li>\n<li>\n<p>快速使用</p>\n<p>将 password 添加到您的文章头部信息中，如下这样：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>title: Hello World</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>date: 2021-03-16 17:12:21</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>password: mima # 这是你自己输入的密码</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr></table></figure></li>\n<li>\n<p>修改文章信息头</p>\n<ul>\n<li>\n<p>最简约简单的写法就是如上面第三点的那样，只要在文章的信息头加上 <code>password：</code> 后面跟你自己设置的密码就可以了。当然，写这样的前提是你的配置文件里面都配置好了各种项。如果简约的不行，就按照正常的写法来写吧！</p>\n</li>\n<li>\n<p>正常的写法是这样的：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>title: Hello World</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tags:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>- 加密文章tag</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>date: 2020-03-13 21:12:21</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>password: muyiio</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>abstract: 这里有东西被加密了，需要输入密码查看哦。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>message: 您好，这里需要密码。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>---</pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>修改博客根目录 <code>_config</code>  添加配置文件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 设置博客文章密码</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>encrypt: # hexo-blog-encrypt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  enable: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  abstract: 这里有东西被加密了，需要输入密码查看哦。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  message: 请输入密码查看，密码为6位数哦~。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  tags:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  - &#123;name: tagName, password: mima&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  template: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hexo-blog-encrypt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-wpm</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-whm</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hbe-input-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hbePass<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bottom-line<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hbeData<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hbeData<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-hmacdigest</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。</pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n",
            "tags": [
                "历练ing",
                "Blog",
                "踩坑篇",
                "bug篇",
                "hexo成长"
            ]
        },
        {
            "id": "https://lklyx.github.io/We-Games/LOL/%E5%88%BA%E5%AE%A2/%E6%81%B6%E9%AD%94%E5%B0%8F%E4%B8%91/",
            "url": "https://lklyx.github.io/We-Games/LOL/%E5%88%BA%E5%AE%A2/%E6%81%B6%E9%AD%94%E5%B0%8F%E4%B8%91/",
            "title": "来次魔术戏法，怎么样？",
            "date_published": "2021-03-07T16:00:00.000Z",
            "content_html": "<h2 id=\"英雄名称\"><a class=\"anchor\" href=\"#英雄名称\">#</a> 英雄名称</h2>\n<p><code>恶魔小丑--萨科</code></p>\n<h2 id=\"经典台词\"><a class=\"anchor\" href=\"#经典台词\">#</a> 经典台词</h2>\n<ol>\n<li><code>瞧瞧你的背后</code></li>\n<li><code>这很好玩吖！</code></li>\n<li><code>恶作剧的对象，是你哦。</code></li>\n<li><code>我们上吧!</code></li>\n<li><code>神出鬼没，说的就是我。</code></li>\n<li><code>在靠近一点儿。</code></li>\n</ol>\n<h2 id=\"人物关系\"><a class=\"anchor\" href=\"#人物关系\">#</a> 人物关系</h2>\n<blockquote>\n<ol>\n<li>\n<p><code>恶魔小丑 萨科 - 暗夜猎手 薇恩</code></p>\n<p>仇敌关系，小丑杀死了薇恩的父母，薇恩决定追杀小丑到天涯海角。</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"背景故事\"><a class=\"anchor\" href=\"#背景故事\">#</a> 背景故事</h2>\n<p>常人都不会视死亡如儿戏。死确非儿戏，但如果你是萨科 —— 则另当别论了。他是瓦洛兰第一位专业的嗜杀喜剧演员。他喜欢变着戏法将人折磨致死，然后放声大笑。他如何获得恶魔小丑的名号仍是个未解之迷。至于他来自何方也是众说纷纭，萨科对此也一直守口如瓶。大多数人认为萨科并非来自符文之地，而是从黑暗扭曲的世界召唤来的。另一些人则认为，他是人类阴暗欲望衍生出的恶魔化身，因此不能以常理而论。而最为可信的一种说法则是萨科是一名雇佣杀手，不需要服务时便捣腾他那些可笑的玩意。萨科也证明了自己确实是一个狡黠之人，每次政府当局想要捉拿他拷问一些骇人的非法暴行时，他都能设法逃避。虽然这样的传言可以让瓦洛兰当地居民稍稍宽心，但人们还是觉得政府竟然让这样的非法之徒逍遥法外，实在有点不可理喻。</p>\n<p>无论他的过往真相为何，萨科已经加入了英雄联盟，其中缘由惟其自知。萨科实在令人生畏，几乎所有的英雄同道与各路媒体都对他避而远之。唯有战争学院的召唤师们才知道为何让萨科加入英雄联盟，但大多数符文之地的人却怀疑这不过是一种手段而已，好让当权者能以此监督这个神秘莫测的家伙。不出所料，萨科在疯狂的地方大受欢迎，像祖安与诺克萨斯那些权欲熏心的召唤师便能与他打成一片。</p>\n<p>无论你做什么，千万不要告诉他你错过了他的连珠妙语。</p>\n<hr />\n<h2 id=\"技能介绍\"><a class=\"anchor\" href=\"#技能介绍\">#</a> 技能介绍</h2>\n<blockquote>\n<ol>\n<li>\n<p><code>背刺</code>  —— 被动技能</p>\n<p>在目标的背后时，萨科的普攻造成额外的 20-35 (1-18 级)（+15%* 额外攻击力）物理伤害并且【E 双面毒刃】造成额外的 15~50 (基于等级)（+10%*AP）魔法伤害。 [背刺】的额外普攻伤害可以暴击。</p>\n</li>\n<li>\n<p><code>欺诈魔术——Q</code></p>\n<p>萨科传送到附近并进入隐形状态，持续 2.5/2.75/3/3.25/3.5 秒。萨科可以在使用【惊吓魔盒】或【幻像】时保持隐形状态。 他在隐形期间的下一次普攻可造成 25/35/45/55/65（+25%* 额外攻击力）额外物理伤害（这个伤害可以暴击)。如果在目标的背后，这个攻击还能暴击，造成 105% 伤害。 潜行一隐形：萨科只会被附近的敌方防御塔或真实视野所显形。</p>\n</li>\n<li>\n<p><code>惊吓魔盒——W</code></p>\n<p>萨科创造一个惊吓魔盒，魔盒会在 2 秒后从敌方视野中消失。它会在敌人靠近时，或是被守卫或饰品给发现时弹出，让周围的敌人慢速逃窜 0.5/0.75/1/1.25/1.5 秒 (小兵和野怪逃窜 2 秒)。 它的攻击会对附近所有敌人造成 15/20/25/30/35（+10%*AP）魔法伤害，伤害值会在只攻击一名敌人时提升至 35/50/65/80/95（+20%*AP）。它可在隐藏状态下持续 40（+5%*AP）秒，或在攻击状态下持续 5 秒。</p>\n</li>\n<li>\n<p><code>双面毒刃——E</code></p>\n<p>被动：当双面毒刃准备就绪时，萨科的普攻会减少目标 20%/22.5%/25%/27.5%/30% 移动速度，持续 2 秒。 主动：萨科扔出一把毒刃，造成 70/95/120/145/170（+70%* 额外攻击力 +55%*AP）魔法伤害并使目标的移动速度减少 20%，持续 3 秒。如果目标的生命值低于 30%，那么毒刃会造成 150% 伤害，总伤害为 105/142.5/180/217.5/255（+105%* 额外攻击力 +82.5%*AP）</p>\n</li>\n<li>\n<p><code>幻像——R</code></p>\n<p>萨科暂时消失然后制造一个自己的幻像。幻像最多可持续 18 秒，并在死亡时爆炸，对附近的敌人造成 150/225/300（+70%*AP）魔法伤害并生成三个立即触发的小型【惊吓魔盒】。 - 小型魔盒造成 10/20/30（+10%*AP）伤害（如果只攻击一个敌人则为 25/50/75（+15%*AP）伤害)，让敌人逃窜 1 秒。 - 幻像造成萨科 60% 的伤害并承受 50% 额外伤害。 可以通过按住 alt 键的同时使用鼠标右键或再次施放此技能来控制幻像。</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"皮肤展示\"><a class=\"anchor\" href=\"#皮肤展示\">#</a> 皮肤展示</h2>\n<p class=\"gallery\"><img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big35001.jpg\" alt=\"\" title=\"恐怖之源 萨科\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big35002.jpg\" alt=\"\" title=\"贵族血统 萨科\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big35003.jpg\" alt=\"\" title=\"胡桃夹子 萨科\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big35004.jpg\" alt=\"\" title=\"小丑工作坊 萨科\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big35005.jpg\" alt=\"\" title=\"飞越疯人院 萨科\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big35006.jpg\" alt=\"\" title=\"武动巅峰 萨科\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big35007.jpg\" alt=\"\" title=\"万能小丑 萨科\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big35008.jpg\" alt=\"\" title=\"暗星 萨科\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big35015.jpg\" alt=\"\" title=\"奥术师 萨科\" /></p>\n",
            "tags": [
                "We-Games",
                "英雄联盟",
                "刺客",
                "游戏",
                "英雄联盟",
                "刺客"
            ]
        },
        {
            "id": "https://lklyx.github.io/We-Games/LOL/%E6%88%98%E5%A3%AB/%E5%BE%B7%E9%82%A6%E6%80%BB%E7%AE%A1/",
            "url": "https://lklyx.github.io/We-Games/LOL/%E6%88%98%E5%A3%AB/%E5%BE%B7%E9%82%A6%E6%80%BB%E7%AE%A1/",
            "title": "陷阵之志，有死无生。",
            "date_published": "2021-01-21T16:00:00.000Z",
            "content_html": "<h2 id=\"英雄名称\"><a class=\"anchor\" href=\"#英雄名称\">#</a> 英雄名称</h2>\n<p><code>德邦总管--赵信</code></p>\n<h2 id=\"经典台词\"><a class=\"anchor\" href=\"#经典台词\">#</a> 经典台词</h2>\n<ol>\n<li><code>胜利在呼唤</code></li>\n<li><code>他们的生命已被依法剥夺</code></li>\n<li><code>长枪依然在</code></li>\n<li><code>交给我了</code></li>\n<li><code>击鼓进军</code></li>\n<li><code>奉吾王之命！</code></li>\n<li><code>德玛西亚人从不退缩</code></li>\n<li><code>没有人能突破我的枪炜</code></li>\n<li><code>一点寒芒先到，随后枪出如龙</code></li>\n<li><code>正义在我手中</code></li>\n</ol>\n<h2 id=\"人物关系\"><a class=\"anchor\" href=\"#人物关系\">#</a> 人物关系</h2>\n<blockquote>\n<ol>\n<li>\n<p><code>德邦总管 赵信 - 德玛西亚皇子 嘉文四世</code></p>\n<p>挚友</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"背景故事\"><a class=\"anchor\" href=\"#背景故事\">#</a> 背景故事</h2>\n<p>   1、传闻中，只要是一对一的战斗，赵信就从没输过。他大半辈子都在逆境中抗争。他最早的记忆来自维斯塞罗，一艘艾欧尼亚渔船，那时的他跟着渔船从莱肯出海打渔。他是个勤快的舱务管事，谨遵长老的每一个要求 —— 从清理肮脏的甲板到整理缠结的渔网 —— 他的身心都充满平和…… 直到那一天，渔船不经意间驶出太远，进入了他国的海域。</p>\n<p>两条诺克萨斯私掠舰追上了这艘小渔船。他们的指挥官登船后宣告了诺克萨斯的荣光，并将维斯塞罗及船上的随员纳为他私人的合法财产。虽然他们多数都是年长的渔夫，不符合征兵条件，但他们还是被一律带回诺克萨斯。</p>\n<p>在经受了公海上艰难的航行后，赵信发现自己来到了一片陌生的新土地。这里的山水并不秀美，林间没有魔法。街道两旁排列着他从未见过的雄伟大门和坚固石墙，每一寸能利用的空间都挤满了人。他得知，这里便是诺克萨斯的都城，一个叫 “达克威尔” 的人就是在这里统治着这个庞大的帝国。他和维斯塞罗的其他船员被拆散了，由于没有任何办法回家，赵信只得服从俘获者的安排。</p>\n<p>他的长枪本领没有埋没，不久后他便有机会获得更好的生活 —— 用盘子盛装的食物 —— 只要他肯发挥出自己的高强武艺。诺克萨斯崇尚武力，而他的主人认为他是个勇武的斗士。</p>\n<p>一无所有、死亦无憾的赵信接受了这次机会。他脱掉了褴褛的衣衫，换上了粗制的铠甲，进入了清算竞技场。</p>\n<p>说真的，这实在是一种奇怪的娱乐形式。雄壮的战士，被冠以更加雄壮的名号，在如狼似虎的人群面前互相厮杀。欢呼声会献给卓越的技巧、华丽的表演，以及每一次鲜血的飞溅。赵信继承了 “维斯塞罗” 的名字，横空出世、名声大噪。没过多久，只要有他出场的对决就会让竞技场座无虚席，也让他的金主们盆满钵满。短短几年内，维斯塞罗成为了一个响亮的名字 —— 让观众们欢喜，也让其他清算人恐惧的名字。</p>\n<p>但他的好运并不长久。</p>\n<p>在清算人的消遣场所之外，帝国正面临困难时期。许多敌对国家都在蚕食帝国的领土，并且诺克萨斯各条边境线上都激起了反叛的浪潮。有传闻称达克威尔和他的参谋们支付了一大笔黄金，买断了许多佣兵、囚犯和清算人等等，征入帝国的战团。仅用了一次握手成交的工夫，赵信和他的同伴就被买走了，并被装进了一艘向西航行的运输船。</p>\n<p>在滨海要塞卡尔斯特德，无论多有名的清算人，曾经的名号和声望也都一文不值。他们被扔进战场，对抗德玛西亚国王嘉文三世的精英部队，敌人决心要控制住诺克萨斯对瓦洛兰的影响力…… 而赵信很快就明白，这场战争完全不同于任何竞技场决斗。</p>\n<p>虽然大多数曾经的清算人在必败的战斗面前选择了逃跑，但赵信却没有后退，枪尖染上了数百人的血。当国王的无畏先锋将他彻底包围，一些先锋战士默默对他的技艺感到赞叹，而赵信则依然拒绝逃跑。他昂首挺胸，欣然受死。</p>\n<p>然而，嘉文另有打算。这位德玛西亚的国王和竞技场的观众不一样，不必要的杀戮并不会让他感到愉悦。他愿意释放所有战败的诺克萨斯人，条件是他们发誓永远不再侵犯卡尔斯特德。仁慈的举动令赵信深感意外，他思索着回到诺克萨斯后等待他的命运。他可以回到原来的那个社会中，他的生命在那里只意味着金主赚到的钱…… 又或者，他可以为那些身具美德的人而战，捍卫那些令他重获新生的美德。</p>\n<p>在荣誉的驱使下，他在嘉文三世面前屈膝下跪，请求为国王效命。</p>\n<p>在后来的数十年里，赵信一次又一次地证明了自己的忠诚。作为皇家宫廷的总管，他不仅是国王的侍卫和参谋，也是朋友和仆人，而且同样也对王位的继承人，年轻的嘉文皇子尽职尽责。赵信成为德玛西亚人的道路或许不同寻常，但他从未动摇过对这个王国及其理想的全身心投入。他追问过自己，这并非出自责任感，而是出于选择。</p>\n<p>2、每当德玛西亚国王嘉文三世在皇宫顶部那熠熠生辉的大理石阳台上发表激情澎湃的演讲时，赵信都会侍立于他的身旁。人称 “德邦总管” 的赵信是光盾王朝的私人管家。他那高深莫测且不苟言谈的守夜值勤，使得关于他的 “隐秘生活” 与出身来源的推测层出不穷。不管是被茶余饭后的闲谈疑为 “祖安的双重间谍”，还是被《德玛西亚恒量》的社论推测为 “负债累累的符文法师”，赵信从未泄露出任何蛛丝马迹，以满足大众的好奇心…… 这当然是有充分理由的。</p>\n<p>在联盟成立之前，诺克萨斯以其蔚为壮观的 “绞肉大赛” 而闻名于世。这是一个残忍而扭曲的角斗赛事：当一位斗士赢得比赛时，他要同时面对的对手（通常为战俘）数目会随之增加。这就意味着每个参赛者最终都必死无疑，只是会带着无上的荣耀死去。赵信，当时被称为 “维斯塞罗”，所面对的是 300 名士兵，这个数目是之前记录的将近六倍。显然，这也意味着是他的最终赛事了。嘉文二世（后死于联盟讨伐纳什男爵的战役中，斯维因的腿也是在那次战役中受伤的），在听闻了这个史无前例的功绩之后，偷偷地潜入角斗场，给赵信提供了另一个选择：为德玛西亚效力，惩罚那些最终要将他处死的人，以此换取他的自由。堂堂君主竟会舍生救他，赵信在震惊之余接受了嘉文二世的条件。在德玛西亚策划的突袭掩护之下，嘉文解放了赵信以及他的三百名对手。在他们撤退的途中，赵信替嘉文挡下了一支毒箭。这种忠心护主之举，来自于一个并未宣誓效忠的人，为赵信赢得了一个国王身边的职位，直到国王驾崩。</p>\n<p>赵信效命于先王之子嘉文三世，他正步入一个崭新的战场 —— 正义之地 —— 为收容他的国家而战，以此报答赋予他生命意义的先王恩典，光耀嘉文一族的门庭。</p>\n<hr />\n<h2 id=\"技能介绍\"><a class=\"anchor\" href=\"#技能介绍\">#</a> 技能介绍</h2>\n<blockquote>\n<ol>\n<li>\n<p><code>果决</code>  —— 被动技能</p>\n<p>每第三次攻击或使用风斩电刺命中敌人时，都会造成额外 15% AD 物理伤害并回复（（10-112【取决于等级】） +10% AD+40% AP）生命值。</p>\n</li>\n<li>\n<p><code>三重爪击——Q</code></p>\n<p>赵信的下 3 次普攻造成额外的（20/28/36/44/52+40% 额外 AD）物理伤害并使他的其它技能的冷却时间缩短 1 秒。第 3 次普攻还会击飞目标 0.75 秒。 冷却时间（秒）: 7/6.5/6/5.5/5 法力值消耗: 30 范围: 375</p>\n</li>\n<li>\n<p><code>风斩电刺——W</code></p>\n<p>赵信进行斩击，造成 (30/40/50/60/70+30% AD) 物理伤害，随后进行刺击，造成（40/75/110/145/180+80% AP）物理伤害和持续 1.5 秒的 50% 减速。 冷却时间（秒）: 12/11/10/9/8 法力值消耗: 45 範圍: 900</p>\n</li>\n<li>\n<p><code>无畏冲锋——E</code></p>\n<p>赵信对一名敌人发起冲锋，造成（50/75/100/125/150+60% AP）魔法伤害和持续 0.5 秒的 30% 减速。 赵信自身还会获得 40/45/50/55/60% 攻击速度，持续 5 秒。 冷却时间（秒）: 12 法力值消耗: 50 範圍: 650</p>\n</li>\n<li>\n<p><code>新月护卫——R</code></p>\n<p>赵信环绕自身释放一次横扫，造成（75/175/275+100% 额外 AD）外加 15% 当前生命值的物理伤害并击退所有敌人，但不会击退被赵信的最后一次攻击或无畏冲锋命中的目标。 随后，赵信会免疫来自横扫范围外侧敌人的伤害，持续 3 秒。每次攻击和使用技能都会使这个效果的持续时间提升 0.3 秒。 冷却时间（秒）: 120/110/100 法力值消耗: 100 範圍: 500</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"短篇故事\"><a class=\"anchor\" href=\"#短篇故事\">#</a> 短篇故事</h2>\n<p><strong>后事</strong></p>\n<p>第一缕曙光洒向雄都的顶梁和屋檐，把苍白的石面染成金色。空气凝滞，在雄都东侧的高台花园中，能听到的声音只有空中鸟儿轻柔的悲鸣，还有下方城区渐渐苏醒时的呢喃。</p>\n<p>赵信盘腿坐在一方石台上，双膝架起一杆长枪，双手落在枪杆上。他凝望着下方一层层的花园阶梯、远处的城墙垛口以及更远处的德玛西亚雄都全境。看着太阳在他的第二故乡升起，往往能够给赵信带来安宁…… 然而今天却没有。</p>\n<p>他的披风沾着焦黑和血渍，铠甲上也满是凹陷和划痕。几缕发丝溜出了头顶的发髻，挂在他脸前，钢铁般的灰丝已不再有年轻时的乌黑光泽。换做平日，他应该已经梳洗整理，除去血、汗和火焰的气味。他应该已经把盔甲送去铁匠铺修理，再换一件新披风。仪容为礼，毕竟他的身份是德玛西亚总管。</p>\n<p>但今天并不是平日。</p>\n<p>国王驾崩了。</p>\n<p>他是赵信平生见过最值得尊敬的人，他对国王的景仰和爱戴胜过其他任何人。他曾发誓要保护他…… 然而赵信却没有出现在最紧要的关头。</p>\n<p>他痛苦地深吸一口气。沮丧几乎要将他压垮。</p>\n<p>前一天的法师起义让整座城市措手不及。赵信一路奔回宫殿，途中多处受伤，但他麻木不觉。几个小时里，他始终坐在那儿，独自一人，让石头的寒意钻进骨缝里，让悲伤、耻辱和罪恶如裹尸布般盖住全身。那些在袭击中幸存的宫殿卫兵没有打扰他的惨怆。他们封闭了阶梯花园，让他可以在静坐中度过黑暗的时刻。赵信对这小小的仁慈充满感激。他不知道该如何面对他们眼神中的怨怒。</p>\n<p>终于，阳光照到了他，就像审判之光一样。炫目的光线迫使他半闭起了双眼。</p>\n<p>他长长叹了口气，咬紧牙关。他拄着膝盖站起身，最后扫了一眼这座他深爱的城市，以及这座带给他慰藉的花园。然后他转过身，返回王宫。</p>\n<p>许多年前，他曾许下过诺言。现在他打算将其兑现。</p>\n<p>有气无力、失魂落魄，赵信觉得自己像不散的阴魂，游荡在最终亡故的地方。他宁愿自己已经战死。为了救驾而死至少可以死的有尊严。</p>\n<p>他沿着宫殿的回廊漂游，一切都突然变得冰冷死寂。仆人们遇见他都一言不发，在可怖的缄默中碎步走过。站岗的卫兵们脸上带着哀伤的神情。他们行了军礼，但他却低下了头。他不配接受礼遇。</p>\n<p>最后，赵信来到一扇紧闭的门前。他伸出手想要敲门，却停住了。他的手在发抖吗？他心底咒骂着自己的软弱，在橡木门板上急敲了几下，然后立正站好，将枪杆的末端杵在地面上。经过了漫长、静止的片刻后，他依然一动不动，直视着面前的门，等它打开。</p>\n<p>两名在宫殿中巡逻的卫兵出现在转角，经过他身旁，发出盔甲碰撞的声音。耻辱之心让他不愿正视他们。那扇门依然紧闭着。</p>\n<p>“我记得冕卫元帅去了北院，总管大人，” 其中一名卫兵说道，“正在指导增加布防。”</p>\n<p>赵信在心里叹了口气，但嘴上只是咬紧了牙，向那名卫兵点头致谢。</p>\n<p>“大人……” 另一名卫兵说，“无人责怪您的 ——”</p>\n<p>“谢谢你，士兵。” 赵信打断了他。他并不需要他们同情。两名卫兵一齐敬礼，然后继续巡逻。</p>\n<p>赵信转过身，朝着那两个卫兵来的方向，沿着回廊走向宫殿的北翼。缇亚娜・冕卫元帅虽然不在办公室，但这绝不是缓期和赦免，只是将煎熬拖得更久。</p>\n<p>他穿过一个悬挂着军旗和条幅的大厅，驻足在其中一面旗帜下方 —— 蓝色的底面上绣着德玛西亚的白翼利剑。这面旗是太后生前和她的贴身女仆一起亲手缝制的，虽然有三分之一都被烧毁了，但依然是一件工艺精湛、壮美绝伦的作品。它曾在盐尖山之战中陷落，但嘉文国王御驾亲征，为了夺回这面旗带头冲锋，那时赵信就在他身边。他们突破了上百名身着皮毛护甲的弗雷尔卓德狂战士，才重新抢回旗帜，然后赵信成为了那个扛起大旗的人 —— 即便火舌舔去了它的镶边，这面旗也依然迎风飘扬。那副景象扭转了当天的战局，让德玛西亚士兵重整旗鼓，拿下了一场奇迹般的胜利。在平安凯旋以后，嘉文拒绝修复这面旗帜。他希望所有看到它的人都不会忘记它所代表的历史。</p>\n<p>赵信经过了一个小房间。这里位于冷僻的王宫角落，是一间幽静的图书馆。国王曾经很喜欢在这里度过晚间的时光，远离仆人和贵族们的叨扰。赵信曾陪国王在此度过许多个漫长的夜晚，共品浓烈的蜜酒，讨论战略和政治上的分寸毫厘，追忆早已远去的年青岁月。</p>\n<p>公共场合下的嘉文总是不苟言笑，老成持重。然而在这里，在他的心灵港湾中 —— 尤其当酒杯见底、天色渐明的时候 —— 他会笑到泪流不止，还会激情昂扬地讲述自己的愿望和寄托给儿子的梦想。</p>\n<p>又一阵痛苦碾过赵信。他意识到自己再也听不到老朋友的笑声了。</p>\n<p>恍惚之间，赵信发现自己走到了训练厅的门口。过去二十年间，他恐怕在那里度过了绝大部分的时间。那里才是真正的家，才是令他感到安然的处所。他曾与国王在切磋中度过不知多少时间。也是在那里，国王喜悦地看到皇子将赵信接纳为家人。赵信在那里教授皇子剑术、枪术和矛术；在那里为摔倒的他拭干眼泪，扶他起身；在那里与他分享欢笑，庆功助威。</p>\n<p>想到皇子的那一瞬，就像被刀插进了肚子。赵信失去的是人生的挚友，而年轻的嘉文失去的却是父亲。他出生的时候母亲就因难产而死，如今的他已成孤身一人。</p>\n<p>赵信感到如鲠在喉，他正要继续动身，却有一个熟悉的声响让他驻足：一柄没有开刃的剑砍在了木桩上。有人正在训练。赵信皱起了眉。</p>\n<p>随着他缓缓走进厚重的大门，一种烦闷欲呕的感觉涌上心口。</p>\n<p>一开始他并看不清是谁在里面。房间内环绕的拱廊和立柱似乎在故意遮挡那个人。剑刃击打的声音在他耳边洪亮地回荡着。</p>\n<p>绕过一根根立柱以后，他终于看到是皇子正在举着训练用的重铁剑对着木头假人挥砍。他汗流浃背，气喘吁吁。他的表情诉说着痛苦，招式狂放不定。</p>\n<p>赵信在黑影中站定。年轻皇子的这副样子令他触目神伤。他很想走到他身边，安慰他，助他度过这艰难的时刻，因为皇子和他的父亲对赵信来说胜似家人。可是，皇子又怎么会愿意在这里看到他呢？他是国王的御前侍卫，然而现在他还活着，国王却死了。</p>\n<p>这种迟疑令赵信很不习惯，也让他很不舒服。即使是在诺克萨斯的绞肉机角斗场里，他也从未有过任何犹豫不决。他摇摇头，转身打算离开。</p>\n<p>“叔父？”</p>\n<p>赵信咒骂自己的愚蠢，为何刚才不立刻离开。</p>\n<p>他们当然不是血亲，不过早在二十年前，从赵信开始为国王效命后不久，皇子就开始称呼他 “叔父” 了。嘉文当时只是个孩子，也没人纠正他。一开始，国王只是觉得很有趣，但经年累月，赵信与皇家的关系已经和血亲一样近，他也将国王的儿子视如己出。</p>\n<p>他慢慢转过身。嘉文已不再是孩子，他已经长得比赵信还高了。他的眼眶带红，眼圈发青。赵信意识到自己并不是唯一一个无法入睡的人。</p>\n<p>“皇子殿下。” 他单膝跪地，深深低下头。</p>\n<p>嘉文什么都没说。他只是站在那里，俯视着赵信，喘着粗气。</p>\n<p>“对不起。” 赵信依然低着头。</p>\n<p>“是因为打扰了我，还是因为没有及时护驾？”</p>\n<p>赵信微微抬头看去。嘉文正对他怒目而视，手里还提着训练用的重剑。他不知如何回答，不知如何说清自己的感受。</p>\n<p>“我辜负了他，” 他最后开口说道，“也辜负了你。”</p>\n<p>嘉文在原地多站了片刻，然后转身走向房间墙边的武器架。</p>\n<p>“平身。” 嘉文命令道。</p>\n<p>赵信起身的同时，皇子向他扔去一把剑。他下意识地用左手接住，右手依然握着自己的长枪。扔来的是另一把训练用剑，加了重量，磨平了刃。然后嘉文凶猛地挥起重剑，向他扑来。</p>\n<p>赵信向后跳开，躲过这一击。</p>\n<p>“殿下，我觉得这不太 ——” 他刚一开口，就被再次冲过来的嘉文打断。剑锋直冲胸口刺来。赵信用枪杆拨开，后退了一步。</p>\n<p>“皇子殿下 ——” 他说着，但嘉文再次出手，比刚才更加不留情面。</p>\n<p>这一次是两记连续的攻击，一高一低。虽然嘉文拿的是训练用剑，一旦命中也足以断骨碎石。赵信不得不招架。他先是用侧步和枪杆挡开第一击，然后用剑接下第二击。钢铁相撞的震感沿着他的手臂传了上来。</p>\n<p>“你去哪了？” 嘉文大吼着，绕着他踱步。</p>\n<p>赵信垂下武器。“您非得这样不可吗？” 他低低地说。</p>\n<p>“是。” 嘉文怒火中烧，手中握紧了剑。</p>\n<p>赵信叹了口气。“请稍等。” 说着，他走到旁边将自己的长枪放到一个武器架上。嘉文等着他，握剑的手松开又扣紧。</p>\n<p>赵信刚一回到房间中间，嘉文立刻就出手了。他快步冲过来，发出用力的低吼。他的攻击毫无章法，但愤怒给了他力量。赵信借力用力，架开了每一次攻击，他不想直接以硬碰硬。</p>\n<p>换做是其他任何时候，他都会毫不留情地斥责皇子的狼狈不堪 —— 他只想着进攻，结果让自己门户大开、破绽百出。但赵信不会打扰皇子的情绪，他有足够的理由宣泄愤怒。他也不会趁人之危，攻击皇子的破绽。如果皇子非得狠狠打他一顿不可，那就让他打个痛快吧。</p>\n<p>“你 —— 去哪 —— 了？” 嘉文在挥砍的间歇问道。</p>\n<p>“我早就该这么做了，” 国王头也不抬地说道。他正坐在桌前写信。</p>\n<p>羽毛笔每一次下落，都是震怒之下的戳刺。他的笔触宛如激烈的炮火。</p>\n<p>很少能看到国王的情绪如此外露。</p>\n<p>“陛下？” 赵信说。</p>\n<p>“我们对自己恐惧的事物过于固执，” 国王依然没有抬头，但暂且停下了愤怒的疾书。“我们太傻了。我太傻了。为了保护自己，我们亲手创造出了自己最怕的敌人。”</p>\n<p>一记直指颈项的重击被赵信格挡住。强大的力道让他后撤一步。</p>\n<p>“你无话可说吗？” 嘉文以命令的口吻问道。</p>\n<p>“我本应与您父王在一起。” 他答道。</p>\n<p>“你没有回答问题。” 嘉文吼道。他突然转过身，当啷一声，把剑甩到一旁。有那么一瞬，赵信希望皇子就此作罢，但随后皇子从武器架上取下了另一件武器。</p>\n<p>扳龙枪。</p>\n<p>皇子举起长枪对准了赵信，表情坚毅、寸步不让。</p>\n<p>“取你的枪。” 他说。</p>\n<p>“可您没穿护甲。” 赵信反驳道。</p>\n<p>训练用的武器很容易打断骨头，而实战用的武器稍有不慎就是一条人命。</p>\n<p>“我不在乎。” 嘉文说。</p>\n<p>赵信低下头。他弯腰拾起了嘉文扔在地上的训练用剑，小心地将它放到武器架上，又放好了自己的剑。他怀着沉重的心情，不情愿地取回了自己的枪，然后回到开阔的大厅中央。</p>\n<p>一句话都没多说，嘉文攻了上来。</p>\n<p>“恕我愚钝，陛下。” 赵信说。</p>\n<p>国王停下了笔。从赵信进门开始，这是他第一次抬起头。那一刻，他看上去突然苍老了许多。额头布满沟壑，须发早已灰白。他们两人都不再年轻。</p>\n<p>“我很自责，” 嘉文国王说道。他双眼飘向空荡的远方。“我放给他们的权力太多了。这件事我始终心存疑虑，但他们据理力争，而且也有议会的支持。现在，我看到了自己的错误，是我失察。我要下谕，命令搜魔人暂停搜捕。”</p>\n<p>嘉文轻巧发力，扳龙枪冲着赵信蹿来。这把神兵的握柄伸长了近乎一倍，毕露的锋芒撕开空气，直奔赵信的喉头。</p>\n<p>德邦总管闪身一避，抡起长枪架开了致命一击，同时小心地避免让锯齿状的锋刃勾住自己的武器。</p>\n<p>即便是在残酷的激烈战场中，赵信也从未见过扳龙枪这样的武器。事实上，使用这柄神兵作战的秘密技法早在德玛西亚初王时代就已失传。在未经历练的人手中，自戕的危险并不亚于对敌。所以，几百年来，这柄长枪只是在庆典中作为礼器使用，用于作为执政家族的信物。然而，就在皇子还是个孩子的时候，他就已经开始梦想着用它战斗，就像他所崇拜的那些古代英雄那样。于是赵信向他许诺，等时机成熟，就会教他如何使用扳龙枪。</p>\n<p>嘉文向前飞跃，长枪像镰刀一样劈下来。赵信将之扫到一边，但皇子立刻追击一记旋转突刺。枪尖距赵信不过数寸，锋刃的边缘堪堪擦过他的脖颈。嘉文并没有手下留情。</p>\n<p>赵信要想教皇子如何使用那柄神兵，但他自己必须首先能够驾驭。经过国王的首肯，他开始练习并掌握它的秘密。这把枪握在手中异常轻盈，而且平衡完美，是一件卓越的武器，代表了一位匠师的巅峰技巧。</p>\n<p>当德玛西亚远在襁褓之时，著名的工匠奥伦打造了这杆枪。它是德玛西亚尊贵的标志，地位不逊于王国边境的高耸白墙或者国王头顶的王冠。它之所以被锻造出来是为了击败一头巨大的冰霜亚龙 “寒涡” 和她的子嗣，让德玛西亚古早时期的定居者们免受其害。自那以后，它一直都是皇族血脉的象征。</p>\n<p>多年间，赵信每天都在拂晓以前练习使用这杆枪。当他感觉自己已经对其具备充分的理解后，才开始教授年少的皇子如何操持这把武器。</p>\n<p>嘉文低吼一声，发力向赵信扑来。但他一心守势，干净利落地让到一边，时刻都把握着对周遭的距离感。赵信的长枪在面前留下一道道残影，每次都能将刺向自己的武器挑开。</p>\n<p>年少时的嘉文一直都在学习如何使用刀剑、枪戟和拳脚 —— 同时也在学习军事历史和修辞学，没有放下智识方面的锻炼。在他十六岁生日那天，国王终于将扳龙枪当做礼物送给了他。随后他刻苦训练，无数次伤了自己，但最后他终于能够娴熟操控，扳龙枪在他手中如臂使指。</p>\n<p>嘉文对赵信步步紧逼，每一次攻击都带着愤怒。他招招相扣，不给赵信留下任何间隙。突刺一被弹开就立刻变成上挑，紧接着两下横扫，先切腰腹，再抹咽喉。但赵信闪转腾挪，枪如铁壁，将所有招数都一一化解。</p>\n<p>虽然嘉文一直以来都是赵信的学生，但皇子年轻体壮，高大的身躯让他的攻击距离更远。他已不再是那个空有抱负的笨小孩，而是历经战斗淬炼的勇士。嘉文操持扳龙枪的技艺如今已能轻易胜过赵信。嘉文无情地进击，迫使他步步败退。</p>\n<p>赵信使尽了浑身解数才能勉力自保…… 但他无法坚持太久。</p>\n<p>国王低下头，读了一遍自己的信。他发出一声痛苦的叹息。</p>\n<p>“若我早有胆魄，或许今日的灾难尚可避免。” 他说。</p>\n<p>他在信上签下名字，然后在旁边滴上融化的皇家兰蜡，盖上了自己的印鉴。</p>\n<p>他对着印鉴吹了口气，然后提起信纸，轻轻摇晃，让火蜡尽快冷却。</p>\n<p>蜡印凝定，国王将手谕卷好，塞进了一个白色硬皮筒中，封紧了盖子。</p>\n<p>他将圆筒递给了他的总管。</p>\n<p>赵信勉强躲过了一记刁钻的横切，在最后一瞬间偏了下脑袋。扳龙枪顶端锯齿状的锋刃划过他的脸颊，见了血。</p>\n<p>从他们交手开始，赵信第一次觉得，皇子可能真的是想要他的命。</p>\n<p>国王因他的失职而死，他继而死在皇子手下，这倒也合算。</p>\n<p>嘉文用扳龙枪的枪尾拨开赵信的长枪，倏尔旋身，枪头划过一道狭长的弧线，飞向他的脖颈。</p>\n<p>这是完美的杀招，是赵信亲自教给皇子的。嘉文的步伐已经炉火纯青，而且最初挑开格挡的那一下力道恰到好处，既足以将武器打到一边，又不至于拖慢最后一击。</p>\n<p>即便如此，德邦总管还是有能力挡下来的。虽然没有丝毫的余裕，但他十分相信自己的速度，虽已经疲惫不堪，但也足以躲过这一击。</p>\n<p>然而，他却纹丝未动。他已丧失斗志。</p>\n<p>他微微抬起下颌，让这致命的一刺可以不留悬念。</p>\n<p>扳龙枪的锋刃如毒蛇吐信。这一击速度奇快、技巧精湛、力道十足，足以洞穿骨肉，几乎能让他瞬间毙命。</p>\n<p>致命的一招在刚刚触碰到赵信咽喉的时候生生止住。一串血滴淌了下来，仅此而已。</p>\n<p>“你为什么不说你去哪了？” 嘉文问道。</p>\n<p>赵信咽了一下口水。温暖的鲜血顺着他的脖子向下滑。“因我难辞其咎，” 他说，“我本应在场。”</p>\n<p>嘉文将锋刃横在赵信的咽喉前，定了片刻，然后退了回来。他似乎突然凋零了，所有怒火都倾泻一空，只剩下一个悲伤、迷茫的丧父之子。</p>\n<p>“这么说，是父亲命令你离开的，” 他说，“而你想独自担下缺阵的责任。”</p>\n<p>赵信一言不发。</p>\n<p>“我说对了，是吗？” 嘉文说。</p>\n<p>赵信叹了口气，低头望去。</p>\n<p>赵信没有说话也没有行动。他看着国王递过来的信筒，没有伸手去接。</p>\n<p>国王眉毛一提，赵信只好收下。</p>\n<p>“您是想让我把这个交给信使吗，陛下？” 他说。</p>\n<p>“不，” 嘉文说，“你替我送，我只信你一人，我的朋友。”</p>\n<p>赵信凝重地点点头，然后将圆筒别在腰带上。</p>\n<p>“送给谁？”</p>\n<p>“搜魔人兵团长。” 国王说。他举起一根手指，“不要让他的仆从代收。务必亲手交给他。”</p>\n<p>赵信颔首。“使命必达。只要等到街道肃清，逃犯们的下落查明。”</p>\n<p>“不，” 国王说，“我要你现在就去。”</p>\n<p>“他有的时候真的很顽固，” 嘉文一边说一边摇头。“只要他下定决心，就改不了了。”</p>\n<p>“我本应在场。” 赵信用微弱的声音说。</p>\n<p>嘉文揉了揉眼睛。</p>\n<p>“那岂不是违抗国王的命令？不，你不会那么做的，叔父，” 嘉文说，“他派你干什么去了？”</p>\n<p>赵信眉头紧锁。</p>\n<p>“我是您的贴身侍卫，陛下，” 他说，“我不该离开宫殿。今天不行。”</p>\n<p>“我要你送出这封信，不然事态会继续恶化，” 国王说，“必须强制命令搜魔人收手，才能避免对抗升级。事已至此，别无选择。”</p>\n<p>“陛下，我认为明智之举不应该是派我 ——” 赵信开口说道，但国王厉声打断了他。</p>\n<p>“这不是请求，总管，” 他说，“我命令你将这一法令即刻送达，不得有误。”</p>\n<p>“送信，” 嘉文平淡地说，“他令你离开，就是为了送信？”</p>\n<p>赵信点点头，嘉文发出一声苦笑。“太像他了，” 他说，“总是以社稷为重。你知道，我十四岁生日那天，他没来参加我的授剑仪式，因为要去会见坚盾议会。商讨税收。”</p>\n<p>“当然。” 赵信说。</p>\n<p>“我猜，你已经把信送到了吧？”</p>\n<p>“没有，” 赵信摇了摇头，“我听到钟声以后便立刻回头，以最快的速度返回宫殿。”</p>\n<p>“结果在街上遇到了麻烦，看你的样子就知道。” 嘉文说着，示意了一下他斑驳的外衣。</p>\n<p>“不足为虑。”</p>\n<p>“法师？” 嘉文问。</p>\n<p>赵信点了点头。“还有沆瀣一气之徒。”</p>\n<p>“我们早就应该把他们全都处决。” 嘉文狠狠地说。</p>\n<p>赵信警觉地看着皇子。他从未听他说过如此狠毒的话。当然，他知道德玛西亚针对法师的态度一直都让皇子感到困扰。但那已经是从前了。</p>\n<p>“我认为您的父亲可能对此另有看法。” 赵信拿捏着自己的语气。</p>\n<p>“结果他们杀了他。” 嘉文厉声说。</p>\n<p>赵信说什么都无济于事，于是他选择了沉默。方才迸发的怒火几乎立刻就从嘉文心中熄灭了。眼泪涌上他的双眼，他拼命不让泪水流出来。</p>\n<p>“我不知道该怎么办。” 他说。那一刻，他又成为了一个孩子，担惊受怕、孤苦伶仃。</p>\n<p>赵信向前几步，放下长枪，张开双臂，紧紧抱住嘉文。“好孩子。” 他说。</p>\n<p>然后嘉文哭了出来，止不住的啜泣让他全身跟着一起颤抖。他未曾落下的眼泪此时也在赵信脸上奔流。</p>\n<p>他们紧紧相拥了片刻，共同的哀痛将他们捆在一起，然后他们各自分开。赵信转身拾起自己落在地上的长枪，让他们二人都有时间稍作整理。</p>\n<p>当他回过身，嘉文已经将汗水打湿的衬衣换成了一件白色亚麻长袍，上面有着蓝翼利剑的纹章。他看起来已经冷静下来了。</p>\n<p>“现在，您要成为命中注定的人，” 赵信说，“您要成为领袖。”</p>\n<p>“我感觉自己还没准备好。” 嘉文说。</p>\n<p>“没有哪个领袖是准备好了的。至少，贤主无一不是如此。”</p>\n<p>“但你会和我一起，叔父。你会辅佐我。”</p>\n<p>赵信心底一凉。“我…… 恐怕，没有那种可能了。” 他说。</p>\n<p>赵信左右为难。他曾宣誓效忠嘉文国王，此后也从未违抗过任何一道命令，二十年来始终如一。</p>\n<p>“我的职责在此，我要保护您，陛下。” 他说。</p>\n<p>嘉文揉了揉眼睛，突然间面露疲态。</p>\n<p>“你的职责是保护德玛西亚。” 国王说。</p>\n<p>“您是国王，” 赵信说，“您就是德玛西亚。”</p>\n<p>“德玛西亚比任何国王都更伟大！” 嘉文厉声说，“多说无益。我意已决。”</p>\n<p>赵信的直觉正在尖叫，警告着危险，但他的责任感让他心中一片寂静。</p>\n<p>“遵旨。” 他说。</p>\n<p>他鞠了一躬，转身走出房间。</p>\n<p>“很久以前，我曾许下诺言，” 赵信说，“如果您的父亲遭遇任何不测，我当以死谢罪。”</p>\n<p>“那么，你又救驾过多少次？” 嘉文突然变得坚毅起来。那一瞬间，赵信眼中的他是那么地像他父亲。“我亲眼看见你救驾立功不下三次。但我知道肯定不止于此。”</p>\n<p>赵信皱起眉。</p>\n<p>“荣誉即吾命。” 他说，“我不能承受着背信的耻辱苟活。”</p>\n<p>“你对谁做出如此承诺？”</p>\n<p>“缇亚娜・冕卫元帅。”</p>\n<p>嘉文皱起眉。</p>\n<p>“当你为开始为父亲效命，你发誓会保卫德玛西亚，不是吗？” 他说。</p>\n<p>“当然。”</p>\n<p>“接受你誓言的是德玛西亚，” 嘉文说，“不是我的父亲。不是任何人。你对德玛西亚的职责胜过其他一切。”</p>\n<p>赵信盯着皇子的双眼放出光。真的是虎父无犬子。</p>\n<p>“可是元帅怎么办？”</p>\n<p>“由我跟缇亚娜讲，” 嘉文说，“但现在，我需要你履行自己的职责。”</p>\n<p>赵信长吁一声，这时他才发现自己一直提着一口气。</p>\n<p>“你是否愿作我的总管，像辅佐父王一样，为我驱策？” 嘉文问。</p>\n<p>赵信眨了下眼。片刻之前他还十分确定嘉文想要处决自己…… 而且他也不觉得自己有什么冤屈。</p>\n<p>他犹豫着，表情复杂，内心翻滚。</p>\n<p>“赵信…… 叔父，” 嘉文说，“我们的王国需要你。我需要你。来吧，就当是为了我好吗？”</p>\n<p>缓缓地，似乎是在给嘉文随时反悔的时间，赵信单膝跪在了地上。</p>\n<p>“荣幸之至…… 国王陛下。”</p>\n<p>嘉文和赵信穿过宫殿，走向议会厅。他父王的谋臣们 —— 不，赵信纠正自己，是他的谋臣们 —— 正在那里恭候。</p>\n<p>到处都是士兵。德玛西亚的精英部队 —— 无畏先锋已经被派到宫中协防。他们分散在每一道门口，高度警觉，纪律严明。</p>\n<p>嘉文表情坚毅，王者气度尽露无遗。只有赵信看到他在训练厅里的悲怆。现在，在仆人、贵族和卫兵们面前，他已经收敛了心绪。</p>\n<p>很好，赵信心想。德玛西亚人民需要看到坚强的他。</p>\n<p>他们路过之处，每个人都单膝跪下、俯首卑躬。他们没有慢下脚步，坚定地向前走。</p>\n<p>嘉文在议会厅的大门前短暂驻足。</p>\n<p>“还有一件事，叔父，” 他转身面向赵信说。</p>\n<p>“陛下请讲。”</p>\n<p>“先父要你送的那封信，” 他说，“现在何处？”</p>\n<p>“还在身上。” 赵信说着，从腰带上解下硬皮筒，将它呈上。</p>\n<p>嘉文接过来，打开盖子，将里面的牛皮纸展平。他的目光在父亲的字里行间穿梭跳跃。</p>\n<p>赵信看到嘉文的表情变得冷硬。他双手将信纸揉烂，就像是要把谁掐死，最后又把信交回给了赵信。</p>\n<p>“毁了它。” 嘉文说。</p>\n<p>赵信惊讶地望向他，但嘉文已经转身离开。他向站在两侧的卫兵点了下头，议会厅的大门随即洞开。长长的会议桌前，所有就座的人一齐起立，然后深鞠一躬。大厅南侧的华贵壁炉中，炉火烧得正旺。</p>\n<p>桌前有几个座位是空的。在昨天的袭击中，国王并不是唯一的死者。</p>\n<p>赵信手里拿着皱成一团的手谕，站在原地不知所措。嘉文则走向会议桌的主位。他回头看了一眼愣在门口的赵信。</p>\n<p>“总管？” 嘉文说。</p>\n<p>赵信眨了眨眼。嘉文的右手边，缇亚娜・冕卫正盯着他，眼神冷峻。嘉文的另一侧，同样寒意彻骨的，是缇亚娜的丈夫，国王密信的接收者 —— 搜魔人兵团长。赵信的视线在他们之间游移不定，最后看向了嘉文，看到了他挑起的眉毛，似乎正在发问。</p>\n<p>赵信没有耽搁太久，大步走进议会厅，将那封信扔进了炉火中。</p>\n<p>然后他来到自己的位置，站在了国王身后。他希望自己的表情没有出卖内心中突然涌上来的担忧。</p>\n<p>“开始吧。” 嘉文说。</p>\n<hr />\n<p><strong>曾经随波逐流的</strong></p>\n<p>一名昂首挺胸的囚犯，脚踝被铁链绑在木桩上，双手被粗麻绳捆在一起。鲜血沿着他的脸颊滴落在黑色的诺克萨斯短袍上，在脚趾旁留下小小的红色水坑。头顶的天空在蓝底上画出一团团灰色，说不清真正的颜色是什么。</p>\n<p>囚犯周围是一圈参差不齐的高木桩围栏。附近的士兵在帐篷之间来回穿梭。他们急匆匆的脚步激起了尘土，靴子上的泥垢肯定需要他们在面见指挥官之前清理干净。囚犯知道这些，是因为他在过去几天里一直在观察他们纪律严明的行动。他从没见过这种景象。</p>\n<p>营地周围，明快的海蓝色旗帜在风中飘扬，上面画着一对舒展的翅膀衬着一柄利剑 —— 这是德玛西亚的印记。</p>\n<p>不久前，这里飘着的还都是黑红相间的诺克萨斯旗帜。这名囚犯记得他的职责：为了帝国的光荣，拿下卡尔斯特德。</p>\n<p>他失败了。</p>\n<p>他知道会有什么下场。战争不会原谅失败。他早已准备好接受这一事实。现在，他在等待自己的命运。在他第一次被俘的时候，他失去了家。这一次，他将失去更多。</p>\n<p>他闭上了双眼，更多回忆涌上心头。他想起来，那时候是两个人。一个是他的主人 —— 他把一个迷失的少年从家园掳走，变成了清算人竞技场中如鱼得水的斗士。另一个是陌生人，自称代表了帝国的最高利益。他们握了下手，他就被运往西方，来到烁银山脉脚下，来到卡尔斯特德。</p>\n<p>没有告别，没有祝福。不过，他不是一个人。其他和他一样的人都有一个共同的名字，“厄运士兵”—— 他们全都被诺克萨斯军队征召。低贱的战士被派往前线，完成一些无足轻重的任务。许多人对此都没有发言权，他们的主人非常愿意把他们的战斗力以合适的价格卖给军方。</p>\n<p>“看长相，你不像是诺克萨斯人。” 一个声音打断了囚犯的自忖。</p>\n<p>他睁开眼，看到一个德玛西亚人站在围栏外。他穿着海蓝与棕褐相间的衣服，外面罩着锁甲，腰间挂着一把短剑。他戴着长官的徽记，但囚犯断定他位阶不高。</p>\n<p>“你叫什么名字？” 那个士兵问。</p>\n<p>囚犯想了想。他的回答是否将决定他的命运？</p>\n<p>“赵信。” 他回答的声音沙哑干涩。</p>\n<p>“什么？”</p>\n<p>“赵。信。”</p>\n<p>“听名字也不像是诺克萨斯人，” 士兵疑惑道，“诺克萨斯人的名字都很粗犷，比如…… 勃朗・达克威尔。” 他说出这个名字的同时哆嗦了一下。</p>\n<p>赵信没吭声。他怀疑自己作为一个将死之人，说这些话有什么意义。</p>\n<p>“走吧，盾士长。” 另一个德玛西亚人说。这位年轻的长官用严厉的眼神命令着下属。她穿着银色的盔甲，护肩镶着金边，身后垂着碧蓝色的披风。</p>\n<p>“和诺克萨斯人讲话就是在浪费力气，” 她说，“他们与我们不是一路人。”</p>\n<p>盾士长低下头说。“遵命，冕卫剑尉长。不过属下有一个疑问，不知……”</p>\n<p>剑尉长点了点头。</p>\n<p>“为什么要单独关押他？”</p>\n<p>她瞟了一眼囚犯，蓝色的眼眸中带着深深的鄙夷。</p>\n<p>“他杀的人最多。”</p>\n<p>赵信被号角声唤醒。他坐在泥里，用麻木的双脚磕了磕潮湿的泥土。他用后背靠在柱子上，滑着站起来，看到昨天的军士正向他走来，身边跟着四个着装类似的人。他们打开围栏的门，军士首先走进来，手上的餐盘里托着一碗热汤。</p>\n<p>“早。我是奥伯，这是我的哨戒小队，” 军士说道，“这是你的早饭，邵敬。”</p>\n<p>赵信看到他把托盘放到地上。简简单单的两个字，怎么会念错成这样？</p>\n<p>一个德玛西亚卫兵用熟练的动作切断了捆绑赵信手腕的绳子。军士和其他几人原地不动，全都把手搭在剑柄上。</p>\n<p>“好了，吃吧。” 奥伯说。</p>\n<p>赵信端起碗。“他们派了你们五个人。”</p>\n<p>“我们听从军尉的命令，” 奥伯说，“毕竟她是冕卫家的人。他们保护国王本人。”</p>\n<p>卫兵们纷纷点头，交换赞同的眼神。</p>\n<p>“对，她的父亲在暴风顶营救了上一代嘉文。” 一个卫兵说。</p>\n<p>“那是哪个嘉文？” 另一个卫兵问道。</p>\n<p>“二世。现在的是三世。”</p>\n<p>“注意，是国王嘉文三世，” 奥伯纠正道，“你们的国王，也是我的国王。你们要表现出敬意，毕竟他这次是御驾亲征。”</p>\n<p>赵信注意到，他们对国王是发自心底地崇敬。就在士兵们继续谈笑的时候，他一小口一小口地喝着热汤，同时听他们的对话。他们说起诺克萨斯深入西方这么远是多么愚蠢，说起他们来给卡尔斯特德解围是多么容易，以及他们如何以正义之名夺得胜利。</p>\n<p>我们是被派来送死的，赵信这才意识到。他无意间捏紧了手上的空碗，木碗在他手中裂成两半。</p>\n<p>几个德玛西亚士兵纷纷看了过来。奥伯盯着赵信说，“手伸出来。”</p>\n<p>赵信递出双手，手掌向上。</p>\n<p>“你还真耐打。” 奥伯用另一条绳子捆住了赵信的手腕。卫兵们凑了过来。他们看到的全是伤疤，像河流一样沿着他的皮肤纵横交错。和他交过手的人非常多，而他愿意记住的寥寥无几。</p>\n<p>“这些不是新添的伤疤。” 一个卫兵意识到。</p>\n<p>“你说得对。” 赵信说。他的声音清楚洪亮，引起了他们的警觉。有那么片刻，他们站在原地，看他的眼神不再像是看待一个囚犯。</p>\n<p>“你在诺克萨斯是干什么的？” 奥伯问。</p>\n<p>“我在竞技场里战斗。” 赵信回答。</p>\n<p>“清算人！” 一个卫兵惊呼，“我听说过你们这种野蛮人。在上千人的眼皮底下以命相搏。”</p>\n<p>“我从没听说过叫做邵敬的清算人。” 另一个卫兵喃喃地说。</p>\n<p>“或许他没什么本事？或许这就是为什么他会在这里，被打得遍体鳞伤，捆在柱子上。”</p>\n<p>“慢着，” 奥伯突然开口，“你们清算人在竞技场里都用另外的名字吧？”</p>\n<p>赵信差点就露出笑容了。这个德玛西亚人比他看上去要聪明。即使在帝国以外的地方，人们也都知道清算人会给自己安上别出心裁的名号。有的是为了耀武扬威。有的则是隐姓埋名。对于赵信来说，是为了让自己记住他被夺走的生活。</p>\n<p>“维斯塞罗，” 一个卫兵摊开一张羊皮纸，说道。“别的诺克萨斯人是这么叫他的。”</p>\n<p>奥伯一把抢过羊皮纸。他仔细端详。过了好一会，他抬头看赵信。“你是那个清算人。”</p>\n<p>沉默。纤薄的阳光刺破灰色的天空。</p>\n<p>“维斯塞罗，” 奥伯重复了一遍，他的声音透出几分敬畏。“不败者。“</p>\n<p>卫兵们面面相觑，然后不约而同地望向赵信。他们此刻的眼神中闪烁着赞许。</p>\n<p>“我知道你！” 一个卫兵说。</p>\n<p>“你是不是打败过一个牛头人？” 另一个人说。</p>\n<p>奥伯举起一只手，制止了闲谈。“你为什么说自己叫邵敬？” 他问。</p>\n<p>赵信叹了口气。“我成为清算人以后，赵信就没了。只有维斯塞罗。” 他低头看着自己被捆绑的手腕，还有被锁住的脚踝，又看向德玛西亚士兵一行。“在我离开的时候，我希望用自己的真名。”</p>\n<p>“可是鼎鼎有名的清算人为什么会出现在诺克萨斯边境战争中？” 奥伯又问。</p>\n<p>“我被买断了，” 赵信答到，“卖给了军队。” 他觉得解释这一切显得很奇怪。这么长时间以来，他一直认为自己的最终时刻会很快到来，在竞技场中，在枪下或者剑下 —— 他从未想过会有热汤和关于自己过往的提问。</p>\n<p>这是命运在赐予最后的同情吧？</p>\n<p>奥伯看上去有点儿发愁。“你是被迫的。” 他说。</p>\n<p>赵信点了点头。</p>\n<p>“你在诺克萨斯还有家人吗？”</p>\n<p>赵信想了一会，然后摇了摇头。他甚至不知道，在这世界的任何角落，是否还有他的家人存在。</p>\n<p>“那，看来你有机会改过自新了。” 奥伯对一名卫兵点了下头，他掏出一把钥匙，把赵信从柱子上解下来。</p>\n<p>赵信略一偏头，好奇地问：“此话怎讲？”</p>\n<p>奥伯微笑着说，“先把衣服穿好吧。”</p>\n<p>赵信穿着新发给他的束腰外衣，挺直身板端坐着。德玛西亚的布料感觉很软。他环顾帐篷，数着草垫和空碗的数量。他耳边充满感激的言语。他认得这些粗蛮的声音。说话的人在几个小时以前都和他一样是囚犯。</p>\n<p>他们一个接一个从草垫上起身，感谢为他们疗伤的医师。全副武装的德玛西亚士兵进入帐篷，将囚犯们押送出去。赵信与他们很熟，因为他们是一起行军到卡尔斯特德的。他们在路上滔滔不绝，想用各自的壮举比出高下。胜者趾高气扬，败者垂头丧气。那些特别能说会道的还会吹嘘自己打算杀掉多少德玛西亚士兵。那个时候的他们还从未面对过一支真正的军队。</p>\n<p>战斗几乎瞬间就结束了。或许人多势众、兵强马壮的诺克萨斯正规军能表现得更好。但他们不是正规军，而只是刚被征召的新兵，没有受到过正式的战斗训练，不知道如何面对一个统一的王国。几个小时不到，卡尔斯特德就开始为救星欢呼了。</p>\n<p>我们是被派来送死的，赵信提醒自己。然而，也许是命运的安排，他们都还活着。这并非诺克萨斯的意志，而是德玛西亚的意愿。</p>\n<p>命运如风，四象不定，他的长老曾经说过，风欲何往，唯有扬帆。</p>\n<p>一位年迈的医师走过来。她苍白色的长袍和帐篷里其他医师一样。“你感觉怎么样，孩子？” 她问。</p>\n<p>“我很好，” 赵信回答说，“谢谢您。”</p>\n<p>“不要谢我。感谢国王吧。是陛下降旨，要求所有囚犯受到周全的照顾。”</p>\n<p>“三世的嘉文？” 又是这个国王。怎么会有这么多人敬仰他？</p>\n<p>“是的，我们伟大的嘉文三世，” 她纠正道，“是他允许你有机会改过自新。寻得安宁的生活。”</p>\n<p>赵信双手对握，深深低下了头。维斯塞罗总是能在竞技场上找到自己的位置。换做别的地方，瓦洛兰的人们应该会因为他的力量而接纳他，这一点他是确信的。至于他的故乡 —— 大海彼岸的初生之土 —— 阔别数十年以后，那里对他来说已经和遥远的幻想一样陌生。</p>\n<p>他在哪里能找到安宁？他要的是安宁吗？</p>\n<p>不。他寻得安宁的机会早就破灭了，从他第一次夺人性命并换来自己的苟活作为奖赏开始，就已经破灭了。</p>\n<p>赵信抬头望着那位医师。“我能问个问题吗？”</p>\n<p>“什么问题，孩子？”</p>\n<p>“你们的国王，他是谁？”</p>\n<p>医师轻笑道。“你为什么不自己去见识一下呢？”</p>\n<p>赵信走在奥伯后面，四个卫兵把他夹在中间。在穿过营地的一路上，他偷瞥了几眼帐篷，看到德玛西亚士兵正在收拾行囊，军尉们正在计划着接下来的部署。有传闻称，就在一周路程以内的某地，另一场抵抗诺克萨斯的战斗即将打响。赵信在想这些人是不是就要赶往那里，跟随动乱的行踪，前往各地匡扶正义。他们似乎在响应更高远的召唤，某种比武力更强、可能也更珍贵的东西。</p>\n<p>他想象那会是怎样一种感觉，因自己笃定的信念而感到清湛无比，甚至愿意为之献出自己的生命。在竞技场的时候，他的生命毫无意义。现在，能够亲身面见国王，一切就已值得。</p>\n<p>“看来你是最后一个。” 奥伯说着停了下脚步，指向前方。</p>\n<p>赵信顺着军士指的方向看到一个最大的帐篷。同样明快的海蓝色旗帜飘在帐篷顶端。穿着闪亮盔甲的卫兵拍成两排，整齐地站在入口处。他看到一个人，脸上和脖子上都纹着诺克萨斯的纹身，急冲冲地带着一个小包裹走出来。那个人频繁地鞠躬，最后被一个卫兵带走，马上，另一个德玛西亚卫兵补上了空缺。</p>\n<p>“那是国王的帐篷，” 奥伯说，“我们就送到这。你自己进去，下跪，接受国王赐给你的物品，然后我们再把你领走。”</p>\n<p>军士微笑着说，“国王有令，只要你到了他面前，你就是个自由的人了…… 但你出来的时候依然还需要我们领着。冕卫军尉掌管这座营地，她不允许敌方战斗人员单独行动。直到他们永远离开卡尔斯特德。”</p>\n<p>赵信点了点头，然后向帐篷走去。</p>\n<p>“国王有请维斯塞罗！”</p>\n<p>宣告他姓名的声音低沉雄壮。赵信向前走。进入帐篷以后，他右膝跪地，卑躬俯首。地面上铺着布单，上面绣着展翅的骑士和戴头盔的战士。</p>\n<p>“抬头，” 另一个声音说。赵信抬起头寻向声音的来处。说话的是一个男人，年纪不比他大多少，正坐在橡木椅子上。他身穿金光闪闪的盔甲，上面装饰着乌黑的尖刺。他头戴王冠，顶端点缀着一颗颗珠宝。他右手边平放着一根巨大的长枪，枪尖的利刃如同某种巨兽的牙齿。</p>\n<p>这就是他们的国王，赵信意识到。他的双眼在那个人身上多停留了一秒钟，感受他伟大的气场，还有令他出乎意料的本尊。</p>\n<p>站在国王左手边的是冕卫剑尉长，不苟言笑的样子和赵信第一次见她时一样。</p>\n<p>在国王右手边的，是一个穿着皇室外衣的小男孩。他坐在自己的橡木椅上，穿着皮靴的小脚吊在椅子边缘晃荡。任何人都无法忽视他和国王之间的相似，两人有着同样倔强的鼻梁和棱角分明的下巴。这三人旁边还有两名卫兵，手中拄着长枪，枪尖刺向天空。</p>\n<p>“维斯塞罗是个不同寻常的名字，” 国王嘉文三世说，“有什么来历吗？”</p>\n<p>赵信放低了目光，他不太确定自己该如何回答。</p>\n<p>“国王问话时，你要大声回答。” 剑尉长用命令的口吻说。</p>\n<p>“不要紧，缇亚娜，” 国王挥一挥手说道，“他肯定是被过去几天发生的事吓到了。我们应当多给他一些时间，你说呢？”</p>\n<p>剑尉长张开嘴，但一言未发又闭上了，最后只是微微点了点头。</p>\n<p>“这个名字是对故乡的怀念。” 赵信说。</p>\n<p>“哦？是这样啊？” 国王饶有兴致地说，“我曾深入研究过诺克萨斯，但我从未听过一个叫做维斯塞罗的地方。”</p>\n<p>“它不是地方，而是一个回忆…… 只不过它在诺克萨斯改变了意义。”</p>\n<p>“啊，” 国王说着，目光掠过他的儿子，“一个人的童年记忆实在是 ——”</p>\n<p>“但那不是我的真名。”</p>\n<p>“你胆敢打断国王说话？” 剑尉长咆哮道。她的手已经握住了剑柄。</p>\n<p>赵信埋下了头。然后，他听到了一声开怀大笑。仍是嘉文三世的声音。</p>\n<p>“你是今天第一个让缇亚娜如此暴躁的人，” 国王说，“这是她带领无畏先锋的第一战，只不过并不能称得上是一场战斗，你肯定也这样想吧。”</p>\n<p>他拍了拍小皇子的肩膀，小皇子正在旁边安静地坐着，专心地看着父亲的言行举动。“不必拘束，” 国王说，“请讲出你的故事，维斯塞罗，一个我尚不知真名的人。”</p>\n<p>赵信继续目光低垂，深吸一口气说道，“我的真名是赵信，赐给我这个名字的是亲生父母，但在我还是孩子的时候就没见过他们了。他们可能还活着，也可能死了 —— 我不知道。”</p>\n<p>他艰难地吞了下口水，“我出生在海边的一个小村，莱肯，那里是初生之土，被这的人称为艾欧尼亚。我的童年是在一艘叫做维斯塞罗的渔船上度过的，我给长老们打下手。生活单纯宁静…… 直到掠夺者乘着黑红相间的船，打破了一切。”</p>\n<p>他闭上眼睛停了一会。德玛西亚人鸦雀无声。</p>\n<p>“我们毫无胜算。我被人带走了。在海上航行几个月后，我发现自己到了诺克萨斯。一切都那么…… 高耸、压抑、尖锐。在我故乡无处不在的自然之美，在那里完全找不到。”</p>\n<p>赵信好像听到了人们暗暗赞同的声音。是共鸣的呢喃，是不约而同的悄声低语。</p>\n<p>“和所有迷失方向的孩子一样，我为了活下去不得不做一些不光彩的事。我也因此被那些有权力的人注意到。他们看到了我的实力，把我变成了一名斗士。从那以后，维斯塞罗诞生了 —— 他是一个清算人。”</p>\n<p>他叹息一声，语调变得柔和。“我杀过许多许多敌人。有些人我甚至不知道真名。我杀的越多，人们的欢呼声就越高，‘维斯塞罗！维斯塞罗！’他们的金币落到主人们的兜里。我以为我的余生都将如此度过，在竞技场中为别人上演惊心动魄的搏杀。直到后来，诺克萨斯给了我的主人们一笔钱，是竞技场里赚不到的价钱。”</p>\n<p>赵信的肩膀瘫软下去。“于是我就来到了这里。后来的事您的士兵们就都知道了。”</p>\n<p>嘉文三世一言不发。所有人都在等他开口。</p>\n<p>“你这一生可真是颠沛流离，” 国王最后开口说道。他瞥了一眼自己的儿子，然后又看回赵信。“感谢你与我们分享你的旅程。让我，也让整个德玛西亚感到自豪的是，我们能够将你从诺克萨斯的束缚中解脱出来。”</p>\n<p>国王向一名卫兵点了点头，他拿出一个亚麻布袋，放在赵信面前。里面是钱币碰撞的声音。</p>\n<p>“这是嘉文三世的恩赐，” 冕卫军尉大声宣布，“这里面的金币足够你一周的旅行。要知道，你在入侵德玛西亚王国保护的土地的时候就已经犯下大错，但作为善意的表示，我们的国王赐给你第二次机会。好自为之。”</p>\n<p>赵信瞄了一眼钱袋。一动没动。就这么简单？拿着钱袋走人 —— 寻求安宁？就在刚才，他说出此生关于自己最真诚的话，而面对的却是一个随手就能取他性命的人。</p>\n<p>不知为何，那个陌生人愿意倾听。就凭这一点，他便已不再是陌生人。</p>\n<p>我早已和安宁无缘，但或许我可以找到一个战斗的理由？</p>\n<p>“请吧。” 冕卫剑尉长说着，对着出口的方向伸出两根手指。</p>\n<p>赵信低下了头。“恕我冒昧，但我有一事相求。”</p>\n<p>“讲。” 国王说。</p>\n<p>“我希望能加入您的卫队。”</p>\n<p>“荒唐！” 冕卫剑尉长大声喊。所有卫兵们整齐划一地将枪柄砸在地面上。</p>\n<p>国王轻轻笑了一声，然后面向他的剑尉长。“多么有趣的提议啊。”</p>\n<p>“陛下，你不会 ——” 冕卫军尉刚要开口，但又被国王的手势制止了。</p>\n<p>“让他说，” 嘉文三世笑着说，“我想听听他是怎么想的。”</p>\n<p>赵信抬起头。他与国王四目相对。“您向我展示了仁慈和荣誉，” 他说，“这两样东西我直到今天才真正见到。我在诺克萨斯这些年，一直都在为了别人打斗，在这期间我只明白了两个道理。胜利意味活命，失败就意味死亡。教会我的，是那些在竞技场上倒下的斗士和那些战败太多次以后永远失踪的战士。但您和您的人民是在为了别的什么东西而战。某种更了不起的东西。”</p>\n<p>一阵风吹动帐篷。一对小皮靴晃了一晃。赵信清了清嗓子。</p>\n<p>“所以我宁愿为了荣誉而战死，也不愿在懊悔中荒度余生。”</p>\n<p>嘉文三世上身前倾。在场所有人都恭敬地缄默着。</p>\n<p>“说得好，” 国王回应道，“老实讲，甚至比我的一些参谋说的还好。但毕竟，我的侍从要经过数年甚至数十年的训练。我如何相信你有这个能力呢？”</p>\n<p>赵信望着国王，望着皇子，望着冕卫军尉。一半的他知道自己可以说些什么；另一半的他知道自己可以做什么。这是属于他的选择吗？</p>\n<p>不。</p>\n<p>命运早已做出选择。</p>\n<p>他抓起钱袋扔向剑尉长，正中她的面门。就在她调整姿态的同时，他一记扫堂腿把左边的卫兵踢倒在地。赵信抓起那个德玛西亚卫兵的长枪，横扫一圈绊倒了右边的卫兵。他的身体凭直觉行动，脑海中回忆他在竞技场里的情形，行云流水。长枪在他手中旋转最后一圈，然后刺向嘉文三世，枪柄的钝头最后停在国王喉咙前几寸远的地方。</p>\n<p>小皇子抽了一口凉气。国王的卫队回过神来。士兵们冲进帐篷，剑尉长也抽出了剑。</p>\n<p>赵信双膝跪地。他放下长枪，伸出脖子，没有发出任何声音。许多把精钢锻造的武器都抵在他的颈上。</p>\n<p>屋子里气氛紧张。所有人都死死盯着赵信，而赵信则闭上双眼，宁静平和，无论接下来发生什么，他都将坦然接受。</p>\n<p>国王抖了下披风。“退下，” 他命令道，“我的父王曾说过，诺克萨斯的能人都被浪费在了竞技场里。我现在明白，他所言不虚。”</p>\n<p>“陛下，” 剑尉长请求道，“他刚才想要杀您！”</p>\n<p>“不，缇亚娜，” 国王回应道，“他刚才是在向我展示，在我信任的卫队的保护下，我仍有可能会死。”</p>\n<p>“非常抱歉，” 赵信说。他的声音平静，分寸得当，如同还没冲上岸的波浪一样安静。“我只能想到这个办法展示自己。”</p>\n<p>“你做得很好，” 国王说，“我看到了，这些德玛西亚的战士们也看到了。看起来他们能从你这学到几手。”</p>\n<p>“我不允许国王的卫队里混进一个囚犯！” 冕卫剑尉长高呼。</p>\n<p>“就在此人进入我的视线之时，他就已不再是囚犯了。” 国王从椅子上站了起来。“德玛西亚渊远流长，是善良的人们为了躲避世上的奸邪而创立。这个人的故事让我想起了那些古老的传说，让我想起伟大的奥伦和他的追随者们，也让我想起我的父亲亲口向我讲述的故事。”</p>\n<p>他的目光落到皇子身上，小皇子用惊奇的眼神看着父亲。“我的儿子，我此生的快乐，” 国王说，“你能在此目睹这一刻，令我喜不自胜。因为你亲眼看到了我们为何要坚守我们的美德，只有这样才能激励他人与我们志同道合。你明白了吗？”</p>\n<p>“明白了，父亲。” 皇子说，他的声音很小但语气很坚定。</p>\n<p>国王向前迈出一步。“赵信，你用生命和勇气打动了我，这种事已经很久没发生了。” 他弯下腰扶起赵信。“或许你没有在德玛西亚出生，但我要特赦你和我们一起回去，回到我的王国，在那里你将作为我的御前侍卫，证明你和你的忠心。”</p>\n<p>赵信感到国王壮实的双手紧紧握住他的双肩。</p>\n<p>“不要辜负这个机会。”</p>\n<p>赵信看着嘉文三世的双眼。这么久以来，他第一次感到快乐，如潮水般冲刷他的全身，就像曾经在波涛中乘风破浪的维斯塞罗。</p>\n<p>在卡尔斯特德北边这么远的地方，黑夜的空气十分凉爽。还要再过一周左右他才能看到德玛西亚雄都，赵信一边想着，一边走出他的帐篷。一个熟悉的面孔站在门口。</p>\n<p>“还没睡？” 奥伯说。</p>\n<p>“我转一圈。很快回来。”</p>\n<p>赵信独自在营地中穿行，他感受着新战友们的精神。他们秩序井然，互相之间有求必应，确保军队的安全。看到他们高度自律的行为，赵信露出微笑。他绕过一个拐角，抬头望向一弯新月，突然，他被一股蛮力拖住了。</p>\n<p>他的身体重重摔在地上。</p>\n<p>他眨了几次眼后，逐渐恢复感知，发现自己正被拖进一个灯光昏暗的帐篷。那位剑尉长正在俯视他。她身边站着几名凶狠的士兵，全都穿着重板甲。</p>\n<p>“或许你赢得了国王的信赖，但在我眼里，你并不是德玛西亚人。” 她冷冷地说。</p>\n<p>赵信站起来，她抽出了剑。如同狮群追随雌狮一般，她身边的士兵也都抽出了剑。</p>\n<p>“我会一直盯着你的，” 她警告说，“如果在你任职期间，国王有任何闪失 ——”</p>\n<p>赵信两手死死夹住她的刀刃。“就当这是我对你发的誓。”</p>\n<p>缇亚娜・冕卫目瞪口呆，看着他把刀剑对准自己的喉咙拉过去。</p>\n<p>“如果国王出了任何闪失，” 赵信说，“你拿我是问。”</p>\n<h2 id=\"皮肤展示\"><a class=\"anchor\" href=\"#皮肤展示\">#</a> 皮肤展示</h2>\n<p class=\"gallery\"><img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big5000.jpg\" alt=\"\" title=\"德邦总管\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big5001.jpg\" alt=\"\" title=\" 特战先锋 赵信\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big5002.jpg\" alt=\"\" title=\"皇家守卫 赵信\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big5003.jpg\" alt=\"\" title=\"绞肉机角斗士 赵信\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big5004.jpg\" alt=\"\" title=\"翼骑统领 赵信\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big5005.jpg\" alt=\"\" title=\"赵云 子龙\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big5006.jpg\" alt=\"\" title=\"秘密特工 赵信\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big5013.jpg\" alt=\"\" title=\"屠龙勇士 赵信\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big5020.jpg\" alt=\"\" title=\"穿星魔锋 赵信\" /><br />\n<img data-src=\"https://game.gtimg.cn/images/lol/act/img/skin/big5027.jpg\" alt=\"\" title=\"黑暗骑士 赵信\" /></p>\n",
            "tags": [
                "We-Games",
                "英雄联盟",
                "战士",
                "游戏",
                "英雄联盟",
                "刺客",
                "战士"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/WX-APP/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AF%87%20-%20%E4%B8%AD%E7%BA%A7/",
            "url": "https://lklyx.github.io/Growth-Diary/WX-APP/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AF%87%20-%20%E4%B8%AD%E7%BA%A7/",
            "title": "微信小程序知识。",
            "date_published": "2020-12-13T16:00:00.000Z",
            "content_html": "<h1 id=\"使用三元表达式给data赋值\"><a class=\"anchor\" href=\"#使用三元表达式给data赋值\">#</a> 使用三元表达式给 data 赋值</h1>\n<blockquote>\n<p>效果要求：</p>\n<ol>\n<li>\n<p>点击切换不同的图片。图片是数据里面渲染出来的。效果如图：</p>\n<p><img data-src=\"../../../images/wx-app/image-20201214180114230.png\" alt=\"image-20201214180114230\" /></p>\n</li>\n<li>\n<p>view 代码</p>\n<pre><code>  &lt;view class=&quot;model&quot;&gt;\n    &lt;view class=&quot;item&quot; wx:for=&quot;&#123;&#123;model&#125;&#125;&quot; wx:key=&quot;id&quot; bind:tap=&quot;model&quot; data-list=&quot;&#123;&#123;index&#125;&#125;&quot;&gt;\n    &lt;image class=&quot;model_img&quot; src=&quot;&#123;&#123;item.active ? item.src : item.url&#125;&#125;&quot;/&gt;\n      &lt;text class=&quot;model_title&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt;\n    &lt;/view&gt;\n  &lt;/view&gt;\n</code></pre>\n</li>\n<li>\n<p>js 代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    value<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    select<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    selects<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    gradientColor<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token string\">'0%'</span><span class=\"token operator\">:</span> <span class=\"token string\">'#ffd01e'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string\">'100%'</span><span class=\"token operator\">:</span> <span class=\"token string\">'#ee0a24'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    active<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    steps<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>desc<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>desc<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>desc<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>desc<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用 vant 框架里面的插件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    model<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      title<span class=\"token operator\">:</span><span class=\"token string\">\"制冷\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      active<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img10.360buyimg.com/ddimg/jfs/t1/134516/26/19333/3270/5fd33f78E9c136a59/0b19ff0493f32e4c.png\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img12.360buyimg.com/ddimg/jfs/t1/150035/29/17912/3382/5fd32c66Ee98ecb19/46608164068c29f3.png\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      title<span class=\"token operator\">:</span><span class=\"token string\">\"制热\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      active<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img13.360buyimg.com/ddimg/jfs/t1/145313/32/18095/3151/5fd33f78E3f2d49c0/1b86c110299cbdc1.png\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img14.360buyimg.com/ddimg/jfs/t1/134767/24/19690/3071/5fd32c66Ea9940e9b/b89e37d1c4db6830.png\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      title<span class=\"token operator\">:</span><span class=\"token string\">\"除湿\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      active<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img12.360buyimg.com/ddimg/jfs/t1/133916/15/19322/3365/5fd33f78E5fb0d7b5/6ad3f85545bfbe39.png\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img13.360buyimg.com/ddimg/jfs/t1/147302/27/17867/3015/5fd32c66E5176019b/30cad177a93d549d.png\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      title<span class=\"token operator\">:</span><span class=\"token string\">\"通风\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      active<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img13.360buyimg.com/ddimg/jfs/t1/153818/16/9478/3087/5fd33f78Ecc084dde/ecf2935da0de6e31.png\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img11.360buyimg.com/ddimg/jfs/t1/146277/39/17976/2868/5fd32c66Ebd73527e/d946e66f1984ccd9.png\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      title<span class=\"token operator\">:</span><span class=\"token string\">\"向上扫风\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      active<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img10.360buyimg.com/ddimg/jfs/t1/145786/17/17977/3971/5fd33f78E59684630/cf26aa59b216555b.png\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img10.360buyimg.com/ddimg/jfs/t1/132750/9/19225/3036/5fd32c66Ec7df8a55/0b6dd2dcdfa57cdd.png\"</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      title<span class=\"token operator\">:</span><span class=\"token string\">\"向下扫风\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      active<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img13.360buyimg.com/ddimg/jfs/t1/133678/20/19346/3961/5fd33f78Edf3cb491/d6f2c03e310629be.png\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://img11.360buyimg.com/ddimg/jfs/t1/137747/37/18156/3152/5fd32c66E5213f371/04484666357f9863.png\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token function-variable function\">level</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>list</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      active<span class=\"token operator\">:</span> index</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token function-variable function\">jia</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      value<span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token function-variable function\">jian</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      value<span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token function-variable function\">model</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>list</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token string\">'model['</span><span class=\"token operator\">+</span>index<span class=\"token operator\">+</span><span class=\"token string\">'].active'</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>          <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>实现原理：</p>\n<ul>\n<li>\n<p>在需要渲染的 view 里面先 <code>wx:for</code>  循环，给每一个 view 绑定一个点击事件。在自定义一个属性 <code>data-list=&quot;&#123;&#123;index&#125;&#125;&quot;</code>  这个自定义值不是数组的下标。在数组中添加一个属性名为 active 的属性。值为布尔类型。true 和 false 都可以。看自己的选择，在图片的 src 属性上使用三元表达式： <code>src=&quot;&#123;&#123;item.active?item****.****src** **:** **item****.****url**&#125;&#125;&quot;</code>  这里不要漏掉 <code>=</code>  和 <code>&quot;&quot;</code>  双引号。判断数组里面的 active 的值，如果为 true，则图片路径为第一个，反之则为第二个。数组里面保存的是两个图片的路径，页面只保留一个图片的路径用做计算三元表达式的值即可。</p>\n</li>\n<li>\n<p>在 js 中，声明一个变量来接受刚才在 view 里面自定义的属性。 <code>const list = e.currentTarget.dataset.list</code> ，使用 forEach 循环数组。用循环出来的 index 和自己定义属性值对比，如果相等，证明点击的就是当前数组中的 <code>[index]</code>  某一项。这时候在声明一个变量 <code>i</code>  来接受当前数组中每一项的（这里用 index 代表每一项）active 属性值。这时候。i 取反，再赋值给数组里面的 active（就是刚才声明的 i）。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"小程序中的父传子\"><a class=\"anchor\" href=\"#小程序中的父传子\">#</a> 小程序中的父传子</h1>\n<blockquote>\n<p>父组件（页面）向子组件传递数据，是通过标签属性的方式来传递的。</p>\n<p>以下代码表示，向子组件 <code>iuiu</code>  中传递数据，在父组件的 WXML 中，list 是标签名，传递当前 wxml 的 js 文件中的 <code>list</code>  数组，</p>\n<pre><code class=\"language-wxjs\">&lt;iuiu list=&quot;&#123;&#123;list&#125;&#125;&quot;&gt;&lt;/iuiu&gt;\n</code></pre>\n<p>在子组件的 js 文件中，在 <code>properties</code>  中接收父组件传递过来的数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>properties<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    list<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      type<span class=\"token operator\">:</span>Array<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      value<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p><code>list</code>  是父组件中传递过来的标签名。type，类型：Arrye、String、Number、Boolean、Object、null（表示任意类型）</p>\n<p><code>value</code>  可以给定初始值，可以默认为空。</p>\n</blockquote>\n<h1 id=\"小程序中的子传父\"><a class=\"anchor\" href=\"#小程序中的子传父\">#</a> 小程序中的子传父</h1>\n<blockquote>\n<p>子组件向父组件传递数据，是通过事件的方式传递的。在子组件中绑定的方法中声明一个变量，把需要传递的值赋值给这个变量，在通过 <code>this.triggerEvent</code>  这个事件传递给父组件.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">hangent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>index</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">triggerEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itemChange\"</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>触发父组件中的自定义事件，同时传递数据给父组件。</p>\n<p><code>this.triggerEvent(&quot;父组件自定义的名称&quot;,&quot;要传递的参数&quot;)</code></p>\n<p>例如：上面的子组件传递的方法名为 <code>itemChange</code> ，那么父组件中因该这么写:</p>\n<pre><code class=\"language-wxjs\">&lt;iuiu list=&quot;&#123;&#123;list&#125;&#125;&quot; binditemChange=&quot;dianji&quot;&gt;&lt;/iuiu&gt;\n</code></pre>\n<p><code>bind+方法名=父组件中需要定义的函数名称。</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">dianji</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>detail</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span>i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index<span class=\"token operator\">===</span>i<span class=\"token operator\">?</span>item<span class=\"token punctuation\">.</span>active<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token operator\">:</span>item<span class=\"token punctuation\">.</span>active<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     list</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里需要<strong>注意</strong>的是，传过来的值<strong>不是在</strong> <code>e.currentTarget.dataset</code>  之中，<strong>而是在</strong> <code>e.detail</code>  中。</p>\n</blockquote>\n<h1 id=\"组件中的插槽使用\"><a class=\"anchor\" href=\"#组件中的插槽使用\">#</a> 组件中的插槽使用</h1>\n<blockquote>\n<p><code>slot</code></p>\n<p>slot 标签，其实就是一个占位符，插槽。等到父组件调用子组件的时候，再传递标签过来，最终，这些被传递过来的标签就会替换 slot 插槽的位置。</p>\n<p>效果图如下：</p>\n<p><img data-src=\"../../../images/wx-app/image-20201218143731455.png\" alt=\"image-20201218143731455\" /></p>\n<p>点击不同的导航，切换到不同的插槽。</p>\n<p><code>子组件wxml代码：</code></p>\n<pre><code>&lt;view class=&quot;content&quot;&gt;\n&lt;slot&gt;&lt;/slot&gt;\n&lt;/view&gt;\n\n&lt;view class=&quot;box&quot;&gt;\n&lt;block wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:key=&quot;id&quot;&gt;\n&lt;view bindtap=&quot;hangent&quot; data-index=&quot;&#123;&#123;index&#125;&#125;&quot; class=&quot;item &#123;&#123;item.active?'isactive':''&#125;&#125;&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/view&gt;\n&lt;/block&gt;\n&lt;/view&gt;\n</code></pre>\n<p><code>子组件js代码</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>properties<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>type<span class=\"token operator\">:</span>Array<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>value<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">hangent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>index</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">triggerEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itemChange\"</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>父组件中wxml代码</code></p>\n<pre><code>&lt;iuiu class=&quot;ii&quot; list=&quot;&#123;&#123;list&#125;&#125;&quot; binditemChange=&quot;dianji&quot;&gt;\n&lt;block wx:if=&quot;&#123;&#123;list[0].active&#125;&#125;&quot;&gt;123&lt;/block&gt;\n&lt;block wx:elif=&quot;&#123;&#123;list[1].active&#125;&#125;&quot;&gt;456&lt;/block&gt;\n&lt;block wx:elif=&quot;&#123;&#123;list[2].active&#125;&#125;&quot;&gt;789&lt;/block&gt;\n&lt;block wx:else&gt;否则显示&lt;/block&gt;\n&lt;/iuiu&gt;\n</code></pre>\n<p><code>父组件中js代码</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"离家模式\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"active\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"回家模式\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"active\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"聚餐模式\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"active\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"夜间模式\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"active\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">dianji</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>detail</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span>i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index<span class=\"token operator\">===</span>i<span class=\"token operator\">?</span>item<span class=\"token punctuation\">.</span>active<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token operator\">:</span>item<span class=\"token punctuation\">.</span>active<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>list</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>以上的插槽是配合组件间的传值使用的。</strong></p>\n</blockquote>\n<h1 id=\"在小程序中截取字符串\"><a class=\"anchor\" href=\"#在小程序中截取字符串\">#</a> 在小程序中截取字符串</h1>\n<blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>App<span class=\"token punctuation\">.</span><span class=\"token function\">$get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/warn/page'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      res<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        item<span class=\"token punctuation\">.</span>ctime <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>ctime<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 截取时间格式为 xxxx-xx-xx</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        AlarmType<span class=\"token operator\">:</span>res<span class=\"token punctuation\">.</span>rows</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>AlarmType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>直接在需要截取的变量后面点 <code>substring（）</code> 小括号里面放需要截取的开始位置和结束位置下标从 0 开始。。</p>\n</blockquote>\n",
            "tags": [
                "历练ing",
                "WX-小程序",
                "小程序"
            ]
        }
    ]
}