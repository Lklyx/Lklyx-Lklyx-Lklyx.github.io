{
    "version": "https://jsonfeed.org/version/1",
    "title": "沿岸踱步",
    "subtitle": "成长日记",
    "icon": "https://lklyx.github.io/images/favicon.ico",
    "description": "沿岸踱步 & 成长记录",
    "home_page_url": "https://Lklyx.github.io",
    "items": [
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E5%85%AD%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E5%85%AD%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "title": "六月的雨-滴答。",
            "date_published": "2021-06-21T09:12:50.292Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试。\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"a04ae6223cec52a01a0ec5df3d5f3589ce3b7421c1c785e143e93e1a8be112f9\">6d2697f82afba54f38f99fe41bef9541180bb59eb0c3009dcb042b44a0761a166d41ac665732856997aef18363c34c2361da1725669a370ae41e19f4d717aeb7a20f55b1f056daad7f0df74946be70346736953aa082fc807469a8b64675c060ac4cb979b20fbf50b52e44d825becd3e5335d4e68e3da44f7d4f6b52b54f82a6f6e0bdfcb7f511bc2751c4ff51c01371</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">请输入密码查看，密码为6位数哦~。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Nginx/Nginx%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Nginx/Nginx%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/",
            "title": "Nginx踩坑篇",
            "date_published": "2021-05-30T16:00:00.000Z",
            "content_html": "<h1 id=\"xshell\"><a class=\"anchor\" href=\"#xshell\">#</a> Xshell</h1>\n<p>学习 Nginx 需要装 <code>Xshell</code>  这个工具。装这个连接远程，方便操作。</p>\n<p>安装地址为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU5HVEQ0Vk5TYmwwYldDVDd6SjBrbEE=\">https://pan.baidu.com/s/1NGTD4VNSbl0bWCT7zJ0klA</span></p>\n<p>提取码：7b8j</p>\n<p>下载这个软件压缩包，里面有文档指导安装破解版的。</p>\n<h1 id=\"实现拖拽上传下载文件的解决方法\"><a class=\"anchor\" href=\"#实现拖拽上传下载文件的解决方法\">#</a> 实现拖拽上传下载文件的解决方法</h1>\n<p>安装<strong> lrzsz</strong>，</p>\n<pre><code class=\"language-cmd\">yum -y install lrzsz\n</code></pre>\n<p>使用方法：这时候可以直接敲命令 rz、sz、下载和上传数据了。</p>\n<p>上传文件：rz + 文件名</p>\n<p>下载文件：sz + 文件名</p>\n<p>如果报错，显示传输失败，有可能是名字相同了。或者改文件夹下这个名字已经存在该文件了。这时，我们只需要修改一下文件的名字即可。</p>\n<h1 id=\"配置好防火墙了端口也设置了80就是进不去nginx\"><a class=\"anchor\" href=\"#配置好防火墙了端口也设置了80就是进不去nginx\">#</a> 配置好防火墙了，端口也设置了 80. 就是进不去 nginx。</h1>\n<p>我靠。这个问题我搞了一天。原来是因为服务器没有配置安全组。我的是阿里云服务器，需要配置安全组。<img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5Cimage-20210603154118108.png\" alt=\"image-20210603154118108\"></p>\n<p>感觉这个巨坑了。有的服务器不需要手动配置安全组。</p>\n<h1 id=\"阿里服务器需要配置安全组\"><a class=\"anchor\" href=\"#阿里服务器需要配置安全组\">#</a> 阿里服务器需要配置安全组</h1>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5Cimage-20210607115621226.png\" alt=\"image-20210607115621226\"></p>\n<h1 id=\"make-no-targets-specified-and-no-makefile-found-stop\"><a class=\"anchor\" href=\"#make-no-targets-specified-and-no-makefile-found-stop\">#</a> make: *** No targets specified and no makefile found. Stop.</h1>\n<p>第一种：</p>\n<p>第一、update 最新版本系统软件</p>\n<p>yum update</p>\n<p>这个必须要执行后才可以安装我们的系统软件或者一键包。</p>\n<p>第二、编译缺失关联软件</p>\n<p>yum install gcc build-essential</p>\n<p>编译执行完毕之后，我们在执行./configure &amp;&amp; make 这类的执行命令就可以解决问题。</p>\n<p>第二种：</p>\n<p>一、Linux 下各种依赖都已经安装，是因为没有找到 makefile。</p>\n<p>如果是自己写的，确定在当前目录下；如果是源码安装，先运行./configure，生成 makefile，再执行 make，即可正常运行。</p>\n<p>二、如果没有安装其他依赖先安装依赖</p>\n<p>yum install gcc gcc-c++ autoconf automake</p>\n<p>yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel （安装依赖 zlib、openssl 和 pcre</p>\n<h1 id=\"在centos虚拟机中无法使用yum命令\"><a class=\"anchor\" href=\"#在centos虚拟机中无法使用yum命令\">#</a> 在 centOs 虚拟机中无法使用 yum 命令</h1>\n<p>敲 yum 命令时，出现以下错误：</p>\n<pre><code class=\"language-cmd\">[root@Linux1 home]# yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel\nLoaded plugins: fastestmirror, refresh-packagekit, security\nLoading mirror speeds from cached hostfile\nYumRepo Error: All mirror URLs are not using ftp, http[s] or file.\n Eg. Invalid release/repo/arch combination/\nremoving mirrorlist with no valid mirrors: /var/cache/yum/x86_64/6/base/mirrorlist.txt\nError: Cannot find a valid baseurl for repo: base\n</code></pre>\n<p>首先，这里说一下具体的原因：</p>\n<blockquote>\n<ol>\n<li>CentOS 6 已经随着 2020 年 11 月的结束进入了 EOL（Reaches End of Life），不过有一些老设备依然需要支持，CentOS 官方也给这些还不想把 CentOS6 扔进垃圾堆的用户保留了最后一个版本的镜像，只是这个镜像不会再有更新了</li>\n<li>官方便在 12 月 2 日正式将 CentOS 6 相关的软件源移出了官方源，随之而来逐级镜像也会陆续将其删除。</li>\n<li>不过有一些老设备依然需要维持在当前系统，CentOS 官方也给这些还不想把 CentOS6 扔进垃圾堆的用户保留了各个版本软件源的镜像，只是这个软件源不会再有更新了。</li>\n</ol>\n</blockquote>\n<p><code>简单的说就是</code> ：Centos 6 已经不被官方支持，所以想要使用就要用其他代理比如阿里云 Vault 镜像。我下面使用的是阿里云的镜像。第三条命令可以看出来。</p>\n<p>解决方案：</p>\n<blockquote>\n<pre><code class=\"language-cmd\">sed -i &quot;s|enabled=1|enabled=0|g&quot; /etc/yum/pluginconf.d/fastestmirror.conf\n</code></pre>\n<pre><code class=\"language-cmd\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n</code></pre>\n<pre><code class=\"language-cmd\">curl -o /etc/yum.repos.d/CentOS-Base.repo https://www.xmpan.com/Centos-6-Vault-Aliyun.repo\n</code></pre>\n<pre><code class=\"language-cmd\">yum clean all\n</code></pre>\n<pre><code class=\"language-cmd\">yum makecache\n</code></pre>\n<p>以上五条命令，按照顺序依次敲进去就可以了 。</p>\n</blockquote>\n<h1 id=\"another-app-is-currently-holding-the-yum-lock-waiting-for-it-to-exit\"><a class=\"anchor\" href=\"#another-app-is-currently-holding-the-yum-lock-waiting-for-it-to-exit\">#</a> Another app is currently holding the yum lock; waiting for it to exit...</h1>\n<p>使用 yum 时出现这样的错误、且一直循环报错。</p>\n<pre><code class=\"language-cmd\">vim /etc/yum.repos.d/CentOS-Base.repo # 进去修改enabled = 1\n</code></pre>\n<pre><code class=\"language-cmd\">rm -f /var/run/yum.pid #永久禁止该错误\n</code></pre>\n<p>然后就可以重新执行 yum 了。</p>\n<h1 id=\"-bash-systemctl-command-not-found\"><a class=\"anchor\" href=\"#-bash-systemctl-command-not-found\">#</a> -bash: systemctl: command not found</h1>\n<p>开启防火墙，关闭防火墙。在虚拟机中打开防火墙。如果是服务器，记得在安全组中配置需要访问的端口。</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Nginx",
                "Nginx"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Nginx/Nginx/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Nginx/Nginx/",
            "title": "Nginx学习",
            "date_published": "2021-05-30T16:00:00.000Z",
            "content_html": "<h1 id=\"学习地址\"><a class=\"anchor\" href=\"#学习地址\">#</a> 学习地址</h1>\n<p>学习视屏地址<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXpKNDExdzdTVj9wPTImYW1wO3NwbV9pZF9mcm9tPXBhZ2VEcml2ZXI=\"> Nginx</span></p>\n<p>学习视屏地址<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo0NDExSzdnMj9mcm9tPXNlYXJjaCZhbXA7c2VpZD0xMTI0MjUzOTM5MDQzMjczMzYxMg==\"> Nginx</span></p>\n<p>虚拟机安装视频<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTV6NHkxOTdzaz90PTExOTE=\"> centOs</span></p>\n<h1 id=\"nginx概述\"><a class=\"anchor\" href=\"#nginx概述\">#</a> Nginx 概述</h1>\n<p>Nginx（engine x）是一个高性能的 HTTP 和反向代理服务器，特点是占用内存少，并发能力强，事实上，Nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 nginx 的网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<blockquote>\n<ol>\n<li>\n<p>安装依赖项，使用以下命令安装 Nginx 需要的依赖项。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token operator\">-</span>y install gcc zlib zlib<span class=\"token operator\">-</span>devel pcre<span class=\"token operator\">-</span>devel openssl openssl<span class=\"token operator\">-</span>devel</pre></td></tr></table></figure><p>安装好依赖项以后，使用以下命令查看版本号：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pcre<span class=\"token operator\">-</span>config <span class=\"token operator\">--</span>version</pre></td></tr></table></figure></li>\n<li>\n<p>开启防火墙</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start firewalld</pre></td></tr></table></figure></li>\n<li>\n<p>关闭防火墙</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl stop firewalld</pre></td></tr></table></figure></li>\n<li>\n<p>查看防火墙中开放的端口</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>list<span class=\"token operator\">-</span>all</pre></td></tr></table></figure><p>后期需要在防火墙中添加端口号，使用以下命令：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>add<span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">81</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">--</span>permanent  <span class=\"token comment\">// 添加一个 81 端口</span></pre></td></tr></table></figure><p>添加成功以后，需要重启以下防火墙：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>reload <span class=\"token comment\">// 重启防火墙</span></pre></td></tr></table></figure><p>这时候再去 2、查看防火墙的端口，就会多了一个 81 端口。</p>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"实现上传压缩包rz\"><a class=\"anchor\" href=\"#实现上传压缩包rz\">#</a> 实现上传压缩包 rz</h1>\n<p>安装<strong> lrzsz</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token operator\">-</span>y install lrzsz</pre></td></tr></table></figure><h1 id=\"解压压缩包命令\"><a class=\"anchor\" href=\"#解压压缩包命令\">#</a> 解压压缩包命令</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tar <span class=\"token operator\">-</span>xvf <span class=\"token operator\">+</span> apache<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">-</span><span class=\"token number\">9.0</span><span class=\"token number\">.46</span><span class=\"token operator\">-</span>fulldocs<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz <span class=\"token comment\">// + 后面这个是安装包名字。</span></pre></td></tr></table></figure><h1 id=\"linux中配置安装jdk及环境配置\"><a class=\"anchor\" href=\"#linux中配置安装jdk及环境配置\">#</a> Linux 中配置安装 jdk 及环境配置。</h1>\n<h2 id=\"我们直接可以使用yum一键安装\"><a class=\"anchor\" href=\"#我们直接可以使用yum一键安装\">#</a> 我们直接可以使用 yum 一键安装</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum install <span class=\"token operator\">-</span>y java<span class=\"token operator\">-</span><span class=\"token number\">1.8</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span>openjdk<span class=\"token operator\">-</span>devel <span class=\"token comment\">// 这里装完以后记得去配置 jdk 环境变量</span></pre></td></tr></table></figure><p>查看 java 版本，</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java <span class=\"token operator\">-</span>version</pre></td></tr></table></figure><h2 id=\"配置环境变量\"><a class=\"anchor\" href=\"#配置环境变量\">#</a> 配置环境变量</h2>\n<ol>\n<li>\n<p>找到 java 安装的路径</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>whereis java <span class=\"token comment\">// 查看路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// /usr/bin/java /usr/lib/java /etc/java /usr/share/java /usr/share/man/man1/java.1.gz</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> ls <span class=\"token operator\">-</span>lrt <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>java <span class=\"token comment\">// 查看 java 的 bin 之下路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// /usr/bin/java -> /etc/alternatives/java</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ls <span class=\"token operator\">-</span>lrt <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>alternatives<span class=\"token operator\">/</span>java <span class=\"token comment\">// 查看需要配置环境的路径</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.212.b04-0.el7_6.x86_64/jre/bin/java</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>jvm<span class=\"token operator\">/</span>jre<span class=\"token operator\">-</span><span class=\"token number\">1.7</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span>openjdk<span class=\"token punctuation\">.</span>x86_64<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>java</pre></td></tr></table></figure></li>\n<li>\n<p>进入文件夹配置环境变量</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vim <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>profile <span class=\"token comment\">// 进入 java 环境变量配置单的文件</span></pre></td></tr></table></figure><p>在文件的末尾处添加以下代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>export JAVA_HOME<span class=\"token operator\">=</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>jvm<span class=\"token operator\">/</span>java<span class=\"token operator\">-</span><span class=\"token number\">1.8</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span>openjdk<span class=\"token operator\">-</span><span class=\"token number\">1.8</span><span class=\"token number\">.0</span><span class=\"token number\">.292</span><span class=\"token punctuation\">.</span>b10<span class=\"token operator\">-</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">.</span>al7<span class=\"token punctuation\">.</span>x86_64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>export PATH<span class=\"token operator\">=</span>$JAVA_HOME<span class=\"token operator\">/</span>jre<span class=\"token operator\">/</span>bin<span class=\"token operator\">:</span>$PATH</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>export CLASSPATH<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span>$JAVA_HOME<span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>dt<span class=\"token punctuation\">.</span>jar<span class=\"token operator\">:</span>$JAVA_HOME<span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>tools<span class=\"token punctuation\">.</span>jar</pre></td></tr></table></figure><p><code>注意：</code> 上面代码的第一行，**export JAVA_HOME=** 之后，改为你自己的路径，切注意，路径不包含版本号、系统号之后的 <code>/jre/bin/java</code>  这个路径。</p>\n</li>\n<li>\n<p>使配置生效</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>source <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>profile</pre></td></tr></table></figure></li>\n<li>\n<p>查看 JAVA_HOME 环境变量</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>echo $JAVA_HOME</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.212.b04-0.el7_6.x86_64</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"nginx常用命令\"><a class=\"anchor\" href=\"#nginx常用命令\">#</a> Nginx 常用命令</h1>\n<p><code>使用Nginx操作命令前提条件：</code> 必须进入 nginx 目录中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>sbin</pre></td></tr></table></figure><ol>\n<li>\n<p><strong>nginx 的版本号</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>nginx <span class=\"token operator\">-</span>v</pre></td></tr></table></figure></li>\n<li>\n<p><strong>启动 nginx</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>nginx</pre></td></tr></table></figure></li>\n<li>\n<p><strong>关闭 nginx</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>nginx <span class=\"token operator\">-</span>s stop</pre></td></tr></table></figure></li>\n<li>\n<p><strong>重新加载 nginx</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>nginx <span class=\"token operator\">-</span>s reload</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"nginx配置文件\"><a class=\"anchor\" href=\"#nginx配置文件\">#</a> nginx 配置文件</h1>\n<ol>\n<li>\n<p>配置文件的位置：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>conf<span class=\"token operator\">/</span>nginx<span class=\"token punctuation\">.</span>conf</pre></td></tr></table></figure><p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5Cimage-20210602171842698.png\" alt=\"配置文件的位置\"></p>\n</li>\n<li>\n<p>nginx 配置文件的组成</p>\n<ul>\n<li>\n<p>nginx 配置文件有三部分组成</p>\n<p><strong>第一部分</strong> 全局块</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210602173316902.png\" alt=\"image-20210602173316902\"></p>\n<p>从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令。</p>\n<p>比如：worker_processes ,worker_processes 值越大，可以支持的并发处理量也越多。</p>\n<p><strong>第二部分</strong> events 块</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5Cimage-20210602173637443.png\" alt=\"image-20210602173637443\"></p>\n<p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接。</p>\n<p>比如：worker_connections 1024;</p>\n<p><strong>第三部分</strong> http 块</p>\n<p>Nginx 服务器中，配置最频繁的部分，http 块也可以包括 http 全局块、server 块</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"nginx配置实例反向代理\"><a class=\"anchor\" href=\"#nginx配置实例反向代理\">#</a> Nginx 配置实例 —— 反向代理</h1>\n<ol>\n<li>\n<p>在 dindows 系统的 host 文件中进行域名和 ip 对应关系的配置</p>\n<p>一般的目录地址是：<strong>c:Windows/System32/drivers/etc</strong>，在里面加上一段 ip。比如：106.15.176.231 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4xMjMuY29t\">www.123.com</span>。前面是 ip 地址，后面是你的域名。</p>\n</li>\n<li>\n<p>在 nginx 进行请求转发的配置（反向代理配置）</p>\n<p>找到 nginx 的配置文件。一般在：<strong>/usr/local/nginx/conf</strong> 这个路径之下。打开配置以下项；</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C8.png\" alt=\"image-20210607134411528\"></p>\n<p>将 server 中的<strong> server_name localhost</strong> 改为 server_name + 自己的 ip。</p>\n<p>在 location 中添加一个转发路径：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>proxy_pass http<span class=\"token operator\">:</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">8080</span></pre></td></tr></table></figure><p>这样做，如果我们访问的是自己的 ip：<strong>106.15.176.231</strong>，如果他是 80 端口，他就会给我们转发到<strong> 127.0.0.1:8080</strong> 端口去。</p>\n</li>\n</ol>\n<h2 id=\"根据不同的路径跳转到不同的tomcat中\"><a class=\"anchor\" href=\"#根据不同的路径跳转到不同的tomcat中\">#</a> 根据不同的路径，跳转到不同的 tomcat 中</h2>\n<p>实现效果：</p>\n<ul>\n<li>访问：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MDAxL2VkdS8=\">http://127.0.0.1:9001/edu/</span> 直接跳到 127.0.0.1:8080 端口去。</li>\n<li>访问：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MDAxL3ZvZC8=\">http://127.0.0.1:9001/vod/</span> 直接跳到 127.0.0.1:8081 端口去。</li>\n</ul>\n<p>准备工作：</p>\n<ol>\n<li>\n<p>准备两个 tomcat 服务器。</p>\n<p>在目录：<strong>usr/src</strong> 下创建两个文件夹，分别为 tomcat8080、tomcat8081。</p>\n<pre><code class=\"language-cmd\">mkdir tomcat8080\nmkdir tomcat8081\n</code></pre>\n<p>这是可以把之前的 tomcat 进程关闭。</p>\n<pre><code class=\"language-cmd\"># 查看当前的tomcat进程\nps -ef | grep tomcat\n# 关闭进程\nsill -9 + id # 这里是数字9，而不是字母G,ID.查看进程时前面的就是\n</code></pre>\n<p>在两个文件里面分别放入 tomcat 的安装包、并解压、启动（<strong>/usr/src/tomcat8081/apache-tomcat-7.0.70/bin</strong>）之下，执行命令</p>\n<pre><code class=\"language-cmd\">./startup.sh \n</code></pre>\n<p>8080 和 8081 文件夹中的 tomcat 都启动以后，8080 默认的端口号就是 8080，所以不用我们修改。我们需要进入 8081 文件夹中，修改它的配置文件。路径为：<strong>/usr/src/tomcat8081/apache-tomcat-7.0.70/conf</strong> 之中的 <code>server.xml</code>  文件。</p>\n<pre><code class=\"language-cmd\">vi server.xml\n</code></pre>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C9.png\" alt=\"image-20210607172045416\"></p>\n<p>Server port 改为 8015，</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C10.png\" alt=\"image-20210607172207668\"></p>\n<p>主要的 connector port 改为 8081。</p>\n<p>改成功以后分别启动 8080 和 8081。这时，我们启动了两个 tomcat。可以直接去地址栏输入地址。</p>\n</li>\n<li>\n<p>创建文件夹和测试页面。</p>\n<p>因为我们创建的页面是在 <code>webapps</code>  中，所以我们进到这个目录中去，给他分别建立两个文件夹。<strong>edu、ovd。<strong>在这两个文件夹中，分别放入不同的</strong> html</strong> 文件就可以了。这时，我们可以在浏览器输入 ip 地址，试试不同的端口看效果。</p>\n</li>\n</ol>\n<p>具体配置：</p>\n<ol>\n<li>\n<p>找到 nginx 配置文件，进行反向代理配置。</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C11.png\" alt=\"image-20210607175034486\"></p>\n</li>\n<li>\n<p>开放对外访问的端口号：9001、8080、8081、</p>\n</li>\n</ol>\n<h1 id=\"nginx配置实例负载均衡\"><a class=\"anchor\" href=\"#nginx配置实例负载均衡\">#</a> Nginx 配置实例 —— 负载均衡。</h1>\n<p>实现效果：</p>\n<p>在浏览器地址栏输入地址：<span class=\"exturl\" data-url=\"aHR0cDovLzEwNi4xNS4xNzYuMjMx\">http://106.15.176.231</span>，负载均衡效果，平均分配到 8080 和 8081 端口中。</p>\n<p>准备工作</p>\n<ul>\n<li>准备两台 tomact 服务器，一台 8080，一台 8081.</li>\n<li>在两台 tomcat 里面 webapps 目录中。创建名称是 edu 的文件夹，在文件夹中创建页面<strong> a.html</strong>，用于测试</li>\n</ul>\n<p>在 nginx 的配置文件中进行负载均衡的配置</p>\n<ul>\n<li>进入 nginx 的配置中去，在 http 中配置</li>\n<li><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C12.png\" alt=\"image-20210608114542443\"></li>\n</ul>\n<p>在<strong> http</strong> 块中，加一个<mark> upstreat myserver</mark> 后面的<strong> myserver</strong> 是名字，可以自定义。在新加块中加上我们的服务器列表。</p>\n<pre><code class=\"language-cmd\">upstreat myserver&#123;\n\tserver 106.15.176.231:8080\n\tserver 106.15.176.231:8081\n&#125;\n</code></pre>\n<p>在<strong> http==&gt;server</strong> 之中，修改 <code>server_name</code>  的值为自己的 ip 地址。然后在之下的 <code>location</code>  中，使用 proxy_pass  http:// + 上面自定义的名字。实现效果。</p>\n<pre><code class=\"language-cmd\">location / &#123;\n\tproxy_pass  http://myserver  #这里的myserver是自定义名字。\n&#125;\n</code></pre>\n<h2 id=\"nginx负载均衡的策略\"><a class=\"anchor\" href=\"#nginx负载均衡的策略\">#</a> nginx 负载均衡的策略</h2>\n<ol>\n<li>\n<p><strong>轮询</strong>（默认）</p>\n<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果某后端服务器停止了。能自动剔除。</p>\n</li>\n<li>\n<p><strong>weight 权重</strong></p>\n<p>weight 代表权重，默认为 1. 权重越高被分配的客户端越多。指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。例：</p>\n<pre><code class=\"language-cmd\">upstreat myserver&#123;\n\tserver 106.15.176.231:8080  weight=5;\n\tserver 106.15.176.231:8081  weight=10;\n&#125;\n</code></pre>\n<p>以上代码的 8080 端口的权重低于 8081，这时 8081 端口的客户端量就会比 8080 多一倍。</p>\n</li>\n<li>\n<p><strong>ip_hash</strong></p>\n<pre><code class=\"language-cmd\">upstreat myserver&#123;\nip_hash;  #加上这句话就是ip_hash\n\tserver 106.15.176.231:8080;\n\tserver 106.15.176.231:8081;\n&#125;\n</code></pre>\n<p>意思是。当你第一次访问的是 8080，他就默认记住你的这个 ip 访问的就是 8080，以后你的每次访问都会是 8080。这种方法可以解决 session 的问题。</p>\n</li>\n<li>\n<p><strong>fair</strong></p>\n<p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>\n<pre><code class=\"language-cmd\">upstreat myserver&#123;\n\tserver 106.15.176.231:8080;\n\tserver 106.15.176.231:8081;\n\tfair;  #加上这句话就是fair策略\n&#125;\n</code></pre>\n<p>解：同时发起访问请求。这是会默认有 8080、8081 接到请求。但是，谁先接受到。就是谁访问。就是看当前的服务器那个端口响应的时间短了。</p>\n</li>\n</ol>\n<h1 id=\"nginx配置实例动静分离-测试失败\"><a class=\"anchor\" href=\"#nginx配置实例动静分离-测试失败\">#</a> Nginx 配置实例 —— 动静分离。（测试失败！）</h1>\n<ol>\n<li>\n<p>什么是动静分离；</p>\n<p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Neinx 处理静态页面，Tomcat 处理动态页面。动静分离从目前实现角度来讲大致分为两种，<br>\n一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。(如果经常更新的文件，不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p>\n</li>\n<li>\n<p>准备工作；</p>\n<p>在 linux 系统中准备静态资源，用于进行访问，在跟目录下创建一个名为<strong> data</strong> 的文件夹，并在 data 中创建两个子文件夹。www 和 image、分别存放动态资源和静态资源。</p>\n</li>\n<li>\n<p>具体配置；</p>\n<ul>\n<li>\n<p>在 nginx 配置文件中进行配置</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C13.png\" alt=\"image-20210610133516870\"></p>\n<p>配置中：autoindex on 是为了把文件以列表的形势排列出来。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"nginx配置高可用集群\"><a class=\"anchor\" href=\"#nginx配置高可用集群\">#</a> Nginx 配置高可用集群</h1>\n<p>学习视频<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXpKNDExdzdTVj9wPTE0JmFtcDtzcG1faWRfZnJvbT1wYWdlRHJpdmVy\">高可用集群</span></p>\n<ol>\n<li>\n<p>高可用集群</p>\n<ul>\n<li>\n<p>什么是高可用？</p>\n<p>高可用 HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。如果一个系统能够一直提供服务，那么这个可用性则是百分之百，但是天有不测风云。所以我们只能尽可能的去减少服务的故障。</p>\n</li>\n<li>\n<p>解决的问题？</p>\n<p>在生产环境上很多时候是以 <code>Nginx</code>  做反向代理对外提供服务，但是一天 Nginx 难免遇见故障，如：服务器宕机。当 <code>Nginx</code>  宕机那么所有对外提供的接口都将导致无法访问。</p>\n</li>\n<li>\n<p>双机热备份？</p>\n<p>这种方案是国内企业中最为普遍的一种高可用方案，双机热备其实就是指一台服务器在提供服务，另一台为某服务的备用状态，当一台服务器不可用另外一台就会顶替上去。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>配置高可用的准备工作</p>\n<ul>\n<li>需要两台服务器</li>\n<li>在两台服务器上都安装 nginx</li>\n<li>在两台服务器上都安装 keepalived</li>\n</ul>\n</li>\n<li>\n<p>在两台服务器上安装 keepalived</p>\n<p>使用 yum 命令安装</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum install keepalived <span class=\"token operator\">-</span>y</pre></td></tr></table></figure><p>安装好以后，使用：rpm -q -a keepalived 这个命令查看安装的版本号。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rpm <span class=\"token operator\">-</span>q <span class=\"token operator\">-</span>a keepalived</pre></td></tr></table></figure><p>keepalived 的安装位置在：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd <span class=\"token operator\">/</span>etc <span class=\"token comment\">// 安装位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd keepalievd<span class=\"token operator\">/</span>  <span class=\"token comment\">// 进入目录</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vi keepalievd<span class=\"token punctuation\">.</span>conf <span class=\"token comment\">// 进入配置文件</span></pre></td></tr></table></figure></li>\n<li>\n<p>完成高可用配置（主从配置）</p>\n<ol>\n<li>\n<p><strong>修改主机（192.168.16.128）keepalived 配置文件</strong></p>\n<pre><code class=\"language-cmd\">#检测脚本\nvrrp_script chk_http_port &#123;\n    script &quot;/usr/local/src/nginx_check.sh&quot; #心跳执行的脚本，检测nginx是否启动\n    interval 2                          #（检测脚本执行的间隔，单位是秒）\n    weight 2                            #权重\n&#125;\n#vrrp 实例定义部分\nvrrp_instance VI_1 &#123;\n    state MASTER            # 指定keepalived的角色，MASTER为主，BACKUP为备\n    interface ens33         # 当前进行vrrp通讯的网络接口卡(当前centos的网卡) 用ifconfig查看你具体的网卡\n    virtual_router_id 66    # 虚拟路由编号，主从要一直\n    priority 100            # 优先级，数值越大，获取处理请求的优先级越高\n    advert_int 1            # 检查间隔，默认为1s(vrrp组播周期秒数)\n    #授权访问\n    authentication &#123;\n        auth_type PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信\n        auth_pass 1111\n    &#125;\n    track_script &#123;\n        chk_http_port            #（调用检测脚本）\n    &#125;\n    virtual_ipaddress &#123;\n        192.168.16.130            # 定义虚拟ip(VIP)，可多设，每行一个\n    &#125;\n&#125;\n</code></pre>\n<p><code>virtual_ipaddress</code>  里面可以配置 vip, 在线上通过 vip 来访问服务。</p>\n<p><code>interface``需要根据服务器网卡进行设置通常查看方式``ip addr</code></p>\n<p><code>authentication</code>  配置授权访问后备机也需要相同配置</p>\n</li>\n<li>\n<p><strong>修改备机（192.168.16.129）keepalived 配置文件</strong></p>\n<pre><code class=\"language-cmd\">#检测脚本\nvrrp_script chk_http_port &#123;\n    script &quot;/usr/local/src/nginx_check.sh&quot; #心跳执行的脚本，检测nginx是否启动\n    interval 2                          #（检测脚本执行的间隔）\n    weight 2                            #权重\n&#125;\n#vrrp 实例定义部分\nvrrp_instance VI_1 &#123;\n    state BACKUP                        # 指定keepalived的角色，MASTER为主，BACKUP为备\n    interface ens33                      # 当前进行vrrp通讯的网络接口卡(当前centos的网卡) 用ifconfig查看你具体的网卡\n    virtual_router_id 66                # 虚拟路由编号，主从要一直\n    priority 99                         # 优先级，数值越大，获取处理请求的优先级越高\n    advert_int 1                        # 检查间隔，默认为1s(vrrp组播周期秒数)\n    #授权访问\n    authentication &#123;\n        auth_type PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信\n        auth_pass 1111\n    &#125;\n    track_script &#123;\n        chk_http_port                   #（调用检测脚本）\n    &#125;\n    virtual_ipaddress &#123;\n        192.168.16.130                   # 定义虚拟ip(VIP)，可多设，每行一个\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<p><strong>检测脚本：</strong></p>\n<pre><code class=\"language-cmd\">#!/bin/bash\n#检测nginx是否启动了\nA=`ps -C nginx --no-header |wc -l`        \nif [ $A -eq 0 ];then    #如果nginx没有启动就启动nginx                        \n      systemctl start nginx                #重启nginx\n      if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then    #nginx重启失败，则停掉keepalived服务，进行VIP转移\n              killall keepalived                    \n      fi\nfi\n</code></pre>\n</li>\n</ol>\n</li>\n<li>\n<p>分别启动两台服务器的 nginx 和 keepalived。</p>\n<pre><code class=\"language-cmd\">service keepalived restart\t#启动keepalived 虚拟机\nsystemctl start keepalived.service #启动keepalived 服务器\n</code></pre>\n</li>\n</ol>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Nginx",
                "Nginx"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Linux/%E5%AD%A6%E4%B9%A0Linux/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Linux/%E5%AD%A6%E4%B9%A0Linux/",
            "title": "学习Linux",
            "date_published": "2021-05-18T16:00:00.000Z",
            "content_html": "<h1 id=\"linux文件系统\"><a class=\"anchor\" href=\"#linux文件系统\">#</a> linux 文件系统</h1>\n<p>linux 中没有盘符的概念，只有一个根目录。根目录用 <code>/</code>  表示。</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210528135454791.png\" alt=\"image-20210528135454791\"></p>\n<ol>\n<li>\n<p><code>/</code>  根目录下有以下几个文件。</p>\n<ul>\n<li><code>/bin</code></li>\n<li><code>/etc</code></li>\n<li><code>/home</code></li>\n<li><code>/lib</code></li>\n<li><code>/usr</code></li>\n</ul>\n<p>这些不同的目录都有不同的作用。每个目录的作用介绍可查看<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9kdWFuamkvcC95dWVkaW5nMi5odG1s\"> Linux 目录介绍</span></p>\n</li>\n<li>\n<h2 id=\"linux常用命令\"><a class=\"anchor\" href=\"#linux常用命令\">#</a> Linux 常用命令</h2>\n<ul>\n<li>\n<p><strong>pwd</strong> 查看当前在那个目录以及是那个用户。当前路径。</p>\n</li>\n<li>\n<p><strong>ls</strong> 查看当前目录下有那些文件夹，有颜色的或者有后缀名的是文件夹，可以打开，没有的是文件。</p>\n</li>\n<li>\n<p><strong>cd</strong> 进入到文件夹。进去了之后可以用 <code>pwd</code>  查看，使用 cd 可以打开多级路径，用 / 隔开，表示子目录。== 注意：== 区分大小写</p>\n<ol>\n<li>\n<p>cd 快捷键，我们可以使用 <code>cd ..</code>  进入目录，cd 目录之下有些很长的文件夹名字，我们可能记不住，用 ls 查看很长也不想敲。这时候可以使用<strong> Tab</strong> 键，快捷键打出来。点一下是直接获取到输入的首字母的文件，两下是打开以你输入的字母开头的文件。</p>\n</li>\n<li>\n<p>回到家目录。直接</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd <span class=\"token operator\">~</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p><strong>clear</strong>，清空屏幕命令。</p>\n</li>\n<li>\n<p><strong>ls -l</strong>: 罗列出目录，是以竖排这样的方式展示的，ls 后面也可以跟路径，此时，罗列出来的目录就是该路径下的目录。</p>\n</li>\n<li>\n<p><strong>ls -a</strong>: 罗列出影藏的文件目录。可以和<strong> ls -l</strong> 一起使用。</p>\n<p><code>**ls -l -a**</code> ：竖排查看所有文件，包含隐藏文件。</p>\n<p><code>**ls -lha**</code> ：竖排显示所有文件，包含隐藏文件，且大小以 <code>k</code>  单位显示出来</p>\n<p>只要是隐藏的文件或隐藏的文件夹。用 ls 查看到的都是前面带个小点的。</p>\n<p>在 Ubuntu 中，如果想创建一个隐藏的文件或者文件夹，只需要在前面加一个点。</p>\n<p><strong>通配符</strong>：类似正则表达式。</p>\n<ul>\n<li><code>*</code> ：表示一个或多个。</li>\n<li><code>？</code> ：一个字符。</li>\n<li>[1、2、3]，也是代表一个字符，但是只能从中括号中选择一个字符。</li>\n<li>[a-z]，是代表 a 到 z 中的任意一个字符。</li>\n</ul>\n</li>\n<li>\n<p><strong>mv</strong>：移动文件夹或文件，也就是剪切。如下：</p>\n<pre><code>mv ceshi.txt /home/siki/weiwei\nmv hello2.txt /home/siki/Desktop/aa/127.txt \t//移动以后改名字为127.txt\n</code></pre>\n<p>将 <code>ceshi.txt</code>  文件移动到 <code>/home/siki/weiwei</code>  文件夹之下。我们不但可以移动，还可以在移动的时候给他修改文件名字。也就是重命名。例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mv test demo\t<span class=\"token comment\">// 在当前文件夹中，移动 test 文件，且更换名字到当前文件夹。就是修改名字。</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>cp</strong>：复制文件夹或文件，和移动类似。复制是不删除原来位置的文件。复制的过程中，也可以重新命名。<mark>注意：</mark><strong>cp</strong> 复制时如果是文件夹需要在前面加上  <code>-r</code> 。</p>\n</li>\n<li>\n<p><strong>find</strong>：精确搜索，</p>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>find <span class=\"token monadic-operator operator\">/</span>home <span class=\"token function\">-</span>name test<span class=\"token dyadic-operator operator\">.</span>txt</pre></td></tr></table></figure><p>上面代码说明，在<strong> home</strong> 路径下搜索名字为<strong> test</strong> 的文件，只要是 home 下的任何子目录下的 test 文件都看搜索出来，搜索结果为：展示搜索文件的路径。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>find <span class=\"token operator\">/</span>home <span class=\"token operator\">-</span>name he<span class=\"token operator\">*</span> \t<span class=\"token comment\">// 名字中含有 he 的文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>find <span class=\"token operator\">/</span>home <span class=\"token operator\">-</span>name <span class=\"token string\">'12*'</span>  <span class=\"token comment\">// 名字以 12 开头的文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>find <span class=\"token operator\">/</span>home <span class=\"token operator\">-</span>iname <span class=\"token string\">'abd'</span>\t\t<span class=\"token comment\">//\t名字为 abc 开头且不区分大小写。</span></pre></td></tr></table></figure><p>搜索<strong> home</strong> 之下所有目录中，<strong>名字</strong>带有<strong> he</strong> 的所有文件及文件夹。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>locate <span class=\"token number\">123</span>  <span class=\"token comment\">// 搜索索引库中的带有 123 的文件或者文件夹或者路径带有 123 的都索引出来。</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>last</strong>：查看出远程登录记录，其中包括，远程登录的账号、IP、星期、日期、时间、操作时长。</p>\n</li>\n<li>\n<p><strong>echo $HISTSIZE</strong>：用这个命令可以查看 linux 最多可以保存多少行记录。</p>\n</li>\n<li>\n<p><strong>history|more</strong>：这个命令可以查看所有的操作记录。使用空格翻页、一页一页的查看。</p>\n</li>\n<li>\n<p><strong>history</strong>：查询最近的历史操作记录</p>\n</li>\n<li>\n<p><strong>top</strong>：top 命令经常用来监控 linux 的系统状况。能够实时显示系统中各个进程的资源占用情况。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>查看帮助手册， <code>需要查看帮助的命令</code>  + <code>–-help</code> ， <code>man</code>  + 需要查看的命令：如下</p>\n<pre><code>ls --help\nmv --help\n\nman ls\nman mv  \t//man命令使用q退出来。\n</code></pre>\n</li>\n<li>\n<p><strong>cat</strong>：查看文件内容。所有内容直接打印出来，适用于查看内容少的文件。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat <span class=\"token operator\">-</span>b <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 查看文件 123.txt 的内容，使用 - b，是显示行号。此行号不包含空行。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cat <span class=\"token operator\">-</span>n <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 查看文件 123.txt 的内容，使用 - n，是显示行号。此行行包括空行。</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>moar</strong>：也是查看文件内容。所有内容直接打印出来，适用于查看内容少的文件。这个会打印换行。其他的与 cat 相似。</p>\n</li>\n<li>\n<p><strong>grep</strong>：抓取文件中的内容；</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grpe user <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 搜索文件名为 123.txt 中，包含 user 字段的哪一行内容。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grep <span class=\"token operator\">-</span>n user <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 加上一个 - n，是为了显示搜索到的内容显示行号。空行也算行号的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>grpe <span class=\"token operator\">-</span>v user <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 反向搜索，搜索文件名为 123.txt 中，不包含 user 字段的哪一行内容。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>grpe <span class=\"token operator\">^</span><span class=\"token string\">'#'</span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>services <span class=\"token comment\">// 抓取在 /etc/services 文件 中以 #开头的数据。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>grpe s$ <span class=\"token operator\">/</span>home <span class=\"token comment\">// 在 /home 中 以 s 结尾的 。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>grpe <span class=\"token operator\">-</span>i abc <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 在 123.txt 中查找 abc。且忽略大小写。</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>&gt;</strong> 和 <strong>&gt;&gt;</strong> ：**&gt;<strong> 把得到或者查询出来的内容保存在其他文件夹，一个</strong> &gt;<strong> 代表是全部替换。两个</strong> &gt;&gt;** 代表是接在后面。比如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grep siki <span class=\"token number\">123.</span>txt <span class=\"token operator\">></span> test<span class=\"token punctuation\">.</span>txt <span class=\"token comment\">// 抓取文件 123.txt 中，带有 siki 字段的内容 且 将它们保存或替换 test.txt 文件中的内容。如果没有 test.txt 文件。则会在当前目录下新创建一个 test.txt 文件用于保存抓取到的文件。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grep siki <span class=\"token number\">123.</span>txt <span class=\"token operator\">>></span> text<span class=\"token punctuation\">.</span>txt <span class=\"token comment\">// 类似上面，唯一不懂的是，这个不是替换 text.txt 中的类容，而是将它接在 text.txt 文件内容的后面。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 例子如下：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ll <span class=\"token operator\">></span> <span class=\"token number\">123.</span>txt <span class=\"token comment\">//ll 以列表的形式查看当前目录。且把查看到的目录替换保存到 123.txt 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ll <span class=\"token operator\">>></span> <span class=\"token number\">123.</span>txt <span class=\"token comment\">//ll 以列表的形式查看当前目录。且把查看到的目录保存到 123.txt 中</span></pre></td></tr></table></figure><p>总结：一个 <code>&gt;</code>  替换。两个 <code>&gt;&gt;</code>  加在后面。有 <code>text.txt</code>  文件。替换里面的内容，若没有，创建新的 <code>test.txt</code>  文件。</p>\n</li>\n<li>\n<p><strong>|</strong>：管道。相当于做一个命令的连接。将一个命令的输出改变为输入。</p>\n</li>\n<li>\n<p><strong>ln</strong>：软连接。相当于 windows 的桌面快捷方式。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ln aa<span class=\"token operator\">/</span><span class=\"token number\">123.</span>txt aa_softlink <span class=\"token comment\">// 意思是 为 aa/123.txt 创建一个快捷方式，快捷方式的名字叫 aa_softlin</span></pre></td></tr></table></figure><p>修改快捷方式里面的内容，原文件中的内容也会同时被修改。</p>\n</li>\n</ol>\n<h1 id=\"用户管理-权限\"><a class=\"anchor\" href=\"#用户管理-权限\">#</a> 用户管理、权限。</h1>\n<ol>\n<li>添加用户：<strong>sudo</strong></li>\n</ol>\n<p><code>useradd</code> ：添加新用户。</p>\n<p><code>passwd</code> ：添加密码。</p>\n<p>初始用户可以使用<strong> sudo</strong> 添加新用户。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo useradd user1 <span class=\"token comment\">// 前面的是命令，user1 是需要添加的用户名。</span></pre></td></tr></table></figure><p>此处添加需要输入当前除使用户的登录密码作为验证。验证成功后，就可以创建成功了。我们用这个命令查看刚才创建的用户。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>passwd\t<span class=\"token comment\">// 查看服务器所有用户。</span></pre></td></tr></table></figure><p>查看到已经创建的用户以后，给创建的用户设置登录密码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo passwd user1 <span class=\"token comment\">// 使用命令 sudo + 密码 + 需要设置密码的用户名。这里需要重复一遍</span></pre></td></tr></table></figure><p><img data-src=\"E:%5CLklyx.github.io%5Csource%5Cimages%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CLinux%5Cimage-20210527102243369.png\" alt=\"查看创建的用户\"></p>\n<ol start=\"2\">\n<li>\n<p>给 root 设置密码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo passwd root <span class=\"token comment\">//root 账户就是主账户，名字一般都是 root。</span></pre></td></tr></table></figure><p>给 root 设置密码的时候需要验证一下当前账户的密码。</p>\n</li>\n<li>\n<p><strong>切换用户</strong>：<strong>su</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>su root <span class=\"token comment\">// 使用 su + 需要切换的用户的名字</span></pre></td></tr></table></figure><p>切换成功以后输入密码登录。</p>\n</li>\n<li>\n<p><strong>退出 root</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>exit <span class=\"token comment\">// 退出 root 以后，会自动回到初始账号上面去</span></pre></td></tr></table></figure></li>\n<li>\n<p>删除用户：<strong>userdel</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>userdel user1 <span class=\"token comment\">// 删除用户名为 user1 的用户。不删除家目录 /home。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>userdel <span class=\"token operator\">-</span>r user1 <span class=\"token comment\">// 加上 - r 这参数，就删除用户的家目录 /home。</span></pre></td></tr></table></figure></li>\n<li>\n<p>用户组。</p>\n<ul>\n<li>\n<p>添加用户组：<strong>groupadd</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>groupadd group1 <span class=\"token comment\">// 添加一个组名为 group1 的用户组</span></pre></td></tr></table></figure><p>使用 <code>cat /etc/group</code>  查看是否添加成功。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>group <span class=\"token comment\">// 查看是否添加成功。</span></pre></td></tr></table></figure></li>\n<li>\n<p>修改用户组：<strong>groupmod</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>groupmod <span class=\"token operator\">-</span>n group1_new gronp <span class=\"token comment\">// 需要加一个 - n 参数。这里注意先写需要改的名字，后面才写改的是哪个组。</span></pre></td></tr></table></figure></li>\n<li>\n<p>用户组的删除：<strong>groupdel</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>groupdel group1 <span class=\"token comment\">// 直接删除命令加需要删除的组的名字。</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置文件：<strong>passwd</strong></p>\n<pre><code>cat /etc/passwd // 操作系统下的配置文件。配置用户的配置。\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>文件的权限</p>\n<ul>\n<li>\n<p>&lt;img src=&quot;../../../../images/ 扩展知识 / Linux/image-20210527173252136.png&quot; alt=&quot;image-20210527173252136&quot;  /&gt;</p>\n</li>\n<li>\n<p>使用 <code>ll</code>  命令查询出来之后，文件前面总是用很多 <code>-</code> 。前面的第一个是 d，代表是文件夹，可以打开。第一个是 <code>-</code>  代表是文件。后面的 9 个 <code>-</code> 。前三个代表的是自己可以操作的权限。中间三个代表的是组<strong> group</strong> 可以操作的权限。最后一个代表其他人可以操作的权限。</p>\n</li>\n<li>\n<p>其中：R W X 对应的是可读（read）、可写（write）、可执行（excute）。</p>\n</li>\n<li>\n<p>修改权限：<strong>chmod</strong></p>\n<ol>\n<li>\n<p>u：代表当前使用的用户。第 123 个 <code>-</code></p>\n</li>\n<li>\n<p>g：代表该用户所在的组。第 456 个 <code>-</code></p>\n</li>\n<li>\n<p>o：代表其他用户的权限。第 789 个 <code>-</code></p>\n</li>\n<li>\n<p>a：代表 <strong>u、g、o</strong> 全部修改。</p>\n<p>小结。每个<strong> u、g、o</strong> 中。又有<strong> r、w、x</strong> 对应的读、写、执行权限</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>chmod u<span class=\"token operator\">+</span>x <span class=\"token comment\">// 这个意思是，使用修改权限的命令。u 代表是给当前使用的用户，该 user 用户，修改，+ 就是加，给它添加一个权限。加一个 x 权限。x 为可以执行的权限。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>chmod g<span class=\"token operator\">+</span>w <span class=\"token comment\">// 用户组的可写权限打开。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>chmod o<span class=\"token operator\">+</span>wx <span class=\"token comment\">// 其他用户的写、执行权限打开。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>chmod a<span class=\"token operator\">-</span>x <span class=\"token comment\">// 全部的可执行权限关闭。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>chmod u<span class=\"token operator\">=</span>rwx <span class=\"token comment\">// 将 u（当前用户的 rwx 可读、可写、可执行）权限设置为打开。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>chmod u<span class=\"token operator\">=</span>rwx g<span class=\"token operator\">=</span>rw o<span class=\"token operator\">=</span>rwx <span class=\"token comment\">// 可以多个修改。</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用数字代表权限。 <code>r = 4，w = 2， x = 1</code> 。设置多权限就把对应的数组加起来。如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>chmod <span class=\"token number\">777</span> test <span class=\"token comment\">// 修改 test 文件夹的权限为 a（所以用户）rwx。可读、可写、可执行。这里的第一个 7 代表的是 u（user 自己）、第二个 7 代表的是 g（用户组）、第三个 o（他们、其他人）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>chmod <span class=\"token number\">774</span> test <span class=\"token comment\">// 意思为：u（自己）和 g（组）权限为可读可写，o（其他人）权限为只读。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>chmod <span class=\"token number\">444</span> test <span class=\"token comment\">// 包括自己在内的所有人员权限为：只读。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>chmod <span class=\"token number\">764</span> test <span class=\"token comment\">//u（自己）可读可写可执行，g（组）可读可写 不可执行，o（其他人）只能读。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>chmod <span class=\"token operator\">-</span>r <span class=\"token number\">444</span> test <span class=\"token comment\">// 加上一个 - r 是代表把文件夹下面的文件及文件夹的权限都改了。</span></pre></td></tr></table></figure><p>这里只有三个数字是因为一个数字代表三个 <code>-</code> 。具体的权限看他的数字的总和。</p>\n</li>\n<li>\n<p>修改所属人、所属组。</p>\n<ol>\n<li>\n<p><strong>chown</strong>：修改所属人。</p>\n<p>这里需要注意的是，修改所属人估计权限不够，所以我们在前面加一个 sudo。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo chown user test <span class=\"token comment\">// 修改 test 文件夹的所属人为 user</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>chgrp</strong>：修改所有组。</p>\n<p>也是权限不够，需要在前面加上 sudo。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo chgrp user test <span class=\"token comment\">// 修改 test 文件夹的所属组为 user</span></pre></td></tr></table></figure><p>&lt;img src=&quot;../../../../images/ 扩展知识 / Linux/image-20210528112234389.png&quot; alt=&quot;image-20210528112234389&quot; style=&quot;zoom:;&quot; /&gt;</p>\n<p>也都可以加上 **-r**，递归。也就是所有的子文件、子文件夹都修改问这个所属用户、所属组。</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Linux/Linux/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Linux/Linux/",
            "title": "Linux安装学习",
            "date_published": "2021-05-17T16:00:00.000Z",
            "content_html": "<h1 id=\"linux\"><a class=\"anchor\" href=\"#linux\">#</a> Linux?</h1>\n<p>学习视频地址<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXBFNDExQzdobz9wPTEmYW1wO3NwbV9pZF9mcm9tPXBhZ2VEcml2ZXI=\"> LINUX</span></p>\n<p>安装下载位置，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC81NTIxNzk4MDhlYmY=\">Linux</span></p>\n<p>安装好以后去安装 UBUNTU</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/React/React/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/React/React/",
            "title": "React",
            "date_published": "2021-04-28T16:00:00.000Z",
            "content_html": "<h1 id=\"什么是react\"><a class=\"anchor\" href=\"#什么是react\">#</a> 什么是 React？</h1>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "React",
                "React"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/Blog/Git%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/",
            "url": "https://lklyx.github.io/Growth-Diary/Blog/Git%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/",
            "title": "Git常用命令",
            "date_published": "2021-04-11T16:00:00.000Z",
            "content_html": "<h1 id=\"git使用\"><a class=\"anchor\" href=\"#git使用\">#</a> Git 使用</h1>\n<p>git bash 命令窗口写命令：</p>\n<ol>\n<li>\n<p>克隆远程仓库：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git cloen <span class=\"token comment\">// 加仓库的地址</span></pre></td></tr></table></figure></li>\n<li>\n<p>本地仓库代码推送到远程仓库，需要先关联远程仓库：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git remote add origin <span class=\"token comment\">// + 仓库地址</span></pre></td></tr></table></figure></li>\n<li>\n<p>每一次提交添加：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git add <span class=\"token punctuation\">.</span> <span class=\"token comment\">// 提交所有，后面的点。代表所有本次新加的</span></pre></td></tr></table></figure></li>\n<li>\n<p>添加提交的说明，注释 / 说明。就是本次提交修改的类容的缩写，比如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"修改首页\"</span> <span class=\"token comment\">// 在 git 上显示的就是修改首页。英文的双引号可以省略。</span></pre></td></tr></table></figure></li>\n<li>\n<p>提交。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git push <span class=\"token comment\">// 提交到默认分支、或你现在切换的分支。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git push origin master <span class=\"token comment\">// 提交到 master 分支。加上 origin 就是指定提交的分支。</span></pre></td></tr></table></figure></li>\n<li>\n<p>查看当前分支：</p>\n<pre><code>git branch\n</code></pre>\n</li>\n<li>\n<p>查看仓库状态：</p>\n<pre><code>git status\n</code></pre>\n</li>\n<li>\n<p>切换分支：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git checkout <span class=\"token comment\">// + 需要切换的分支名称</span></pre></td></tr></table></figure></li>\n<li>\n<p>合并分支：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git merge  <span class=\"token comment\">// + 分支名。（在需要合并的分支上敲。在没写好的上面，合并写好的）</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"git返回之前版本\"><a class=\"anchor\" href=\"#git返回之前版本\">#</a> Git 返回之前版本</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git reset <span class=\"token operator\">--</span>hard <span class=\"token punctuation\">&#123;</span>hash<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>版本回退。</p>\n<h1 id=\"git报错openssl-ssl_read-connection-was-reset-errno-10054\"><a class=\"anchor\" href=\"#git报错openssl-ssl_read-connection-was-reset-errno-10054\">#</a> Git 报错：OpenSSL SSL_read: Connection was reset, errno 10054</h1>\n<p>有时候会在克隆，拉取项目，推送项目时报这个错，这是因为服务器的 SSl 证书没有经过第三方机构的签署，所以报错。解决办法如下：</p>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git config <span class=\"token function\">-</span><span class=\"token function\">-</span>global http<span class=\"token dyadic-operator operator\">.</span>sslVerify \"false\"</pre></td></tr></table></figure><h1 id=\"git常见的问题解决方法\"><a class=\"anchor\" href=\"#git常见的问题解决方法\">#</a> Git 常见的问题解决方法</h1>\n<p>问题<br>\n (1) 更新代码后显示： <strong> <code>unable to unlink old ‘xxx/xxx/xx’ : invalid argument</code> </strong><br>\n 问题原因：<br>\n要提交或更新的文件被系统线程占用<br>\n解决方法：<br>\n把相关服务暂停，重新 pull 代码<br>\n (2) 更新代码后显示： <strong> <code>the following untracked working tree files would be overwritten by checkout</code> </strong><br>\n 问题原因：<br>\n本地代码仓库目录下有 untracked 文件<br>\n解决方法：<br>\n如果没有需要上库的代码，直接执行 git clean -d -fx 删除 untracked 文件<br>\n (3) 更新代码后显示：<br>\n<strong> <code>your local changes to the following files would be overwritten by merge…</code> </strong><br>\n<strong> <code>please move or remove them before you merge</code> </strong></p>\n<p>问题原因：<br>\n新修改的代码之前未提交，可能被服务器上的代码覆盖<br>\n解决方法 1：<br>\n保留本地修改，然后 add/commit/push 到远程仓库</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git stash\t\t\t\t\t<span class=\"token comment\">// 暂存本地修改</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git pull origin master\t\t<span class=\"token comment\">// 拉取服务器最新代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git stash pop\t\t\t\t<span class=\"token comment\">// 暂存代码恢复</span></pre></td></tr></table></figure><p>解决方法 2：<br>\n放弃本地修改 - 直接回退到上一版本，再拉取服务器最新代码</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git reset <span class=\"token operator\">--</span>hard\t\t\t<span class=\"token comment\">// 可加上 commit id</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git pull origin master</pre></td></tr></table></figure><p>(4) git pull 的时候认证失败：<br>\n<strong> <code>remote: invalid Login or password</code> </strong><br>\n<strong> <code>fatal: Authentication failed for 'https://…'</code> </strong></p>\n<p>问题原因：<br>\n账号密码失效或者是未登录<br>\n解决方法：<br>\nwindows 账户下，控制面板 -&gt; 用户帐户 -&gt;windows 凭据 -&gt; 修改 git 密码<br>\n (5) 版本回退 git reset --hard {hash} 后提示：<br>\n** <code>fatal: could not parse object &quot;hash id&quot;**</code></p>\n<p>问题原因：<br>\n切换到 master 分支后没有更新最新代码，git log 不包含要 reset 的节点<br>\n解决方法：<br>\n更新代码后 git log 找到对应节点 hash id 再 reset<br>\n (6) 切分支后提示文件有修改，撤销文件修改报错 / 对这个文件任何修改都报错<br>\n <code>**unlink of file ‘modifyFile.c’ failed. should I try again?(y/n)</code> **</p>\n<p>问题原因：<br>\n与问题 (1) 一样，有线程占用要修改的文件，比如代码查看器等<br>\n解决方法：<br>\n把相关服务停了，重新处理<br>\n (7) git push 后提示:<br>\n <code>**to https://.git**</code> <br>\n <code>**![rejected] localRepo-&gt;remoteRepo(fetch first)**</code> <br>\n <code>**error: failed to push some refs to 'https://.git’**</code> <br>\n <code>**Updates were rejected because the remote contain work that you do not have locally.</code> **</p>\n<p>问题原因：<br>\n本地仓库不包含远程仓库修改<br>\n解决方法：<br>\n更新远程分支并重新 add/commit/push<br>\n (8) git push 后提示:<br>\n <code>**to https://.git**</code> <br>\n <code>**![rejected] localRepo-&gt;remoteRepo(fetch first)**</code> <br>\n <code>**error: failed to push some refs to 'https://.git’**</code> <br>\n <code>**Updates were rejected because the tip of your current branch is behind its remote couterpart. Integrate the remote changes bufore pushing again.</code> **</p>\n<p>问题原因：<br>\n本地仓库节点落后于远程仓库节点，当然这可能是自己主动回退的<br>\n解决方法：<br>\n方案 1：强推。覆盖远程分支，这样会使远程修改丢失，多人同一分支写作的时候不可取</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git push <span class=\"token operator\">-</span>u origin <span class=\"token constant\">YOUR_BRANCH</span> <span class=\"token operator\">-</span>f</pre></td></tr></table></figure><p>方案 2：重新拉取远程仓库 merge 再 push。结合具体代码修改情况做处理</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git pull origin <span class=\"token constant\">YOUR_BRANCH</span> <span class=\"token comment\">// 修改～</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git push <span class=\"token operator\">-</span>u origin <span class=\"token constant\">YOUR_BRANCH</span></pre></td></tr></table></figure><p>方案 3：直接推到新分支，原分支作废</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git push origin <span class=\"token constant\">YOUR_BRANCH_NEW</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git branch <span class=\"token constant\">YOUR_BRANCH_NEW</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git push <span class=\"token operator\">-</span>u origin <span class=\"token constant\">YOUR_BRANCH_NEW</span></pre></td></tr></table></figure><p>(9) git pull 后提示<br>\n <code>**fatal: refuse to merge unrelated histories</code> **</p>\n<p>问题原因：<br>\n出现这个问题的最主要原因还是在于本地仓库和远程仓库实际上是独立的两个仓库，如果一开始用 git clone 拷贝到本地就不存在这个问题。本地 git init 后尝试与远程分支关联<br>\n解决方法：<br>\npull 命令后加 --allow-unrelated-histories 来解决，合并两个独立启动仓库的历史</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git pull origin master <span class=\"token operator\">--</span>allow<span class=\"token operator\">-</span>unrelated<span class=\"token operator\">-</span>histories</pre></td></tr></table></figure><p>(10) git checkout 后提示:<br>\n <code>**error: cannot stat ‘file…’: Filename too long</code> **</p>\n<p>问题原因：<br>\n如提示，文件名过长无法 checkout。git 可以创建 4096 长度的文件名，然而在 windows 最多是 260，因为 git 用了旧版本的 windows api，导致出现这种情况。<br>\n解决方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git config <span class=\"token operator\">--</span>global core<span class=\"token punctuation\">.</span>longpaths <span class=\"token boolean\">true</span> \t<span class=\"token comment\">// 去除文件名长度限制</span></pre></td></tr></table></figure><p>(11) git pull 后撤销:<br>\n 问题原因：<br>\n主干分支当前跑不过等原因<br>\n解决方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git reflog <span class=\"token constant\">YOUR_BRANCH</span>\t\t\t\t\t<span class=\"token comment\">// 查看当前分支操作记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git reset <span class=\"token operator\">--</span>hard <span class=\"token constant\">YOUR_BRANCH</span>@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span>\t\t<span class=\"token comment\">// 回退到上一节点，拉取 master 之前</span></pre></td></tr></table></figure><p>(12) git checkout filename 后报错:<br>\nerror: pathspec did not match any files known to git</p>\n<p>问题原因：<br>\ngit checkout filename 回退未添加到缓存区的文件，但是对未 track 的文件不生效。git checkout 未 track 文件 git 以为是切分支<br>\n解决方法：<br>\n更新如果不需要该文件，直接删除</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rm filename</pre></td></tr></table></figure><h1 id=\"git查看当前的仓库地址\"><a class=\"anchor\" href=\"#git查看当前的仓库地址\">#</a> git 查看当前的仓库地址</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git remote <span class=\"token operator\">-</span>v</pre></td></tr></table></figure><h1 id=\"git查看当前仓库的基本信息\"><a class=\"anchor\" href=\"#git查看当前仓库的基本信息\">#</a> git 查看当前仓库的基本信息</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git remote show origin</pre></td></tr></table></figure>",
            "tags": [
                "历练ing",
                "Blog",
                "Git"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E5%8A%AA%E5%8A%9B%E4%B8%8D%E6%98%AF%E6%B2%A1%E6%9C%89%E7%94%A8%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%8B%8D%E4%BD%A0%E4%B8%8D%E5%A4%9F%E5%8A%AA%E5%8A%9B/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E5%8A%AA%E5%8A%9B%E4%B8%8D%E6%98%AF%E6%B2%A1%E6%9C%89%E7%94%A8%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%8B%8D%E4%BD%A0%E4%B8%8D%E5%A4%9F%E5%8A%AA%E5%8A%9B/",
            "title": "努力不是没有用，就是拍你不够努力",
            "date_published": "2021-04-07T09:27:10.773Z",
            "content_html": "<p>来源：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sY2h4Lm9yZy8=\">励志一生</span> 文 / 唤醒沉睡的猪</p>\n<p><img data-src=\"http://www.lchx.org/d/file/2017092717/2017092717011514.jpg\" alt=\"努力不是没有用，就怕你不够努力\"></p>\n<p>最近的某一天，我下班回到家，突然接到了一个陌生人的来电，原本我以为又是那些推销商铺的人给我打的电话，没想到打电话的人竟是一位某企业的合伙人。</p>\n<p>见到我接了电话，她快速表明来意，希望我能够抽空帮他们企业写个漂亮的简介。她说之前公司也有过一个版本的简介，但是写得太差了，现在企业不断发展壮大，企业的简介也要跟着更新换代。</p>\n<p>我问她是怎么认识我的，她说是一个朋友介绍的，说我曾经给过不少客户写材料，且一直从事与文字相关的工作，还听说我这些年一直坚持不懈的写作，所以觉得我定能够给他们量身定制一份非常完美的企业简介。</p>\n<p>她问我大概怎么收费，如果是前几年，我一定会特别不好意思的说你随便给吧，意思一下就可以了。可是，今天，我居然可以底气十足的和人家谈条件。</p>\n<p>当我把这些情况告诉给推荐我的那个朋友时，她打趣地说：“你现在居然敢和我朋友谈条件了，你太狠了。” 我告诉她，她不是也因为觉得我不错，才愿意把我介绍给人家吗，如果我的水平真差到都不需要回报，那人家找我干什么呢。朋友竖起大拇指，一个劲给我点赞，说她喜欢的就是我的这种霸气。</p>\n<p>没错，当你足够努力和足够优秀的时候，不仅认识你的愿意推荐你，甚至他们也会把认识你当作是一种荣幸。当你的能力已经在某个领域广为人知的时候，这时候就是你知识和能力变现的时候，也是你可以充满底气地和人家谈条件的时候。所以，不要总是觉得努力没有什么用，重要的是怕你不够努力。</p>\n<p>我曾经在一篇文章提到过一位知名的作家，她叫一直特立独行的猫，去年的时候，我给她写过一封邮件，请教她一些写作上的困惑。当我发出邮件的时候，是晚上的十一点多，我无比忐忑不安，因为我怕自己打扰到她休息了，让她对我心生厌恶。可是我没想到，当我一觉醒来的时候，我收到了她回复给我的邮件，那是凌晨三点多，她告诉我不用怕打扰她，她每天都会写作到深夜。</p>\n<p>她的回信对我触动很大，因为我一直觉得自己在很多的同龄人中算是能够吃苦的了，也是比较努力的了。毕竟自己出身穷苦农村，生活的艰难让我早早就学会了自力更生。读大学的时候，我已经学会四处打工赚钱养家，甚至给父母在农村起了漂亮的小楼房。这些经历让很多人都觉得我其实已经非常努力了，甚至连我自己也曾经一度错误地认为自己已经相当努力了，可是对比人家，我才发现，那只不过是冰山一角。难怪人家能够成为畅销书作家，三十岁出头就实现了财务自由，而我依然还在别人的管控下做着普普通通的工作。</p>\n<p>我很幸运我遇到了像一直特立独行的猫这样的人，她们的正向激励让我发现其实每一个普普通通的人都可以通过学习和努力去改变命运。</p>\n<p>就像我很多年前坚持写作一样，我真的也不相信有一天，我在还没大学毕业的时候就能够让多篇文章变成了铅字，还能够靠着文字谋生。而就在最近，我升职加薪了，还被放到了一个比较核心的部门，这一切，靠的不是别的，恰恰是我人无我有人有我优的职场核心竞争力，那就是扎实的写作功底。</p>\n<p>新单位头儿告诉我，之所以找到我，是多方了解得知我曾经有过多个岗位的锻炼经验，而且每到一个部门，工作都非常认真和努力，最重要的是，我有一项比较优势的技能，那就是写作，而他们想要的就是这样一位拥有较好写作功底，能够驾驭一些大型专题材料写作的人。</p>\n<p>很多人问我，是怎么来到这个单位的，我如实告诉了他们我获得这次机会的原因。当他们听到我说人家想要写作功底比较强的人的时候，他们无一例外的觉得，我就是那个最适合的人选。</p>\n<p>虽然这样的赞美我听了无数遍，已经不足为奇，但是，当听到人家说起文字功底好，第一个想到的就是我的时候，我的心中莫名的涌动着一股暖流。我突然觉得自己所有的努力都没有白费，那些曾经挑灯写作的夜晚，那些曾经不被看好的文字，终于在今天都变成了我职场竞争的有力武器。甚至，良好的写作功底，已经成为我个人的一个闪耀品牌，正在一点点改变着我的未来和命运。</p>\n<p>用自己这活生生的事例，印证了那一句话：努力不是没有用，就怕你不够努力。</p>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%90%9E%E7%AC%91%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%90%9E%E7%AC%91%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "title": "Book思议——就这？",
            "date_published": "2021-04-07T05:42:02.014Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdS5zaGFkaWFvLmFwcC8=\">毒鸡汤文案</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHAuc2hhZGlhby5hcHAv\">彩虹屁文案</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXEuc2hhZGlhby5hcHAv\">朋友圈文案</span></p>\n<ol>\n<li>\n<p>上帝说：如果给你 1 分钟的时间，让你打电话給五年前的你，你会对他说些什么？</p>\n<p>我说：给我五分钟吧！我怕那<strong> sb</strong> 不信。</p>\n</li>\n</ol>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Uni-App/Uni-App/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Uni-App/Uni-App/",
            "title": "Uni-app",
            "date_published": "2021-04-05T16:00:00.000Z",
            "content_html": "<p><code>学习视屏21集开始</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUJKNDExVzdwWD9wPTIxJmFtcDtzcG1faWRfZnJvbT1wYWdlRHJpdmVy\">学习视屏连接</span></p>\n<h1 id=\"数据缓存\"><a class=\"anchor\" href=\"#数据缓存\">#</a> 数据缓存</h1>\n<p>本章主要讲到<span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvL2FwaS9zdG9yYWdlL3N0b3JhZ2U/aWQ9c2V0c3RvcmFnZQ==\"> uni-app 官方文档</span>中的 APi 之下的数据缓存。介绍了以下三个的用法</p>\n<ol>\n<li><strong>uni-setStorage</strong></li>\n<li><strong>uni-getStorage</strong></li>\n<li><strong>uni-removeStorage</strong></li>\n</ol>\n<p>uni-setStorage 和 uni-setStorageSync 的区别在于没有带 Sync 的是异步的方法，带 Sync 的是同步的方法，常用的是同步的方法。</p>\n<h1 id=\"上传图片\"><a class=\"anchor\" href=\"#上传图片\">#</a> 上传图片</h1>\n<p>本章主要讲到<span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvL2FwaS9zdG9yYWdlL3N0b3JhZ2U/aWQ9c2V0c3RvcmFnZQ==\"> uni-app 官方文档</span>中的 APi 之下的媒体之下的图片。主要注意看参数表格。默认最大是 9 张图</p>\n<p>文档中的<span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvL2FwaS9tZWRpYS9pbWFnZT9pZD1jaG9vc2VpbWFnZQ==\"> uni.chooseImage</span> 是从本地相册选择图片或者是使用相机拍照。</p>\n<p><strong>OBJECT 参数说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">必填</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">平台差异说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">count</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">最多可以选择的图片张数，默认 9</td>\n<td style=\"text-align:left\">见下方说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sizeType</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">original 原图，compressed 压缩图，默认二者都有</td>\n<td style=\"text-align:left\">App、微信小程序、支付宝小程序、百度小程序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">extension</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">根据文件拓展名过滤，每一项都不能是空字符串。默认不过滤。</td>\n<td style=\"text-align:left\">H5(HBuilder X2.9.9+)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sourceType</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">album 从相册选图，camera 使用相机，默认二者都有。如需直接开相机或直接选相册，请只使用一个选项</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">success</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">成功则返回图片的本地文件路径列表 tempFilePaths</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fail</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">接口调用失败的回调函数</td>\n<td style=\"text-align:left\">小程序、App</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">complete</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">接口调用结束的回调函数（调用成功、失败都会执行）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p><strong>success 返回参数说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">tempFilePaths</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">图片的本地文件路径列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tempFiles</td>\n<td style=\"text-align:left\">Array&lt;Object&gt;、Array&lt;File&gt;</td>\n<td style=\"text-align:left\">图片的本地文件列表，每一项是一个 File 对象</td>\n</tr>\n</tbody>\n</table>\n<p><strong>File 对象结构如下</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">path</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">本地文件路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">size</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">本地文件大小，单位：B</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">name</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">包含扩展名的文件名称，仅 H5 支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">type</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">文件类型，仅 H5 支持</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>uni<span class=\"token punctuation\">.</span><span class=\"token function\">chooseImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    count<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认 9</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sizeType<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'original'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'compressed'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 可以指定是原图还是压缩图，默认二者都有</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sourceType<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'album'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 从相册选择</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>tempFilePaths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印出上传图片的路径。路径为一个数组，这是我们可以在 data 中声明一个数组，将上传的图片路径赋值（这里使用箭头函数，要不然 this 指向会出错）到这个数组中，再渲染出来，就可以查看到上传的图片了。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"23条件注释实现跨端兼容\"><a class=\"anchor\" href=\"#23条件注释实现跨端兼容\">#</a> 23. 条件注释实现跨端兼容</h1>\n<p>使用注释，在 == <code>注释中</code>  == 添加他的 <code>平台标识</code> ，以 <code>#ifdef</code>  开头，以 <code>#endif</code>  结尾。</p>\n<h1 id=\"24导航跳转\"><a class=\"anchor\" href=\"#24导航跳转\">#</a> 24. 导航跳转</h1>\n<p>有声明式导航和编程式导航。</p>\n<p>声明式：直接用 <code>navogator</code>  标签来跳转，</p>\n<p>编程式：给当前需要跳转的图片、文字、按钮一个方法，在方法中写</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在起始页面跳转到 test.vue 页面并传递参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>uni<span class=\"token punctuation\">.</span><span class=\"token function\">navigateTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'test?id=1&amp;name=uniapp'</span> <span class=\"token comment\">// 需要跳转的地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>跳转时传参数，只需在 url 后面，用 <code>问号？</code> + 需要传递过去的 “参数名”=“参数值”，多个参数用 <code>&amp;</code>  隔开。例子如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>url<span class=\"token operator\">:</span><span class=\"token string\">'/pages/detail/detail?id=80&amp;age=20'</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 跳转时，传递一个 id 等于 80 和 age 等于 20 的值过去</span></pre></td></tr></table></figure><p>在传过去以后，接受页面跳转传过来的参数保存在 <code>onLoad</code>  生命周期函数参数中的 <code>options</code>  中，例子如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>expord defaule <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">onLoad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"25组件中的生命周期函数\"><a class=\"anchor\" href=\"#25组件中的生命周期函数\">#</a> 25. 组件中的生命周期函数</h1>\n<p>和 vue 中的一样。但是，其中页面数据发生改变之前，和页面数据发生改变之后两个生命周期函数只在安卓程序中能使用。</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Uni-app",
                "Uni-app"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E5%9B%9B%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E5%9B%9B%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "title": "四月的风-微甜。",
            "date_published": "2021-04-02T02:54:36.324Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试。\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"d96f9e0f9e13ad0e8eb0e7402a68c87374d92c2853646af4f4ada4ff57375388\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">请输入密码查看，密码为6位数哦~。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%83%85%E6%84%9F%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%83%85%E6%84%9F%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "title": "Book思议——情感",
            "date_published": "2021-03-31T05:23:49.015Z",
            "content_html": "<ol>\n<li>其实我也没有在等你，只是我喜欢不上别人而已。</li>\n</ol>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "title": "Book思议——励志",
            "date_published": "2021-03-30T03:08:25.236Z",
            "content_html": "<ol>\n<li>生活中，如果你的影子总走在你之前，那是因为你前进的路上没有光。</li>\n<li>人群拥挤？只要你有目标、有方向，全世界都会为你让路。</li>\n</ol>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Es6/Es6/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Es6/Es6/",
            "title": "Es6学习篇",
            "date_published": "2021-03-28T16:00:00.000Z",
            "content_html": "<h1 id=\"es6介绍\"><a class=\"anchor\" href=\"#es6介绍\">#</a> ES6 介绍</h1>\n<p><code>babel</code> <strong> 一个前端工具，可以将 es6 转为 es5，使浏览器支持 es6</strong></p>\n<p><strong>ES6</strong>：参考文档 (阮一峰老师)，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI1JFQURNRQ==\">ES6 入门教程</span></p>\n<p><strong>ES6</strong>：参考视屏 (bilibili)<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWF5NHkxcjc4Qj9wPTE=\"> ES6 从入门到精通</span></p>\n<ol>\n<li>为什么要学习 es6\n<ul>\n<li>ES5 语言的先天不足，比如变量的提升、内置对象的方法不灵活、模板化实现不完善等等</li>\n<li>为了后面的 vue、尤其是 react 框架做好了准备</li>\n<li>目前大部分公司的项目都在使用 es6</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"let和const命令\"><a class=\"anchor\" href=\"#let和const命令\">#</a> let 和 const 命令</h1>\n<p>ES6 新增了 <code>let</code>  命令，用来声明变量。它的用法类似于 <code>var</code> ，但是所声明的变量，只在 <code>let</code>  命令所在的代码块内有效。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token comment\">// ReferenceError: a is not defined.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>b <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>上面代码在代码块之中，分别用 <code>let</code>  和 <code>var</code>  声明了两个变量。然后在代码块之外调用这两个变量，结果 <code>let</code>  声明的变量报错， <code>var</code>  声明的变量返回了正确的值。这表明， <code>let</code>  声明的变量只在它所在的代码块有效。</p>\n<p>下面的代码如果使用 <code>var</code> ，最后输出的是 <code>10</code> 。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></pre></td></tr></table></figure><p>上面代码中，变量 <code>i</code>  是 <code>var</code>  命令声明的，在全局范围内都有效，所以全局只有一个变量 <code>i</code> 。每一次循环，变量 <code>i</code>  的值都会发生改变，而循环内被赋给数组 <code>a</code>  的函数内部的 <code>console.log(i)</code> ，里面的 <code>i</code>  指向的就是全局的 <code>i</code> 。也就是说，所有数组 <code>a</code>  的成员里面的 <code>i</code> ，指向的都是同一个 <code>i</code> ，导致运行时输出的是最后一轮的 <code>i</code>  的值，也就是 10。</p>\n<p>如果使用 <code>let</code> ，声明的变量仅在块级作用域内有效，最后输出的是 6。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span></pre></td></tr></table></figure><p>上面代码中，变量 <code>i</code>  是 <code>let</code>  声明的，当前的 <code>i</code>  只在本轮循环有效，所以每一次循环的 <code>i</code>  其实都是一个新的变量，所以最后输出的是 <code>6</code> 。你可能会问，如果每一轮循环的变量 <code>i</code>  都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量 <code>i</code>  时，就在上一轮循环的基础上进行计算。</p>\n<h2 id=\"不存在变量提升\"><a class=\"anchor\" href=\"#不存在变量提升\">#</a> 不存在变量提升</h2>\n<p><code>var</code>  命令会发生 “变量提升” 现象，即变量可以在声明之前使用，值为 <code>undefined</code> 。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//var 的情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 undefined</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//let 的情况</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错 ReferenceError</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了纠正这种现象， <code>let</code>  命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p>\n<p>上面代码中，变量 <code>foo</code>  用 <code>var</code>  命令声明，会发生变量提升，即脚本开始运行时，变量 <code>foo</code>  已经存在了，但是没有值，所以会输出 <code>undefined</code> 。变量 <code>bar</code>  用 <code>let</code>  命令声明，不会发生变量提升。这表示在声明它之前，变量 <code>bar</code>  是不存在的，这时如果用到它，就会抛出一个错误。</p>\n<h2 id=\"暂时性死区\"><a class=\"anchor\" href=\"#暂时性死区\">#</a> 暂时性死区</h2>\n<p>只要块级作用域内存在 <code>let</code>  命令，它所声明的变量就 “绑定”（binding）这个区域，不再受外部的影响。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  tmp <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中，存在全局变量 <code>tmp</code> ，但是块级作用域内 <code>let</code>  又声明了一个局部变量 <code>tmp</code> ，导致后者绑定这个块级作用域，所以在 <code>let</code>  声明变量前，对 <code>tmp</code>  赋值会报错。</p>\n<p>ES6 明确规定，如果区块中存在 <code>let</code>  和 <code>const</code>  命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p>总之，在代码块内，使用 <code>let</code>  命令声明变量之前，该变量都是不可用的。这在语法上，称为 “暂时性死区”（temporal dead zone，简称 TDZ）。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// TDZ 开始</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  tmp <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> tmp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// TDZ 结束</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  tmp <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中，在 <code>let</code>  命令声明变量 <code>tmp</code>  之前，都属于变量 <code>tmp</code>  的 “死区”。</p>\n<p>“暂时性死区” 也意味着 <code>typeof</code>  不再是一个百分之百安全的操作。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，变量 <code>x</code>  使用 <code>let</code>  命令声明，所以在声明之前，都属于 <code>x</code>  的 “死区”，只要用到该变量就会报错。因此， <code>typeof</code>  运行时就会抛出一个 <code>ReferenceError</code> 。</p>\n<p>作为比较，如果一个变量根本没有被声明，使用 <code>typeof</code>  反而不会报错。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> undeclared_variable <span class=\"token comment\">// \"undefined\"</span></pre></td></tr></table></figure><p>上面代码中， <code>undeclared_variable</code>  是一个不存在的变量名，结果返回 “undefined”。所以，在没有 <code>let</code>  之前， <code>typeof</code>  运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。</p>\n<p>有些 “死区” 比较隐蔽，不太容易发现。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p>上面代码中，调用 <code>bar</code>  函数之所以报错（某些实现可能不报错），是因为参数 <code>x</code>  默认值等于另一个参数 <code>y</code> ，而此时 <code>y</code>  还没有声明，属于 “死区”。如果 <code>y</code>  的默认值是 <code>x</code> ，就不会报错，因为此时 <code>x</code>  已经声明了。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 2]</span></pre></td></tr></table></figure><p>另外，下面的代码也会报错，与 <code>var</code>  的行为不同。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// ReferenceError: x is not defined</span></pre></td></tr></table></figure><p>上面代码报错，也是因为暂时性死区。使用 <code>let</code>  声明变量时，只要变量在还没有声明完成前使用，就会报错。上面这行就属于这个情况，在变量 <code>x</code>  的声明语句还没有执行完成前，就去取 <code>x</code>  的值，导致报错”x 未定义 “。</p>\n<p>ES6 规定暂时性死区和 <code>let</code> 、 <code>const</code>  语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。</p>\n<p>总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p>\n<h2 id=\"不允许重复声明\"><a class=\"anchor\" href=\"#不允许重复声明\">#</a> 不允许重复声明</h2>\n<p><code>let</code>  不允许在相同作用域内，重复声明同一个变量。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因此，不能在函数内部重新声明参数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 不报错</span></pre></td></tr></table></figure><h2 id=\"为什么需要块级作用\"><a class=\"anchor\" href=\"#为什么需要块级作用\">#</a> 为什么需要块级作用</h2>\n<p>为了防止块级作用域的变量提升，块级作用域里面的变量会覆盖全局变量。</p>\n<h2 id=\"es6的块级作用域\"><a class=\"anchor\" href=\"#es6的块级作用域\">#</a> ES6 的块级作用域</h2>\n<p><code>let</code>  实际上为 JavaScript 新增了块级作用域。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的函数有两个代码块，都声明了变量 <code>n</code> ，运行后输出 5。这表示外层代码块不受内层代码块的影响。如果两次都使用 <code>var</code>  定义变量 <code>n</code> ，最后输出的值才是 10。</p>\n<h1 id=\"模板字符串\"><a class=\"anchor\" href=\"#模板字符串\">#</a> 模板字符串</h1>\n<p>使用 tab 键上面的反引号  <code>··</code> ，插入变量时使用 <code 变量名>$</code> ，就可以了</p>\n<p>模板字符串中嵌入变量，需要将变量名写在 <code>$&#123;&#125;</code>  之中。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">hasPrivilege</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 传统写法为</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 'User '</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// + user.name</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// + ' is not authorized to do '</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// + action</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// + '.'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">User </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>user<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> is not authorized to do </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>action<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p>\n<h2 id=\"标签模板\"><a class=\"anchor\" href=\"#标签模板\">#</a> 标签模板</h2>\n<p>模板字符串的功能，不仅仅是上面这些。它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为 “标签模板” 功能（tagged template）。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>alert<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签” 指的就是函数，紧跟在后面的模板字符串就是它的参数。</p>\n<h1 id=\"字符串的新增方法\"><a class=\"anchor\" href=\"#字符串的新增方法\">#</a> 字符串的新增方法</h1>\n<h2 id=\"stringfromcodepoint\"><a class=\"anchor\" href=\"#stringfromcodepoint\">#</a> String.fromCodePoint()</h2>\n<p>ES5 提供 <code>String.fromCharCode()</code>  方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于 <code>0xFFFF</code>  的字符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20BB7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// \"ஷ\"</span></pre></td></tr></table></figure><p>上面代码中， <code>String.fromCharCode()</code>  不能识别大于 <code>0xFFFF</code>  的码点，所以 <code>0x20BB7</code>  就发生了溢出，最高位 <code>2</code>  被舍弃了，最后返回码点 <code>U+0BB7</code>  对应的字符，而不是码点 <code>U+20BB7</code>  对应的字符。</p>\n<p>ES6 提供了 <code>String.fromCodePoint()</code>  方法，可以识别大于 <code>0xFFFF</code>  的字符，弥补了 <code>String.fromCharCode()</code>  方法的不足。在作用上，正好与下面的 <code>codePointAt()</code>  方法相反。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCodePoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20BB7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// \"𠮷\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCodePoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1f680</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x79</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'x\\uD83D\\uDE80y'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码中，如果 <code>String.fromCodePoint</code>  方法有多个参数，则它们会被合并成一个字符串返回。</p>\n<p>注意， <code>fromCodePoint</code>  方法定义在 <code>String</code>  对象上，而 <code>codePointAt</code>  方法定义在字符串的实例对象上。</p>\n<h2 id=\"stringraw\"><a class=\"anchor\" href=\"#stringraw\">#</a> String.raw()</h2>\n<p>ES6 还为原生的 String 对象，提供了一个 <code>raw()</code>  方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String<span class=\"token punctuation\">.</span>raw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 实际返回 \"Hi\\\\n5!\"，显示的是转义后的结果 \"Hi\\n5!\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>String<span class=\"token punctuation\">.</span>raw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi\\u000A!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 实际返回 \"Hi\\\\u000A!\"，显示的是转义后的结果 \"Hi\\u000A!\"</span></pre></td></tr></table></figure><p>如果原字符串的斜杠已经转义，那么 <code>String.raw()</code>  会进行再次转义。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String<span class=\"token punctuation\">.</span>raw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi\\\\n</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 返回 \"Hi\\\\\\\\n\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>String<span class=\"token punctuation\">.</span>raw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi\\\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">===</span> <span class=\"token string\">\"Hi\\\\\\\\n\"</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>String.raw()</code>  方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。</p>\n<p><code>String.raw()</code>  本质上是一个正常的函数，只是专用于模板字符串的标签函数。如果写成正常函数的形式，它的第一个参数，应该是一个具有 <code>raw</code>  属性的对象，且 <code>raw</code>  属性的值应该是一个数组，对应模板字符串解析后的值。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// `foo$&#123;1 + 2&#125;bar`</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>String<span class=\"token punctuation\">.</span><span class=\"token function\">raw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> raw<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"foo3bar\"</span></pre></td></tr></table></figure><p>上面代码中， <code>String.raw()</code>  方法的第一个参数是一个对象，它的 <code>raw</code>  属性等同于原始的模板字符串解析后得到的数组。</p>\n<p>作为函数， <code>String.raw()</code>  的代码实现基本如下。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">raw</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    output <span class=\"token operator\">+=</span> strings<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  output <span class=\"token operator\">+=</span> strings<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实例方法codepointat\"><a class=\"anchor\" href=\"#实例方法codepointat\">#</a> 实例方法：codePointAt ()</h2>\n<p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为 <code>2</code>  个字节。对于那些需要 <code>4</code>  个字节储存的字符（Unicode 码点大于 <code>0xFFFF</code>  的字符），JavaScript 会认为它们是两个字符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"𠮷\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 55362</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 57271</span></pre></td></tr></table></figure><p>上面代码中，汉字 “𠮷”（注意，这个字不是 “吉祥” 的 “吉”）的码点是 <code>0x20BB7</code> ，UTF-16 编码为 <code>0xD842 0xDFB7</code> （十进制为 <code>55362 57271</code> ），需要 <code>4</code>  个字节储存。对于这种 <code>4</code>  个字节的字符，JavaScript 不能正确处理，字符串长度会误判为 <code>2</code> ，而且 <code>charAt()</code>  方法无法读取整个字符， <code>charCodeAt()</code>  方法只能分别返回前两个字节和后两个字节的值。</p>\n<p>ES6 提供了 <code>codePointAt()</code>  方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 134071</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 57271</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 97</span></pre></td></tr></table></figure><p><code>codePointAt()</code>  方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将 “𠮷a” 视为三个字符，codePointAt 方法在第一个字符上，正确地识别了 “𠮷”，返回了它的十进制码点 134071（即十六进制的 <code>20BB7</code> ）。在第二个字符（即 “𠮷” 的后两个字节）和第三个字符 “a” 上， <code>codePointAt()</code>  方法的结果与 <code>charCodeAt()</code>  方法相同。</p>\n<p>总之， <code>codePointAt()</code>  方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与 <code>charCodeAt()</code>  方法相同。</p>\n<p><code>codePointAt()</code>  方法返回的是码点的十进制值，如果想要十六进制的值，可以使用 <code>toString()</code>  方法转换一下。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"20bb7\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"61\"</span></pre></td></tr></table></figure><p>你可能注意到了， <code>codePointAt()</code>  方法的参数，仍然是不正确的。比如，上面代码中，字符 <code>a</code>  在字符串 <code>s</code>  的正确位置序号应该是 1，但是必须向 <code>codePointAt()</code>  方法传入 2。解决这个问题的一个办法是使用 <code>for...of</code>  循环，因为它会正确识别 32 位的 UTF-16 字符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> ch <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 20bb7</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 61</span></pre></td></tr></table></figure><p>另一种方法也可以，使用扩展运算符（ <code>...</code> ）进行展开运算。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token string\">'𠮷a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// arr.length === 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token parameter\">ch</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 20bb7</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 61</span></pre></td></tr></table></figure><p><code>codePointAt()</code>  方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">is32Bit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">is32Bit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"𠮷\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">is32Bit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h2 id=\"实例方法normalize\"><a class=\"anchor\" href=\"#实例方法normalize\">#</a> 实例方法：normalize ()</h2>\n<p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如 <code>Ǒ</code> （\\u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如 <code>O</code> （\\u004F）和 <code>ˇ</code> （\\u030C）合成 <code>Ǒ</code> （\\u004F\\u030C）。</p>\n<p>这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'\\u01D1'</span><span class=\"token operator\">===</span><span class=\"token string\">'\\u004F\\u030C'</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'\\u01D1'</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'\\u004F\\u030C'</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 2</span></pre></td></tr></table></figure><p>上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。</p>\n<p>ES6 提供字符串实例的 <code>normalize()</code>  方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'\\u01D1'</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'\\u004F\\u030C'</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>normalize</code>  方法可以接受一个参数来指定 <code>normalize</code>  的方式，参数的四个可选值如下。</p>\n<ul>\n<li><code>NFC</code> ，默认参数，表示 “标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓 “标准等价” 指的是视觉和语义上的等价。</li>\n<li><code>NFD</code> ，表示 “标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。</li>\n<li><code>NFKC</code> ，表示 “兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓 “兼容等价” 指的是语义上存在等价，但视觉上不等价，比如 “囍” 和 “喜喜”。（这只是用来举例， <code>normalize</code>  方法不能识别中文。）</li>\n<li><code>NFKD</code> ，表示 “兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'\\u004F\\u030C'</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NFC'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'\\u004F\\u030C'</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NFD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 2</span></pre></td></tr></table></figure><p>上面代码表示， <code>NFC</code>  参数返回字符的合成形式， <code>NFD</code>  参数返回字符的分解形式。</p>\n<p>不过， <code>normalize</code>  方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。</p>\n<h2 id=\"实例方法includes-startswith-endswith\"><a class=\"anchor\" href=\"#实例方法includes-startswith-endswith\">#</a> 实例方法：includes (), startsWith (), endsWith ()</h2>\n<p>传统上，JavaScript 只有 <code>indexOf</code>  方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p>\n<ul>\n<li><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串。</li>\n<li><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的头部。</li>\n<li><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>上面代码表示，使用第二个参数 <code>n</code>  时， <code>endsWith</code>  的行为与其他两个方法有所不同。它针对前 <code>n</code>  个字符，而其他两个方法针对从第 <code>n</code>  个位置直到字符串结束。</p>\n<h2 id=\"实例方法repeat\"><a class=\"anchor\" href=\"#实例方法repeat\">#</a> 实例方法：repeat ()</h2>\n<p><code>repeat</code>  方法返回一个新字符串，表示将原字符串重复 <code>n</code>  次。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"xxx\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hellohello\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"\"</span></pre></td></tr></table></figure><p>参数如果是小数，会被取整。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"nana\"</span></pre></td></tr></table></figure><p>如果 <code>repeat</code>  的参数是负数或者 <code>Infinity</code> ，会报错。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// RangeError</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// RangeError</span></pre></td></tr></table></figure><p>但是，如果参数是 0 到 - 1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到 - 1 之间的小数，取整以后等于 <code>-0</code> ， <code>repeat</code>  视同为 0。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"\"</span></pre></td></tr></table></figure><p>参数 <code>NaN</code>  等同于 0。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"\"</span></pre></td></tr></table></figure><p>如果 <code>repeat</code>  的参数是字符串，则会先转换成数字。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'na'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'na'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"nanana\"</span></pre></td></tr></table></figure><h2 id=\"实例方法padstartpadend\"><a class=\"anchor\" href=\"#实例方法padstartpadend\">#</a> 实例方法：padStart ()，padEnd ()</h2>\n<p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。 <code>padStart()</code>  用于头部补全， <code>padEnd()</code>  用于尾部补全。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'ababx'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'abax'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'xabab'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'xaba'</span></pre></td></tr></table></figure><p>上面代码中， <code>padStart()</code>  和 <code>padEnd()</code>  一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。</p>\n<p>如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'xxx'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'xxx'</span></pre></td></tr></table></figure><p>如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'abc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0123456789'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// '0123456abc'</span></pre></td></tr></table></figure><p>如果省略第二个参数，默认使用空格补全长度。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '   x'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'x   '</span></pre></td></tr></table></figure><p><code>padStart()</code>  的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'1'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0000000001\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'12'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0000000012\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'123456'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0000123456\"</span></pre></td></tr></table></figure><p>另一个用途是提示字符串格式。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'12'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYY-MM-DD'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"YYYY-MM-12\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'09-12'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYY-MM-DD'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"YYYY-09-12\"</span></pre></td></tr></table></figure><h2 id=\"实例方法trimstarttrimend\"><a class=\"anchor\" href=\"#实例方法trimstarttrimend\">#</a> 实例方法：trimStart ()，trimEnd ()</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbQ==\">ES2019</span> 对字符串实例新增了 <code>trimStart()</code>  和 <code>trimEnd()</code>  这两个方法。它们的行为与 <code>trim()</code>  一致， <code>trimStart()</code>  消除字符串头部的空格， <code>trimEnd()</code>  消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'  abc  '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"abc\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">trimStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"abc  \"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">trimEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"  abc\"</span></pre></td></tr></table></figure><p>上面代码中， <code>trimStart()</code>  只消除头部的空格，保留尾部的空格。 <code>trimEnd()</code>  也是类似行为。</p>\n<p>除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。</p>\n<p>浏览器还部署了额外的两个方法， <code>trimLeft()</code>  是 <code>trimStart()</code>  的别名， <code>trimRight()</code>  是 <code>trimEnd()</code>  的别名。</p>\n<h2 id=\"实例方法matchall\"><a class=\"anchor\" href=\"#实例方法matchall\">#</a> 实例方法：matchAll ()</h2>\n<p><code>matchAll()</code>  方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章。</p>\n<h2 id=\"实例方法replaceall\"><a class=\"anchor\" href=\"#实例方法replaceall\">#</a> 实例方法：replaceAll ()</h2>\n<p>历史上，字符串的实例方法 <code>replace()</code>  只能替换第一个匹配。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 'aa_bcc'</span></pre></td></tr></table></figure><p>上面例子中， <code>replace()</code>  只将第一个 <code>b</code>  替换成了下划线。</p>\n<p>如果要替换所有的匹配，不得不使用正则表达式的 <code>g</code>  修饰符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">b</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 'aa__cc'</span></pre></td></tr></table></figure><p>正则表达式毕竟不是那么方便和直观，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXJlcGxhY2VhbGw=\">ES2021</span> 引入了 <code>replaceAll()</code>  方法，可以一次性替换所有匹配。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 'aa__cc'</span></pre></td></tr></table></figure><p>它的用法与 <code>replace()</code>  相同，返回一个新字符串，不会改变原字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>searchValue<span class=\"token punctuation\">,</span> replacement<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面代码中， <code>searchValue</code>  是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有 <code>g</code>  修饰符）。</p>\n<p>如果 <code>searchValue</code>  是一个不带有 <code>g</code>  修饰符的正则表达式， <code>replaceAll()</code>  会报错。这一点跟 <code>replace()</code>  不同。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">b</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">b</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面例子中， <code>/b/</code>  不带有 <code>g</code>  修饰符，会导致 <code>replaceAll()</code>  报错。</p>\n<p><code>replaceAll()</code>  的第二个参数 <code>replacement</code>  是一个字符串，表示替换的文本，其中可以使用一些特殊字符串。</p>\n<ul>\n<li><code>$&amp;</code> ：匹配的子字符串。</li>\n<li><code>$</code>  `：匹配结果前面的文本。</li>\n<li><code>$'</code> ：匹配结果后面的文本。</li>\n<li><code>$n</code> ：匹配成功的第 <code>n</code>  组内容， <code>n</code>  是从 1 开始的自然数。这个参数生效的前提是，第一个参数必须是正则表达式。</li>\n<li><code>$$</code> ：指代美元符号 <code>$</code> 。</li>\n</ul>\n<p>下面是一些例子。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// $&amp; 表示匹配的字符串，即 `b` 本身</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 所以返回结果与原字符串一致</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'abbc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$&amp;'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 'abbc'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// $` 表示匹配结果之前的字符串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 对于第一个 `b`，$`指代`a`</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 对于第二个 `b`，$`指代`ab`</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token string\">'abbc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$`'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 'aaabc'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// $' 表示匹配结果之后的字符串</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 对于第一个 `b`，$' 指代 `bc`</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 对于第二个 `b`，$' 指代 `c`</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token string\">'abbc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">$'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 'abccc'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// $1 表示正则表达式的第一个组匹配，指代 `ab`</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// $2 表示正则表达式的第二个组匹配，指代 `bc`</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token string\">'abbc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(ab)(bc)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$2$1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 'bcab'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// $$ 指代 $</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token string\">'abc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$$'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 'a$c'</span></pre></td></tr></table></figure><p><code>replaceAll()</code>  的第二个参数 <code>replacement</code>  除了为字符串，也可以是一个函数，该函数的返回值将替换掉第一个参数 <code>searchValue</code>  匹配的文本。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'aabbcc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 'aa__cc'</span></pre></td></tr></table></figure><p>上面例子中， <code>replaceAll()</code>  的第二个参数是一个函数，该函数的返回值会替换掉所有 <code>b</code>  的匹配。</p>\n<p>这个替换函数可以接受多个参数。第一个参数是捕捉到的匹配内容，第二个参数捕捉到是组匹配（有多少个组匹配，就有多少个对应的参数）。此外，最后还可以添加两个参数，倒数第二个参数是捕捉到的内容在整个字符串中的位置，最后一个参数是原字符串。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'123abc456'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\d+)([a-z]+)(\\d+)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">replacer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">match<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' - '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 123 - abc - 456</span></pre></td></tr></table></figure><p>上面例子中，正则表达式有三个组匹配，所以 <code>replacer()</code>  函数的第一个参数 <code>match</code>  是捕捉到的匹配内容（即字符串 <code>123abc456</code> ），后面三个参数 <code>p1</code> 、 <code>p2</code> 、 <code>p3</code>  则依次为三个组匹配。</p>\n<h1 id=\"正则的扩展\"><a class=\"anchor\" href=\"#正则的扩展\">#</a> 正则的扩展</h1>\n<p>内容过多不易记、请直接看阮一峰老师的笔记<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI2RvY3MvcmVnZXg=\"> ES6 正则的扩展</span></p>\n<h1 id=\"数值的扩展\"><a class=\"anchor\" href=\"#数值的扩展\">#</a> 数值的扩展</h1>\n<p>新增内容较多、用到的时候可以自行查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI2RvY3MvbnVtYmVy\">数值的扩展</span></p>\n<blockquote>\n<ol>\n<li>二进制和八进制表示法</li>\n<li>Number.isFinite(), Number.isNaN()</li>\n<li>Number.parseInt(), Number.parseFloat()</li>\n<li>Number.isInteger()</li>\n<li>Number.EPSILON</li>\n<li>安全整数和 Number.isSafeInteger ()</li>\n<li>指数运算符</li>\n<li>BigInt 数据类型</li>\n</ol>\n</blockquote>\n<h1 id=\"promise-对象\"><a class=\"anchor\" href=\"#promise-对象\">#</a> Promise 对象</h1>\n<h2 id=\"promise-的含义\"><a class=\"anchor\" href=\"#promise-的含义\">#</a> Promise 的含义</h2>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案 —— 回调函数和事件 —— 更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了 <code>Promise</code>  对象。</p>\n<p>所谓 <code>Promise</code> ，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n<p><code>Promise</code>  对象有以下两个特点。</p>\n<p>（1）对象的状态不受外界影响。 <code>Promise</code>  对象代表一个异步操作，有三种状态： <code>pending</code> （进行中）、 <code>fulfilled</code> （已成功）和 <code>rejected</code> （已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 <code>Promise</code>  这个名字的由来，它的英语意思就是 “承诺”，表示其他手段无法改变。</p>\n<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。 <code>Promise</code>  对象的状态改变，只有两种可能：从 <code>pending</code>  变为 <code>fulfilled</code>  和从 <code>pending</code>  变为 <code>rejected</code> 。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对 <code>Promise</code>  对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n<p>注意，为了行文方便，本章后面的 <code>resolved</code>  统一只指 <code>fulfilled</code>  状态，不包含 <code>rejected</code>  状态。</p>\n<p>有了 <code>Promise</code>  对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外， <code>Promise</code>  对象提供统一的接口，使得控制异步操作更加容易。</p>\n<p><code>Promise</code>  也有一些缺点。首先，无法取消 <code>Promise</code> ，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数， <code>Promise</code>  内部抛出的错误，不会反应到外部。第三，当处于 <code>pending</code>  状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>\n<p>如果某些事件不断地反复发生，一般来说，使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbA==\">Stream</span> 模式是比部署 <code>Promise</code>  更好的选择。</p>\n<h2 id=\"基本用法\"><a class=\"anchor\" href=\"#基本用法\">#</a> 基本用法</h2>\n<p>ES6 规定， <code>Promise</code>  对象是一个构造函数，用来生成 <code>Promise</code>  实例。</p>\n<p>下面代码创造了一个 <code>Promise</code>  实例。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ... some code</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 异步操作成功 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Promise</code>  构造函数接受一个函数作为参数，该函数的两个参数分别是 <code>resolve</code>  和 <code>reject</code> 。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p>\n<p><code>resolve</code>  函数的作用是，将 <code>Promise</code>  对象的状态从 “未完成” 变为 “成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去； <code>reject</code>  函数的作用是，将 <code>Promise</code>  对象的状态从 “未完成” 变为 “失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>\n<p><code>Promise</code>  实例生成以后，可以用 <code>then</code>  方法分别指定 <code>resolved</code>  状态和 <code>rejected</code>  状态的回调函数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// success</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// failure</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>then</code>  方法可以接受两个回调函数作为参数。第一个回调函数是 <code>Promise</code>  对象的状态变为 <code>resolved</code>  时调用，第二个回调函数是 <code>Promise</code>  对象的状态变为 <code>rejected</code>  时调用。这两个函数都是可选的，不一定要提供。它们都接受 <code>Promise</code>  对象传出的值作为参数。</p>\n<p>下面是一个 <code>Promise</code>  对象的简单例子。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">,</span> <span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中， <code>timeout</code>  方法返回一个 <code>Promise</code>  实例，表示一段时间以后才会发生的结果。过了指定的时间（ <code>ms</code>  参数）以后， <code>Promise</code>  实例的状态变为 <code>resolved</code> ，就会触发 <code>then</code>  方法绑定的回调函数。</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Es6",
                "Es6"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/JavaScript/JavaScript/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/JavaScript/JavaScript/",
            "title": "JavaScript",
            "date_published": "2021-03-28T16:00:00.000Z",
            "content_html": "<h1 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<p>看阮一峰老师的笔记。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYXZhc2NyaXB0LnJ1YW55aWZlbmcuY29tL2dyYW1tYXIvYmFzaWMuaHRtbA==\">基本语法</span></p>\n<h1 id=\"dom概述\"><a class=\"anchor\" href=\"#dom概述\">#</a> DOM 概述</h1>\n<p>（DOM 是操作网页的，而 BOM 是操作浏览器的）</p>\n<ol>\n<li>\n<p>DOM 是 JavaScript 操作网页的接口，全称为 “文档对象模型”，他的作用是将一个网页转为一个 JavaScript 对象，从而可以用脚本语言进行各种操作。（增删内容）。</p>\n</li>\n<li>\n<p>DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。</p>\n<ul>\n<li><strong>Document</strong>：整个文档树的顶层节点</li>\n<li><strong>DocumentType：doctype</strong> 标签（比如 <code>&lt;!DOCTYPE html&gt;</code> ）</li>\n<li>Element：网页的各种 HTML 标签（比如 <code>&lt;body&gt;</code> 、 <code>&lt;a&gt;</code>  等 `）</li>\n<li><strong>Attr</strong>：网页元素的属性（比如 class=&quot;right&quot;）</li>\n<li><strong>Text</strong>：标签之间或标签包含的文本</li>\n<li><strong>Comment</strong>：注释</li>\n<li><strong>DocumentFragment</strong>：文档的片段</li>\n</ul>\n</li>\n<li>\n<p><strong>节点树</strong></p>\n<p>一个文档的所有节点，按照所在的层级，可以抽象成一种树状结构。这种树状结构就是 DOM 树。它有一个顶层节点，下一层都是顶层节点的子节点，然后子节点又有自己的子节点，就这样层层衍生出一个金字塔结构，又像一棵树。浏览器原生提供 document 节点，代表整个文档。</p>\n</li>\n<li>\n<p><strong>document</strong>--- 整个文档树</p>\n<p>文档的第一层有两个节点，第一个是文档类型节点（&lt;!doctype html&gt;），第二个是 HTML 网页的顶层容器标签 <code>&lt;html&gt;</code> 。后者构成了树结构的根节点（root node），其他 HTML 标签节点都是它的下级节点。</p>\n<p>除了根节点，其他节点都有三种层级关系。</p>\n<ul>\n<li>\n<p>父节点关系（<strong>parentNode</strong>）：直接的上级节点</p>\n</li>\n<li>\n<p>子节点关系（<strong>childNodes</strong>）：直接的下级节点</p>\n</li>\n<li>\n<p>同级节点关系（<strong>sibling</strong>）：拥有同一个父节点的节点</p>\n<p>DOM 提供操作接口，用来获取这三种关系的节点。比如，子节点接口包括 firstChild（第一个子节点）和 lastChild（最后一个子节点）等属性，同级节点接口包括 nextSibling（紧邻在后的那个同级节点）和 previousSibling（紧邻在前的那个同级节点）属性。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"dom查询\"><a class=\"anchor\" href=\"#dom查询\">#</a> DOM 查询</h1>\n<ol>\n<li><strong>childNodes</strong>;<br>\n 表示当前节点的所有子节点。（节点，包含空格、换行）</li>\n<li><strong>children</strong>;<br>\n 表示可以获取当前元素的所有子元素。（元素，标签，经常用）</li>\n<li><strong>firstChild</strong>;<br>\n 表示当前节点的第一个子节点。</li>\n<li><strong>lastChild</strong>；<br>\n表示当前节点的最后一个子节点。</li>\n<li><strong>parentNode</strong>；<br>\n表示当前节点的父节点。</li>\n<li><strong>previousSibling</strong>；<br>\n表示当前节点的前一个兄弟节点。</li>\n<li><strong>nextSibling</strong>；<br>\n表示当前节点的后一个兄弟节点。</li>\n</ol>\n<h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<p>JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。</p>\n<ol>\n<li>\n<p>数值（number）：整数和小数</p>\n</li>\n<li>\n<p>字符串（string）：文本</p>\n</li>\n<li>\n<p>布尔值（boolean）：true 和 false</p>\n</li>\n<li>\n<p>undefined：表示未定义或不存在。</p>\n</li>\n<li>\n<p>null：表示空值。</p>\n</li>\n<li>\n<p>对象：（objeck）各种值组成的集合。</p>\n<p>其中：在对象中又分为<br>\n（1）狭义的对象（object）<br>\n（2）数组（array）<br>\n（3）函数（function）</p>\n</li>\n</ol>\n<p>逻辑运算符<br>\n与 &amp;&amp;<br>\n 或 ||<br>\n 非 ！</p>\n<p>相等运算符<br>\n === 绝对相等<br>\n == 等于<br>\n！=  不等于</p>\n<h1 id=\"对象\"><a class=\"anchor\" href=\"#对象\">#</a> 对象</h1>\n<ol>\n<li>\n<p>对象<br>\n简单来说，对象就是一组键值对。</p>\n<p>键名：属性名<br>\n键值：属性值<br>\n对象可以是一个方法</p>\n<p>例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function-variable function\">p</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//2</span></pre></td></tr></table></figure></li>\n<li>\n<p>属性的操作<br>\n读取属性：<br>\n采用点运算符和方括号运算符来读取属性 中的值。点运算符和方括号运算符也可以用来赋值。</p>\n<p>查看一个对象本身的所有属性可以用<br>\n object.keys (对象名)</p>\n<p>delete 命令用于删除对象的属性。删除成功后会返回 true。<br>\n例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> p：<span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>p。</pre></td></tr></table></figure><p>注：删除一个不存在的属性时，delete 不会报错。而且也是返回一个 true。</p>\n</li>\n<li>\n<p>in 运算符<br>\n in 运算符是检查对象是否包含某个属性，注意（检查的是属性，不是属性值）如果包含就返回 ture。<br>\n例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> p：<span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>‘p’<span class=\"token keyword\">in</span> obj</pre></td></tr></table></figure><p>此时，控制台返回一个 true</p>\n<p>for ...in 循环。<br>\nfor ...in 循环用来遍历一个对象的全部属性值。<br>\n例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>a：<span class=\"token number\">1</span>，b：<span class=\"token number\">2</span>，c：<span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> （<span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> obj）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> obj<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时控制台输出 1,2,3</p>\n</li>\n</ol>\n<h1 id=\"对象的继承\"><a class=\"anchor\" href=\"#对象的继承\">#</a> 对象的继承</h1>\n<p>面向对象编程很重要的一个方面，就是对象的继承。A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于代码的复用是非常有用的。大部分编程语言都是通过类（class）实现对象的继承。<br>\njs 继承不是通过（class）而是通过原型对象（prototype）实现继承的。</p>\n<ol>\n<li>\n<p>constructor 属性<br>\n prototype 对象有一个 constructor 属性，默认指向 prototype 对象所在的构造函数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">P</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> <span class=\"token constant\">P</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>由于 constructor 属性定义在 prototype 对象上面，意味着可以被所有实例对象继承。</p>\n</li>\n</ol>\n<h1 id=\"面向对象编程\"><a class=\"anchor\" href=\"#面向对象编程\">#</a> 面向对象编程</h1>\n<ol>\n<li>\n<p>对象是什么？</p>\n<ol>\n<li>面向对象编程。缩写为 OOP，是目前主流的编程范式。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</li>\n<li>每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。对象可以复用，通过继承机制还可以定制。因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</li>\n<li>对象是单个实物的抽象。一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</li>\n<li>对象是一个容器，封装了属性（property）和方法（method）。属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为 animal 对象，使用 “属性” 记录具体是那一种动物，使用 “方法” 表示动物的某种行为（奔跑、捕猎、休息等等）。</li>\n</ol>\n</li>\n<li>\n<p>构造函数。</p>\n<p>​\t\t面向对象编程的第一步，就是要生成对象。前面说过，对象是单个实物的抽象。通常需要一个模板，表示某一类实物的共同特征，然后对象根据这个模板生成。<br>\n​\t\t典型的面向对象编程语言（比如 C++ 和 Java），都有 “类”（class）这个概念。所谓 “类” 就是对象的模板，对象就是 “类” 的实例。但是，JavaScript 语言的对象体系，不是基于 “类” 的，而是基于构造函数（constructor）和原型链（prototype）。<br>\n​\t\tJavaScript 语言使用构造函数（constructor）作为对象的模板。所谓” 构造函数”，就是专门用来生成实例对象的函数。它就是对象的模板，描述实例对象的基本结构。一个构造函数，可以生成多个实例对象，这些实例对象都有相同的结构造函数就是一个普通的函数，但是有自己的特征和用法。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Vehicle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span>（）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中，Vehicle 就是构造函数。为了与普通函数区别，构造函数名字的第一个字母通常大写。</p>\n<p>构造函数的两个特点：</p>\n<ul>\n<li>函数体内部使用了 this 关键字，代表了所要生成的对象的实例。</li>\n<li>生成对象的时候，必须使用 new 命令。</li>\n</ul>\n</li>\n<li>\n<p>new 命令的原理</p>\n<p>使用 new 命令时，他后面的函数依次执行下面的步骤。</p>\n<ul>\n<li>（1）创建一个空对象，作为将要返回的对象实例。</li>\n<li>（2）将这个空对象的原型，指向构造函数的 prtotype 属性。</li>\n<li>（3）将这个空对象赋值给函数内部的 this 关键字。</li>\n<li>（4）开始执行构造函数内部的代码。</li>\n</ul>\n<p>也就是说，构造函数内部，this 指的是一个新生成的空对象，所有针对 this 的操作，都会发生在这个空对象上。构造函数之所以叫 “构造函数”，就是说这个函数的目的，就是操作一个空对象（即 this 对象），将其 “构造” 为需要的样子。</p>\n</li>\n</ol>\n<h1 id=\"bom对象\"><a class=\"anchor\" href=\"#bom对象\">#</a> BOM 对象</h1>\n<p>浏览器对象模型，BOM 可以使我们通过 js 来操作浏览器，在 BOM 中提供一组对象，用来完成对浏览器的操作</p>\n<ol>\n<li>\n<p><strong>window</strong></p>\n<p>代表的是整个浏览器的窗口，同时 window 也是网页中的全局对象。</p>\n</li>\n<li>\n<p><strong>Navigator</strong></p>\n<p>代表的是当前浏览器的信息，通过该对象可以来识别不同的浏览器。</p>\n</li>\n<li>\n<p><strong>Location</strong></p>\n<p>代表当前浏览器的地址信息，通过 Location 可以获取地址栏信息，或者操作浏览器跳转页面</p>\n</li>\n<li>\n<p><strong>History</strong></p>\n<p>代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录，由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器想前或者像后。而且该操作只在档次访问时有效。（关闭在打开就没有效果了）</p>\n</li>\n</ol>\n<h1 id=\"date对象\"><a class=\"anchor\" href=\"#date对象\">#</a> Date 对象</h1>\n<p>Date 对象是 JavaScript 原生的时间库。它以国际标准时间（UTC）1970 年 1 月 1 日 00:00:00 作为时间的零点，可以表示的时间范围是前后各 1 亿天（单位为毫秒）。</p>\n<ol>\n<li>\n<p>用法</p>\n<p>Date 对象可以作为普通函数直接调用，返回一个代表当前时间的字符串。Date（）</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// \"Tue Dec 01 2015 09:34:43 GMT+0800 (CST)\"</pre></td></tr></table></figure><p>无论有没有参数，返回的总是当前时间。</p>\n</li>\n<li>\n<p>实例方法</p>\n<p>Date 的实例对象，有几十个自己的方法，除了<strong> valueOf</strong> 和<strong> toString</strong>，可以分为以下三类。</p>\n<ol>\n<li>to 类：从 Date 对象返回一个字符串，表示指定时间。</li>\n<li>get 类：获取 Date 对象的日期和时间。</li>\n<li>set 类：设置 Date 对象的日期和时间。</li>\n</ol>\n</li>\n<li>\n<p>拿到当前时间打印出来，输出在页面显示。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"time\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t现在还不是时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\twindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t<span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">function</span> <span class=\"token function\">times</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> uu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> year <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> yue <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> day <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> shi <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> fen <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> miao <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> zhou <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//\t\t\tconsole.log(zhou)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> arr_week <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期日\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期一\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期二\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"星期六\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tweek <span class=\"token operator\">=</span> arr_week<span class=\"token punctuation\">[</span>zhou<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>yue<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\tyue<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token operator\">+</span>yue</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>miao<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\tmiao <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token operator\">+</span>miao</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fen<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\tfen <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token operator\">+</span>fen</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token keyword\">var</span> time <span class=\"token operator\">=</span> <span class=\"token string\">\"现在是\"</span><span class=\"token operator\">+</span>year<span class=\"token operator\">+</span><span class=\"token string\">\"年\"</span><span class=\"token operator\">+</span>yue<span class=\"token operator\">+</span><span class=\"token string\">\"月\"</span><span class=\"token operator\">+</span>day<span class=\"token operator\">+</span><span class=\"token string\">\"日\"</span><span class=\"token operator\">+</span>shi<span class=\"token operator\">+</span><span class=\"token string\">\"点-\"</span><span class=\"token operator\">+</span>fen<span class=\"token operator\">+</span><span class=\"token string\">\"分-\"</span><span class=\"token operator\">+</span>miao<span class=\"token operator\">+</span><span class=\"token string\">\"秒-\"</span><span class=\"token operator\">+</span>week</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tuu<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"math对象\"><a class=\"anchor\" href=\"#math对象\">#</a> Math 对象</h1>\n<ol>\n<li>\n<p><code>Math静态方法：</code> <br>\nMath 对象提供以下一些静态方法。<br>\n<strong>Math.abs()</strong>：绝对值<br>\n<strong> Math.ceil ()</strong>：向上取整<br>\n<strong> Math.floor ()</strong>：向下取整<br>\n<strong> Math.max ()</strong>：最大值<br>\n<strong> Math.min ()</strong>：最小值<br>\n<strong> Math.pow ()</strong>：幂运算<br>\n<strong> Math.sqrt ()</strong>：平方根<br>\n<strong> Math.log ()</strong>：自然对数<br>\n<strong> Math.exp ()</strong>：e 的指数<br>\n<strong> Math.round ()</strong>：四舍五入<br>\n<strong> Math.random ()</strong>：随机数</p>\n</li>\n<li>\n<p><strong>Math.abs</strong><br>\nMath.abs 方法返回参数值的绝对值。</p>\n<p>例子：</p>\n<p>Math.abs (1) \t返回： 1<br>\nMath.abs (-1)\t返回： 1</p>\n</li>\n<li>\n<p><strong>Math.max( )</strong>，<strong>Math.min( )</strong>:<br>\nMath.max 方法返回参数之中最大的那个值，Math.min 返回最小的那个值。如果参数为空，Math.min 返回 Infinity, Math.max 返回 - Infinity。</p>\n<p>例子：</p>\n<blockquote>\n<p>Math.max(2, -1, 5)</p>\n<p>返回： 5<br>\nMath.min(2, -1, 5)</p>\n<p>返回： -1<br>\nMath.min()</p>\n<p>返回：Infinity<br>\nMath.max()</p>\n<p>返回： -Infinity</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Math.floor（）</strong>，<strong>Math.ceil（）</strong></p>\n<blockquote>\n<ol>\n<li>\n<p>Math.floor 方法返回小于参数值的最大整数（地板值）。</p>\n<p>Math.floor(3.2)</p>\n<p>返回： 3<br>\nMath.floor(-3.2)</p>\n<p>返回： -4</p>\n</li>\n<li>\n<p>Math.ceil 方法返回大于参数值的最小整数（天花板值）。</p>\n<p>Math.ceil(3.2)</p>\n<p>返回： 4<br>\nMath.ceil(-3.2)</p>\n<p>返回： -3<br>\n 这两个方法可以结合起来，实现一个总是返回数值的整数部分的函数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ToInteger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的方法传入以下参数得到的返回值如下：</p>\n<p>ToInteger (3.2)\t返回： 3<br>\nToInteger (3.5)\t返回： 3<br>\nToInteger (3.8)\t返回： 3<br>\nToInteger (-3.2)\t返回：-3<br>\nToInteger (-3.5)\t返回： -3<br>\nToInteger (-3.8)\t返回： -3</p>\n<p>上面代码中，不管正数或负数，ToInteger 函数总是返回一个数值的整数部分。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p><strong>Math.round（）</strong><br>\nMath.round（）方法用于四舍五入。</p>\n<p>例子：</p>\n<p>Math.round (0.1)\t返回：0<br>\nMath.round (0.5) \t返回： 1<br>\nMath.round (0.6) \t返回： 1</p>\n<p>等同于<br>\n Math.floor (x + 0.5)<br>\n 注意，它对负数的处理（主要是对 0.5 的处理）。</p>\n<p>Math.round (-1.1)\t返回： -1<br>\nMath.round (-1.5)\t返回： -1<br>\nMath.round (-1.6)\t返回： -2</p>\n</li>\n<li>\n<p><strong>Math.sqrt（）</strong><br>\nMath.sqrt 方法返回参数值的平方根。如果参数是一个负值，则返回 NaN。</p>\n<p>Math.sqrt (4) \t返回： 2<br>\nMath.sqrt (-4) \t返回：NaN</p>\n</li>\n<li>\n<p><strong>Math.random（）</strong></p>\n<p>Math.random（）返回 0 到 1 之间的一个伪随机数，可能等于 0，但是一定小于 1。</p>\n<p>Math.random（）返回： 0.7151307314634323</p>\n<ul>\n<li>任意范围内的随机数生成函数如下。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getRandomArbitrary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token punctuation\">,</span> max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>getRandomArbitrary (1.5, 6.5)\t返回：2.4942810038223864</p>\n<hr>\n<ul>\n<li>任意范围的随机整数生成函数如下。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getRandomInt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token punctuation\">,</span> max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>getRandomInt (1, 6) \t返回： 5</p>\n<ul>\n<li>返回随机字符的例子如下：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">random_str</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">var</span> <span class=\"token constant\">ALPHABET</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token constant\">ALPHABET</span> <span class=\"token operator\">+=</span> <span class=\"token string\">'abcdefghijklmnopqrstuvwxyz'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token constant\">ALPHABET</span> <span class=\"token operator\">+=</span> <span class=\"token string\">'0123456789-_'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">var</span> rand <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token constant\">ALPHABET</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    str <span class=\"token operator\">+=</span> <span class=\"token constant\">ALPHABET</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">,</span> rand <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>random_str (6) \t返回：&quot;NdQKOr&quot;<br>\n 上面代码中，random_str 函数接受一个整数作为参数，返回变量 ALPHABET 内的随机字符所组成的指定长度的字符串。</p>\n</li>\n</ol>\n<h1 id=\"object对象\"><a class=\"anchor\" href=\"#object对象\">#</a> Object 对象</h1>\n<p>**Object 的实例方法：** 所谓的实例方法就是在定义 Object 原型对象 Object.prototype 上的方法。他可以被 Object 实例直接使用。</p>\n<p><strong>instanceof</strong> 运算符用来验证，一个对象是否为指定的构造函数的实例。</p>\n<p><strong>Object ( )</strong> 本身是一个函数，可以当作工具方法使用，将任意值转为对象。这个方法常用于保证某个值一定是对象。如果参数为空，（或者为 undefined 和 null），Object（）返回一个空对象。</p>\n<p>属性的描述对象。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  valeu：<span class=\"token number\">123</span>，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  writable：<span class=\"token boolean\">false</span>，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  enumerable：<span class=\"token boolean\">true</span>，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  configurable：<span class=\"token boolean\">false</span>，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">get</span>：<span class=\"token keyword\">undefined</span>，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">set</span>：<span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>属性描述对象提供 6 个属性；</strong></p>\n<ol>\n<li><code>value</code> <br>\nvalue 是该属性的属性值，默认为 undefined。</li>\n<li><code>writable</code> <br>\nwritable 是一个布尔值，表示属性值（value）是否可以改变（即是否可以写），默认是 true。</li>\n<li><code>enumerable</code>  是一个布尔值，表示该属性是否可遍历，默认为 true。如果设为 false，会使得某些操作（比如 for...in 循环、Object.keys ()）跳过该属性。</li>\n<li><code>configurable</code>  是一个布尔值，表示可配置性，默认为 true。如果设为 false，将阻止某些操作改写该属性，比如无法删除该属性，也不得改变该属性的属性描述对象（value 属性除外）。<br>\n也就是说，configurable 属性控制了属性描述对象的可写性。</li>\n<li><code>get</code> <br>\nget 是一个函数，表示该属性的取值函数（getter），默认为 undefined。</li>\n<li><code>set</code> <br>\nset 是一个函数，表示该属性的存值函数（setter），默认为 undefined。</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"promise对象\"><a class=\"anchor\" href=\"#promise对象\">#</a> Promise 对象</h1>\n<ol>\n<li>\n<p>什么是 Promise。</p>\n<p>Promise 对象是 JavaScript 的异步操作解决方案，为异步操作提供统一接口。它起到代理作用（proxy），充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口。Promise 可以让异步操作写起来，就像在写同步操作的流程，而不必一层层地嵌套回调函数。总的来说，Promise 就是解决异步操作的解决方法。首先，Promise 是一个对象，也是一个构造函数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 异步代码...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面代码中，Promise 构造函数接受一个回调函数 f1 作为参数，f1 里面是异步操作的代码。然后，返回的 p1 就是一个 Promise 实例。Promise 的设计思想是，所有异步任务都返回一个 Promise 实例。Promise 实例有一个 then 方法，用来指定下一步的回调函数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，f1 的异步操作执行完成，就会执行 f2。</p>\n</li>\n<li>\n<p>Promise 对象的状态</p>\n<p>Promise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。</p>\n<ol>\n<li>\n<p>异步操作未完成（pending）</p>\n</li>\n<li>\n<p>异步操作成功（fulfilled）</p>\n</li>\n<li>\n<p>异步操作失败（rejected）</p>\n<p>上面三种状态里面，fulfilled 和 rejected 合在一起称为 resolved（已定型）。这三种状态的变化途径只有两种。</p>\n<ul>\n<li>从 “未完成” 到 “成功”</li>\n<li>从 “未完成” 到 “失败” 所以，异步操作，要嘛就是成功，要嘛就是失败。</li>\n</ul>\n<p>如果成功：Promise 实例传回一个值（value），状态为 fulfilled。<br>\n如果失败：Promise 实例抛出一个错误（error），状态为 rejected。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>Promise 构造函数</p>\n<p>JavaScript 提供原生的 Promise 构造函数，用来生成 Promise 实例。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 异步操作成功 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 异步操作失败 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。它们是两个函数，由 JavaScript 引擎提供，不用自己实现。</p>\n<p><strong>resolve 函数的作用是</strong>，将 Promise 实例的状态从 “未完成” 变为 “成功”（即从 pending 变为 fulfilled），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。<br>\n<strong>reject 函数的作用是</strong>，将 Promise 实例的状态从 “未完成” 变为 “失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>\n</li>\n<li>\n<p>Promise.protoytype.then()  <code>下面的p2中reject为什么要加new关键字？？？？？搞懂以后删除此</code></p>\n<p>Promise 实例的 then 方法，用来添加回调函数。<br>\nthen 方法可以接受两个回调函数，第一个是异步操作成功时（变为 fulfilled 状态）的回调函数，第二个是异步操作失败（变为 rejected）时的回调函数（该参数可以省略）。一旦状态改变，就调用相应的回调函数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// \"成功\"，如果 p1 返回的是成功，那么 then 调用成功的方法。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'失败'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ????</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// Error: 失败，如果 p2 返回的是失败，则调用失败的方法。</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"this关键字\"><a class=\"anchor\" href=\"#this关键字\">#</a> this 关键字</h1>\n<p><strong>this</strong> 可以用在构造函数之中，表示实例对象。除此之外，this 还可以用在别的场合。但是不管事什么场合，this 都有一个共同点：他总是返回一个对象。</p>\n<ol>\n<li>\n<p>涵义</p>\n<p>简单来说：this 就是属性或方法 “当前” 所在的对象。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">describe</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'姓名：'</span><span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// \"姓名：张三\"</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"age\"</span> size<span class=\"token operator\">=</span><span class=\"token number\">3</span> onChange<span class=\"token operator\">=</span><span class=\"token string\">\"validate(this, 18, 99);\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> lowval<span class=\"token punctuation\">,</span> hival</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> lowval<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">></span> hival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid Value!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中，this.name 表示 name 属性所在的那个对象。由于 this.name 是在 describe 方法中调用，而 describe 方法所在的当前对象是 person，因此 this 指向 person，<span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMueG4tLW5hbWVwZXJzb24tbTE0c2kzN2cubmFtZQ==\">this.name 就是 person.name</span>。<br>\n总结一下，JavaScript 语言之中，一切皆对象，运行环境也是对象，所以函数都是在某个对象之中运行，this 就是函数运行时所在的对象（环境）。这本来并不会让用户糊涂，但是 JavaScript 支持运行环境动态切换，也就是说，this 的指向是动态的，没有办法事先确定到底指向哪个对象，这才是最让初学者感到困惑的地方。</p>\n</li>\n<li>\n<p>实质</p>\n<p>this 的设计目的就是在函数体内部，指代函数当前的运行环境。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中，函数体里面的 this.x 就是指当前运行环境的 x。</p>\n</li>\n<li>\n<p>使用场合</p>\n<ul>\n<li>全局环境使用 this，他指的就是顶层对象 window。</li>\n<li>构造函数，构造函数中的 this，指的是实例对象。</li>\n</ul>\n</li>\n<li>\n<p>避免多层 this</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function-variable function\">f1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>o<span class=\"token punctuation\">.</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// Object</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// Object</span></pre></td></tr></table></figure><p>上面代码定义了变量 that，固定指向外层的 this，然后在内层使用 that，就不会发生 this 指向的改变。事实上，使用一个变量固定 this 的值，然后内层函数调用这个变量，是非常常见的做法，请务必掌握。内层的 this 不能指向外层的对象。而是指向定层的对象。解决方法就是上面的例子。使用一个变量接受 this，把当前的 this 赋值给声明的这个变量。就可以在下层运用这个变量来获取外层的对象了。</p>\n</li>\n<li>\n<p>绑定 this 的方法</p>\n<p>javascript 提供了 <strong>call</strong>、<strong>apply</strong>、<strong>bind</strong> 这三种方法，来切换固定 this 的指向。</p>\n<ol>\n<li>call（）</li>\n</ol>\n<p>函数实例的 call 方法，可以指定函数内部 this 的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数。call 方法的参数，应该是一个对象。如果参数为空、null 和 undefined，则默认传入全局对象。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> n<span class=\"token operator\">:</span> <span class=\"token number\">456</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 456</span></pre></td></tr></table></figure><p>上面代码中，a 函数中的 this 关键字，如果指向全局对象，返回结果为 123。如果使用 call 方法将 this 关键字指向 obj 对象，返回结果为 456。可以看到，如果 call 方法没有参数，或者参数为 null 或 undefined，则等同于指向全局对象。</p>\n<p>如果 call 方法的参数是一个原始值，那么这个原始值会自动转成对应的包装对象，然后传入 call 方法。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Number &#123;[[PrimitiveValue]]: 5&#125;</span></pre></td></tr></table></figure><p>上面代码中，call 的参数为 5，不是对象，会被自动转成包装对象（Number 的实例），绑定 f 内部的 this。<br>\ncall 的第一个参数就是 this 所要指向的那个对象，后面的参数则是函数调用时所需的参数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>上面代码中，call 方法指定函数 add 内部的 this 绑定当前环境（对象），并且参数为 1 和 2，因此函数 add 运行后得到 3。</p>\n<p><strong>总的来说</strong>：call 方法就是让 this 绑定到当前的方法中去。</p>\n<ol start=\"2\">\n<li>\n<p>apply（）</p>\n<p>apply 方法的第一个参数也是 this 所要指向的那个对象，如果设为 null 或 undefined，则等同于指定全局对象。第二个参数则是一个数组，该数组的所有成员依次作为参数，传入原函数。原函数的参数，在 call 方法中必须一个个添加，但是在 apply 方法中，必须以数组形式添加。</p>\n<p>例：找出数组中最大的元素<br>\n JavaScript 不提供找出数组最大元素的函数。结合使用 apply 方法和 Math.max 方法，就可以返回数组的最大元素。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 15</span></pre></td></tr></table></figure></li>\n<li>\n<p>bind（）</p>\n<p>bind () 方法用于将函数体内的 this 绑定到某个对象，然后返回一个新函数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>d<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1481869925657</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> print <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>getTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Uncaught TypeError: this is not a Date object.</span></pre></td></tr></table></figure><p>上面代码中，我们将 d.getTime () 方法赋给变量 print，然后调用 print () 就报错了。这是因为 getTime () 方法内部的 this，绑定 Date 对象的实例，赋给变量 print 以后，内部的 this 已经不指向 Date 对象的实例了。</p>\n<p>bind () 方法可以解决这个问题。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> print <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1481869925657</span></pre></td></tr></table></figure><p>上面代码中，bind () 方法将 getTime () 方法内部的 this 绑定到 d 对象，这时就可以安全地将这个方法赋值给其他变量了。</p>\n<p>bind 方法的参数就是所要绑定 this 的对象，下面是一个更清晰的例子。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">inc</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> func <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">inc</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>counter<span class=\"token punctuation\">.</span>count <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>上面代码中，counter.inc () 方法被赋值给变量 func。这时必须用 bind () 方法将 inc () 内部的 this，绑定到 counter，否则就会出错。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"定时器\"><a class=\"anchor\" href=\"#定时器\">#</a> 定时器</h1>\n<p>JavaScript 提供定时执行代码的功能，叫做定时器（timer），主要由 setTimeout () 和 setInterval () 这两个函数来完成。它们向任务队列添加定时任务。</p>\n<ol>\n<li>\n<p>setTimeout（）<br>\n<strong>setTimeout</strong> 函数用来指定某个函数或某段代码，在多少毫秒之后执行。它返回一个整数，表示定时器的编号，以后可以用来取消这个定时器。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> timerId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">|</span>code<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，<strong>setTimeout</strong> 函数接受两个参数，第一个参数 func|code 是将要推迟执行的函数名或者一段代码，第二个参数 delay 是推迟执行的毫秒数。</p>\n</li>\n<li>\n<p>setInterval（）</p>\n<p><strong>setInterval</strong> 函数的用法与<strong> setTimeout</strong> 完全一致，区别仅仅在于 setInterval 指定某个任务每隔一段时间就执行一次，也就是无限次的定时执行。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面代码中，每隔 1000 毫秒就输出一个 2，会无限运行下去，直到关闭当前窗口。</p>\n</li>\n<li>\n<p>clearTimeout ()，clearInterval () 关闭定时器</p>\n<p><strong>setTimeout</strong> 和<strong> setInterval</strong> 函数，都返回一个整数值，表示计数器编号。将该整数传入 clearTimeout 和 clearInterval 函数，就可以取消对应的定时器。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> id1 <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> id2 <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，回调函数 f 不会再执行了，因为两个定时器都被取消了。</p>\n</li>\n<li>\n<p>debounce 函数。（防止抖动）</p>\n<p>防止抖动，意思就是在多少时间内，发生重复的事情可以不触发。比如用户点击键盘，如果用户一直点击，就会造成事件的重复发生。可以让他多少时间，（就是多少秒之后再继续执行一次）</p>\n</li>\n</ol>\n<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<ol>\n<li>\n<p>概述</p>\n<ol>\n<li>javascript 有三种方法声明函数。</li>\n</ol>\n<ul>\n<li>\n<p>function 命令声明的代码区块，就是一个函数。function 命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。</p>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> print（s）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用函数：<strong>print()</strong>。函数名加上（）；</p>\n</li>\n</ul>\n</li>\n<li>\n<p>变量赋值的写法声明</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> print <span class=\"token operator\">=</span> funtion（s）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span>log（s）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>采用函数表达式声明函数时，function 命令后面不带有函数名。如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。<br>\n注：这种表达式声明的函数必须在语句的结尾加上分号，表示语句结束。而上面一种不需要在结尾加分号。</p>\n</li>\n<li>\n<p>构造函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span>（</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t‘x’<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">'return  x+y'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>）<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>因为这种声明方法不直观，所以用得很少。<br>\n如果一个函数被多次声明，后面的声明会覆盖前面的声明。<br>\n调用函数时，要使用圆括号。里面可以放置参数。</p>\n</li>\n<li>\n<p>函数的属性和方法</p>\n<ol>\n<li>\n<p>name 属性：返回函数的名字。</p>\n<p>如果是通过变量赋值定义的函数，那么，name 属性返回的是变量名。<strong>注：只有在变量的值是一个匿名函数的时候才会如此</strong>。在函数中，参数 <code>.name</code> 。就能在控制台打印出当前函数的 name。</p>\n<p>匿名函数：例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> （）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tf2<span class=\"token punctuation\">.</span>name  <span class=\"token comment\">// name = f2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>具名函数：例：注意：下面这个函数真正的函数名还是 f2，Myname 名字只能在函数内部可以用。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> Myname（）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tf2<span class=\"token punctuation\">.</span>name  <span class=\"token comment\">// name=Myname</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>length 属性</p>\n<p>函数的 length 属性返回函数预期传入的参数个数，即函数定义之中的参数个数。不管调用时候传入了多少个参数，length 属性值返回创建时小括号中的个数。</p>\n</li>\n<li>\n<p>toString（）</p>\n<p>toString（）方法，返回一个字符串。</p>\n<p>例：</p>\n<p>var a = 123：此时的 a 是 number 数字类型。<br>\ntoString（a）；返回一个 “123”</p>\n</li>\n<li>\n<p>函数的作用域</p>\n<p>在函数内部声明的变量叫局部变量，在函数外部声明的变量叫全局变量。函数的作用域是在 函数定义时的作用域，而不是在调用时的作用域。</p>\n</li>\n<li>\n<p>参数</p>\n<p>函数运行的时候，有时候需要提供外部的数据，不同的外部数据会得到不同的结果。这种外部数据就叫做参数。</p>\n<p>例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> square （x）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>x；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>square（2）；在调用函数时，传入一个 2 作为参数，返回的结果就是 2*2=4<br>\nsquare（3）；返回的结果是 9.</p>\n</li>\n<li>\n<p>arguments</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span>（a，b）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\targuments<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\targuments<span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面的代码中，函数 f（）调用时传入的参数，在函数内部被修改成 3 和 2</p>\n</li>\n<li>\n<p>闭包</p>\n<p>定义在一个函数内部的函数。特点：就是它可以记住诞生的环境。在本质上，闭包就是将函数别不核函数外部连接起来的一座桥梁。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"事件的冒泡\"><a class=\"anchor\" href=\"#事件的冒泡\">#</a> 事件的冒泡</h1>\n<p>事件的冒泡就是点击一个最上面的（z-index 最大）的 div。触发事件以后，在他之后的 div（z-index 第二个）的事件也会触发。还有最大的一个 div（z-index 最小的）事件也会触发</p>\n<p>冒泡：事件的向上传导</p>\n<p>例：一个 span 标签上的 onclick，触发一个 p 标签上的 onclick，触发一个 div 上的 onclick。。。。。。<br>\n切触发的是相同的时间。如，鼠标点击事件，就只冒泡点击事件。如鼠标移动事件就只触发移动事件。</p>\n<p>取消冒泡：<br>\n属性.cancelBubble = true;</p>\n<h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<p>数组时按次序排列的一组值。每个值的位置都有编号。编号从 0 开始。整个数组用方括号表示 ：[ ]。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b,'</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这就是一个简单数组，数组的 a 的下标是 0。第一位是 0，第二位是 1，第三位是 2. 以此类推。所以数组的下标总是比数组的长度小一。数组也是可以先定义、再赋值的。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>任何类型的数据，都可以放入数组中。比如。函数、对象、方法、数值、字符串、数组里面也能嵌套数组。这时候叫多维数组......</p>\n<ol>\n<li>\n<p>数组的长度</p>\n<p>使用 length 属性可以返回数组的长度。清空数组可以将 length 属性设置为 0。如果人为设置 length 大于当前元素个数，则数组的成员数量会增加到这个值，新增的位置都是空位。使用 undefined 站位。表示空，未定义。</p>\n</li>\n<li>\n<p>数组的遍历</p>\n<p>数组的遍历可以用 for 循环、while 循环、不建议用 for...in 循环。常用的是 forEach 循环。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//for 循环</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 打印出 a 数组的每一项</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//while 循环：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//forEeach 循环：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>colors<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 打印出 colors 的每一项。</span></pre></td></tr></table></figure></li>\n<li>\n<p>delete 删除</p>\n<p>如果使用 delete 命令删除数组中的某一项。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> a<span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除 a 数组的第二个数。</span></pre></td></tr></table></figure><p>此时：a [1] 打印出来的值 = undefined。</p>\n<p>此时：a.length=3</p>\n<p>数组的某个位置是空位、与某个位置是 undefined 是不一样的，如果是空位，但是对 length 属性没有影响。所以用 length 遍历时要小心。如果是空位，使用数组的 forEach 方法、for...in 结构、以及 Object.keys 方法进行遍历，空位都会被跳过。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span>x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\".\"</span><span class=\"token operator\">+</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>i 代表每一项的值，x 代表每一项的下标。</p>\n</li>\n</ol>\n<h1 id=\"高级数组\"><a class=\"anchor\" href=\"#高级数组\">#</a> 高级数组</h1>\n<ol>\n<li>\n<p>Array.isArray（）方法</p>\n<p>返回一个布尔值。表示参数是否为数组。他可以弥补 typeof 运算符的不足。说白了，就是用来判断一个参数，或者一个变量是不是数组。</p>\n</li>\n<li>\n<p>valueOf 方法<br>\n valueOf 方法是一个所有对象都拥有的方法，表示对该对象求值。不同对象的 valueOf 方法不尽一致，数组的 valueOf 方法返回数组的本身。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 控制台输出 [1, 2, 3]</span></pre></td></tr></table></figure><p>返回数组的本身。</p>\n</li>\n<li>\n<p>toString 方法</p>\n<p>toString 方法也是对象通用的方法，数组的 toString 方法返回数组的字符串形势。<br>\n例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 控制台输出 “1,2,3”；</span></pre></td></tr></table></figure><p>就是把数组里面的值都变成一串长的字符串。即使是数组里面有嵌套也是一样的。</p>\n</li>\n<li>\n<p><strong>数组中的方法</strong></p>\n<ol>\n<li>\n<p><strong>push（）</strong></p>\n<p>push 方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。<br>\n例</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>此时 arr 数组里面的值为。【1，‘a’，true，{ }】上面的代码使用 push 方法，往数组中添加的四个成员。</p>\n</li>\n<li>\n<p><strong>pop（）</strong></p>\n<p>pop 方法用于删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'c'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr <span class=\"token comment\">// ['a', 'b']</span></pre></td></tr></table></figure><p>此时在控制台打印输出 arr 的值为 ['a', 'b'], 因为最后一个元素被删除了。<strong>注意</strong>，对空数字使用 pop（）不会报错，而是返回一个 undefined。</p>\n</li>\n<li>\n<p>shift（）</p>\n<p>shift ( ) 方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 删除 a 中的 'a'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token comment\">// 此时 a 数组只剩下 ['b', 'c']</span></pre></td></tr></table></figure><p>只能数组名.shift。然后删除该数组中的第一项。<br>\nshift（）可以遍历清空一个数组。前提是数组的元素不能是 0 或者任何布尔值等于 false 的元素，所以，用这个遍历数组不是很可靠。</p>\n</li>\n<li>\n<p>unshift（）</p>\n<p>unshift ( ) 方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。unshift（）方法可以接受多个参数，这些参数都会加到目标数组的头部。也就是前面。</p>\n</li>\n<li>\n<p>join（）</p>\n<p>join ( ) 方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '1 2 3 4'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' | '</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1 | 2 | 3 | 4\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1,2,3,4\"</span></pre></td></tr></table></figure><p>传入的参数是什么，就会在返回的数组中间加什么。用双引号引起来。如果元素是 undefined 和 null。或者空位，会被转成空字符串。“ ” 就是一个空格的样子。</p>\n</li>\n<li>\n<p>concat（）</p>\n<p>concat 方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// [\"hello\", \"world\"]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// [\"hello\", \"world\", \"!\"]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// [&#123; a: 1 &#125;, &#123; b: 2 &#125;]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// [2, &#123;a: 1&#125;]</span></pre></td></tr></table></figure></li>\n<li>\n<p>reverse（）</p>\n<p>reverse 方法用于颠倒排列数组元素，返回改变后的数组。注意，该方法将改变原数组</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"c\", \"b\", \"a\"]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token comment\">// [\"c\", \"b\", \"a\"]</span></pre></td></tr></table></figure><p>就是第一个在最后一个，最后一个在第一个。颠倒过来了。</p>\n</li>\n<li>\n<p>slice（）</p>\n<p>sliec（）方法用于提取目标数组的一部分，返回一个新数组，原数组不变。它的第一个参数为起始位置（从 0 开始，会包括在返回的新数组之中），第二个参数为终止位置（但该位置的元素本身不包括在内）<br>\n如果省略第二个参数，则一直返回到原数组的最后一个成员。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\"]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"b\", \"c\"]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"b\"]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"c\"]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\"]。</span></pre></td></tr></table></figure><p>截取一个数组中的某元素到某元素的那一段，组成一个新的数组。新的数组包含第一个元素，不包含最后一个元素。且原数组不会改变。如果没有参数。如上面的最后一个例子：则就是拷贝一个与原数组相同的新数组出来。如果给的参数是负数。则表示从后面开始计算。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"b\", \"c\"]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"b\"]</span></pre></td></tr></table></figure><p>上面代码中，-2 表示倒数计算的第二个位置，-1 表示倒数计算的第一个位置。如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组</p>\n</li>\n<li>\n<p><strong>splice（）</strong></p>\n<p>splice 的第一个参数是删除的起始位置（从 0 开始）第二个参数是被删除的元素个数。如果后面还有更多参数，则表示这些就是要被插入数组的新元素。<strong>注意</strong>，该方法会改变原数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"e\", \"f\"]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></pre></td></tr></table></figure><p>就是删除一个数组里面的元素。第一个参数是下标的位置，第二个参数是删除的个数。从下标是第几个开始删除。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"e\", \"f\"]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token comment\">// [\"a\", \"b\", \"c\", \"d\", 1, 2]</span></pre></td></tr></table></figure><p>删除以后又加进来两个新元素。如果起始位置是负数，就表示从倒数位置开始删除。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"c\", \"d\"]</span></pre></td></tr></table></figure><p>倒数第四个开始删除，删除开始以后的前两个元素。所以删除的是【“c”，“d”】<br>\n如果是单纯的插入元素，也可以使用 splice（）将第二个参数设置为 0，就可以了。这时候，第一个参数表示插入的位置，第三个或者第三个以后的参数就是需要插入的新元素。如果只提供一个参数。就等同于将原数组才拆分为两个数组。从第一个参数的位置起开始拆分。</p>\n<p>例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3, 4]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token comment\">// [1, 2]</span></pre></td></tr></table></figure></li>\n<li>\n<p>sort（）</p>\n<p>sort 方法对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// ['a', 'b', 'c', 'd']</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// [1, 2, 3, 4]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// [101, 11]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">10111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// [10111, 1101, 111]</span></pre></td></tr></table></figure><p>上面代码的最后两个例子，需要特殊注意。sort () 方法不是按照大小排序，而是按照字典顺序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以 101 排在 11 的前面。</p>\n</li>\n<li>\n<p><strong>map（）</strong></p>\n<p>map 方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// [2, 3, 4]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>numbers</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// [1, 2, 3]</span></pre></td></tr></table></figure><p>上面代码中，numbers 数组的所有成员依次执行参数函数，运行结果组成一个新数组返回，原数组没有变化。</p>\n<p>map 方法接受一个函数作为参数。该函数调用时，map 方法向它传入三个参数：当前成员、当前位置和数组本身。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> elem <span class=\"token operator\">*</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// [0, 2, 6]</span></pre></td></tr></table></figure><p>上面代码中，map 方法的回调函数有三个参数，elem 为当前成员的值，index 为当前成员的位置，arr 为原数组（[1, 2, 3]）。</p>\n</li>\n<li>\n<p><strong>foreach（）</strong></p>\n<p>forEach 的用法与 map 方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'['</span> <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token string\">'] = '</span> <span class=\"token operator\">+</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// [0] = 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// [1] = 5</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// [2] = 9</span></pre></td></tr></table></figure><p>上面代码中，forEach 遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以不必使用 map 方法。<strong>注意</strong>：forEach（）参数是一个方法，方法中的第一个参数是当前数组中的值，第一个值就是第一个值打印出来，第二个参数是当前数组的当前值的下标。第三个参数是整个数组。且记住，大写 Each 的首字母。</p>\n<p>forEach 方法也可以接受第二个参数，绑定参数函数的 this 变量。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> out <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>elem <span class=\"token operator\">*</span> elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  out <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>out <span class=\"token comment\">// [1, 4, 9]</span></pre></td></tr></table></figure><p>上面代码中，空数组 out 是 forEach 方法的第二个参数，结果，回调函数内部的 this 关键字就指向 out。</p>\n<p><strong>注意</strong>，forEach 方法无法中断执行，总是会将所有成员遍历完，forEach 方法也会跳过数组的空位。</p>\n</li>\n<li>\n<p><strong>filter（）</strong></p>\n<p>filter 方法用于过滤数组成员，满足条件的成员组成一个新数组返回。它的参数是一个函数，所有数组成员依次执行该函数，返回结果为 true 的成员组成一个新数组返回。该方法不会改变原数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>elem <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// [4, 5]</span></pre></td></tr></table></figure><p>上面代码将大于 3 的数组成员，作为一个新数组返回。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// [1, \"a\"]</span></pre></td></tr></table></figure><p>上面代码中，filter 方法返回数组 arr 里面所有布尔值为 true 的成员。filter 方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> index <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// [1, 3, 5]</span></pre></td></tr></table></figure><p>上面代码返回偶数位置的成员组成的新数组。</p>\n<p>filter 方法还可以接受第二个参数，用来绑定参数函数内部的 this 变量。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">MAX</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myFilter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>myFilter<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [8, 4, 9]</span></pre></td></tr></table></figure><p>上面代码中，过滤器 myFilter 内部有 this 变量，它可以被 filter 方法的第二个参数 obj 绑定，返回大于 3 的成员。</p>\n</li>\n<li>\n<p>some（），every（）</p>\n<p>他们和 forEach 一样都接受一个函数作为参数。分别是当前成员，当前成员的下标。整个数组。不同是，some（），every（）返回一个布尔值。some 方法是只要一个成员的返回值是 true，则整个 some 方法的返回值就是 true，否则返回 false。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> elem <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>some 方法是只要一个成员的返回值是 true，则整个 some 方法的返回值就是 true，否则返回 false。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> elem <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// false</span></pre></td></tr></table></figure></li>\n<li>\n<p>indexOf（），lastIndexOf（）</p>\n<p>indexOf 方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回 - 1。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span></pre></td></tr></table></figure><p>indexOf 方法还可以接受第二个参数，表示搜索的开始位置。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span></pre></td></tr></table></figure><p>上面代码从 1 号位置开始搜索字符 a，结果为 - 1，表示没有搜索到。lastIndexOf 方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回 - 1。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span></pre></td></tr></table></figure><p>注意，这两个方法不能用来搜索 NaN 的位置，即它们无法确定数组成员是否包含 NaN。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"异步操作的概述\"><a class=\"anchor\" href=\"#异步操作的概述\">#</a> 异步操作的概述</h1>\n<ol>\n<li>\n<p>回调函数。</p>\n<p>下面是两个函数 f1 和 f2，编程的意图是 f2 必须等到 f1 执行完成，才能执行。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码的问题在于，如果 f1 是异步操作，f2 会立即执行，不会等到 f1 结束再执行。这时，可以考虑改写 f1，把 f2 写成 f1 的回调函数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>回调函数的优点是简单、容易理解和实现，缺点是不利于代码的阅读和维护，各个部分之间高度耦合（coupling），使得程序结构混乱、流程难以追踪（尤其是多个回调函数嵌套的情况），而且每个任务只能指定一个回调函数。</p>\n</li>\n</ol>\n<h1 id=\"元素的其他属性\"><a class=\"anchor\" href=\"#元素的其他属性\">#</a> 元素的其他属性</h1>\n<ol>\n<li>\n<p>clientWidth（获取元素的宽度）<br>\nclientHeight（获取元素的高度）<br>\n这两个属性可以获取元素的可见宽度。获取的值不带 px，可以直接计算，包含 padding。属性只读，不能修改。</p>\n</li>\n<li>\n<p>offsetWidth 和 offsetHeigth<br>\n 获取元素的整个高度，包括 boder，padding。内容。</p>\n</li>\n<li>\n<p>offsetLeft<br>\n 当前元素相对于其定位父元素的水平偏移量</p>\n</li>\n<li>\n<p>offsetTop<br>\n 当前元素相对于其定位父元素的垂直偏移量</p>\n</li>\n<li>\n<p>scrollLeft<br>\n 可以获取水平滚动条滚动的距离<br>\n scrollTop<br>\n 可以获取垂直滚动条滚动的距离<br>\n scrollHeight</p>\n</li>\n<li>\n<p>元素的滚动高度</p>\n</li>\n<li>\n<p>事件对象，enent 获取鼠标当前位置</p>\n</li>\n</ol>\n<h1 id=\"字符串的方法\"><a class=\"anchor\" href=\"#字符串的方法\">#</a> 字符串的方法</h1>\n<ol>\n<li>\n<p>charAt（）</p>\n<p>获取输入字符串指定位置的字符。下标从 0 开始。</p>\n</li>\n<li>\n<p>charCodeAt（）</p>\n<p>获取指定位置的字符编码。</p>\n</li>\n<li>\n<p>indexof（）</p>\n<p>该方法可以检索一个字符串中是否含有指定的内容。返回，如果字符串中有含有该内容的，则会返回其第一次出现的索引位置。如果没有找到指定的内容，则返回 - 1，可以指定开始查找的位置。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>lastIndexOf（）</p>\n<p>方法和 indexOf 基本一样，一个从前  一个从后。</p>\n</li>\n<li>\n<p>slice（）</p>\n<p>可以从字符串中截取指定的内容，不会影响原来的字符串。而是将截取的字符串返回。参数，第一个，开始位置的索引（包括开始位置）第二个，结束位置的索引（不包括结束位置）第二个参数可以省略，则从第一个开始截取到最后的字符串。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str<span class=\"token operator\">=</span> “abcdefkjak”</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> bc。</pre></td></tr></table></figure></li>\n<li>\n<p>substr（）</p>\n<p>从第几个开始截取，截取后面的几个字符。</p>\n</li>\n</ol>\n<h1 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h1>\n<p>正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照 “给定模式” 匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。</p>\n<ol>\n<li>\n<p>新建一个正则表达式：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>xyz<span class=\"token operator\">/</span>；</pre></td></tr></table></figure><p>以斜杠表示开始和结束。</p>\n<p>以斜杠表示开始和结束。</p>\n</li>\n<li>\n<p>test（）<br>\n正则实例 test（）方法返回一个布尔值，表示当前模式是否能匹配参数字符串。如果能匹配，返回一个 true。</p>\n</li>\n<li>\n<p>index：<br>\n模式匹配成功的开始位置。下标从 0 开始。</p>\n</li>\n<li>\n<p>input：<br>\n整个原字符串。(3、4) 例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">a(b+)a</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_abbba_aba_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr <span class=\"token comment\">// [\"abbba\", \"bbb\"]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>arr<span class=\"token punctuation\">.</span>index <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>arr<span class=\"token punctuation\">.</span>input <span class=\"token comment\">// \"_abbba_aba_\"</span></pre></td></tr></table></figure><p>上面代码中的 index 属性等于 1，是因为从原字符串的第二个位置开始匹配成功。</p>\n</li>\n<li>\n<p>String.prototype.search( )</p>\n<p>字符串对象的 search 方法，返回第一个满足条件的匹配结果在整个字符串中的位置。如果没有任何匹配，则返回 - 1。</p>\n</li>\n<li>\n<p>位置字符<br>\n ^：表示字符串的开始位置。<br>\n$：表示字符串的结束位置。<br>\n例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//test 必须出现在开始位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">^</span>test<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test123'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//test 必须出现在结束位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">/</span>test$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new test'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 从开始位置到结束位置只有 test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">^</span>test$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">^</span>test$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test test'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure></li>\n<li>\n<p>选择符（ | ）</p>\n<p>竖线符号（|）在正则表达式中表示 “或关系”（OR），即 cat|dog 表示匹配 cat 或 dog。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">11|22</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'911'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码中，正则表达式指定必须匹配 11 或 22。多个选择符可以联合使用。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匹配 fred、barney、betty 之中的一个</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">fred|barney|betty</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr></table></figure></li>\n<li>\n<p>连字符</p>\n<p>某些情况下，对于连续序列的字符，连字符（-）用来提供简写形式，表示字符的连续范围。比如，[abc] 可以写成 [a-c]，[0123456789] 可以写成 [0-9]，同理 [A-Z] 表示 26 个大写字母。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">a-z</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>z<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码中，当连字号（dash）不出现在方括号之中，就不具备简写的作用，只代表字面的含义，所以不匹配字符 b。只有当连字号用在方括号之中，才表示连续的字符序列。</p>\n<p>以下都是合法的字符类简写形式。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9.</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>a<span class=\"token operator\">-</span>fA<span class=\"token operator\">-</span><span class=\"token constant\">F</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token operator\">-</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>上面代码中最后一个字符类 [1-31]，不代表 1 到 31，只代表 1 到 3。</p>\n<p>连字符还可以用来指定 Unicode 字符的范围。</p>\n</li>\n<li>\n<p>预定义模式<br>\n预定义模式指的是某些常见模式的简写方式。</p>\n<p><code>\\d</code>  匹配 0-9 之间的任一数字，相当于 <code>[0-9]</code> 。<br>\n <code>\\D</code>  匹配所有 0-9 以外的字符，相当于 [^0-9]。<br>\n <code>\\w</code>  匹配任意的字母、数字和下划线，相当于 <code>[A-Za-z0-9_]</code> 。<br>\n <code>\\W</code>  除所有字母、数字和下划线以外的字符，相当于 <code>[^A-Za-z0-9]</code> 。<br>\n <code>\\s</code>  匹配空格（包括换行符、制表符、空格符等），相等于 <code>[ \\t\\r\\n\\v\\f]</code> 。<br>\n <code>\\S</code>  匹配非空格的字符，相当于 <code>[^ \\t\\r\\n\\v\\f]</code> 。<br>\n <code>\\b</code>  匹配词的边界。<br>\n <code>\\B</code>  匹配非词边界，即在词的内部。<br>\n下面是一些例子。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// \\s 的例子</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span>\\s\\w<span class=\"token operator\">*</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\" world\"]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// \\b 的例子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">/</span>\\bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">/</span>\\bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello-world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">/</span>\\bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'helloworld'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// \\B 的例子</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">/</span>\\Bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello-world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">/</span>\\Bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'helloworld'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码中，\\s 表示空格，所以匹配结果会包括空格。\\b 表示词的边界，所以 world 的词首必须独立（词尾是否独立未指定），才会匹配。同理，\\B 表示非词的边界，只有 world 的词首不独立，才会匹配。</p>\n</li>\n<li>\n<p>重复类型<br>\n模式的精确匹配次数，使用大括号（{}）表示。{n} 表示恰好重复 n 次，{n,} 表示至少重复 n 次，{n,m} 表示重复不少于 n 次，不多于 m 次。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">lo&#123;2&#125;k</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'look'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span>lo<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>k<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'looook'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码中，第一个模式指定 o 连续出现 2 次，第二个模式指定 o 连续出现 2 次到 5 次之间。</p>\n</li>\n<li 1，>\n<p>量词符<br>\n？：问号表示某个模式出现 0 次或者 1 次，等同于 {0,1}<br>\n*：星好表示某个模式出现 0 次或者多次，等同于 {0，}<br>\n+：加号表示某个模式出现 1 次或者多次，等同于</p>\n<p>量词：<br>\nreg = /(ab){3}/  表示 ab 出现 3 次<br>\n reg = /b {3}/  表示 b 出现 3 次<br>\n reg = /ab {1，3} c/  表示 a 和 c 中间的 b 出现至少一次或 3 次。<br>\nreg = /ab {3,} c/ 表示 a 和 c 中间的 b 出现 3 次，或 3 次以上。</p>\n</li>\n</ol>\n<h1 id=\"js后半部部分\"><a class=\"anchor\" href=\"#js后半部部分\">#</a> js 后半部部分</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXA0NDExdTdUVD9wPTExNA==\">学习地址</span></p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "JavaScript",
                "JavaScript"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Vue%E6%BA%90%E7%A0%81/Vue%E6%BA%90%E7%A0%81/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Vue%E6%BA%90%E7%A0%81/Vue%E6%BA%90%E7%A0%81/",
            "title": "Vue源码",
            "date_published": "2021-03-25T16:00:00.000Z",
            "content_html": "<h1 id=\"为什么要学习源码\"><a class=\"anchor\" href=\"#为什么要学习源码\">#</a> 为什么要学习源码？</h1>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Vue源码",
                "Vue源码"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Webpack/Webpack/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Webpack/Webpack/",
            "title": "webpack打包工具",
            "date_published": "2021-03-25T16:00:00.000Z",
            "content_html": "<h1 id=\"webpack五个核心概念\"><a class=\"anchor\" href=\"#webpack五个核心概念\">#</a> webpack 五个核心概念</h1>\n<ol>\n<li>\n<p>Entry</p>\n<p>入口（Entry）指示 Webpack 以那个文件为入口起点开始打包，分析构建内部依赖图。从哪儿打包。</p>\n</li>\n<li>\n<p>Output</p>\n<p>输出（Output）指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p>\n</li>\n<li>\n<p>Loader</p>\n<p>Loader 让 Webpack 能够去处理那些非 JavaScript 文件（Webpack）自身只理解 JavaScript 文件。就是翻译 css。以及茹铺，让他成为 Webpack 可以认识的东西。</p>\n</li>\n<li>\n<p>Plugins</p>\n<p>插件（Plugins）可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。做些功能更加强大的事。</p>\n</li>\n<li>\n<p>Mode</p>\n<p>模式（Mode）指示 Webpack 使用相应的模式配置。</p>\n<ul>\n<li>\n<p>development</p>\n<p>测试环境，能让代码本地调试、运行的环境，配置相对来说，简单一点。</p>\n</li>\n<li>\n<p>production</p>\n<p>生产环境，能让代码优化上线，运行的环境。优化更好。配置也比较全面。</p>\n</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Webpack",
                "Webpack"
            ]
        },
        {
            "id": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E4%B8%89%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "url": "https://lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E4%B8%89%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "title": "雨季，一人撑伞、影子陪行。",
            "date_published": "2021-03-22T03:14:47.159Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试。\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"5aec9217a5d83df60877fcb6dc4b48b6b49b0d296ef37954c57ee03db87c5ee6\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">请输入密码查看，密码为6位数哦~。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/BootstrapVue/Bootstarp-Vue/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/BootstrapVue/Bootstarp-Vue/",
            "title": "Bootstarp-Vue 框架",
            "date_published": "2021-03-17T16:00:00.000Z",
            "content_html": "<ol>\n<li>\n<h1 id=\"vue中引用bootstarpvue\"><a class=\"anchor\" href=\"#vue中引用bootstarpvue\">#</a> vue 中引用 bootstarpVue</h1>\n<blockquote>\n<ol>\n<li>\n<p>进入你的项目里</p>\n</li>\n<li>\n<p>打开命令行工具，安装 BootstrapVue,</p>\n</li>\n<li>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm i bootstrap<span class=\"token operator\">-</span>vue <span class=\"token operator\">-</span><span class=\"token constant\">S</span></pre></td></tr></table></figure></li>\n<li>\n<p>安装后，打开 main.js 主程序入口文件</p>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> BootstrapVue <span class=\"token keyword\">from</span> <span class=\"token string\">'bootstrap-vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'bootstrap/dist/css/bootstrap.css'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'bootstrap-vue/dist/bootstrap-vue.css'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 注册为全局组件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>BootstrapVue<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>完成，可以直接使用它的组件了</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Bootstarp-Vue",
                "BootstarpVue"
            ]
        },
        {
            "id": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Element%20Ui/Element-Ui/",
            "url": "https://lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Element%20Ui/Element-Ui/",
            "title": "Element-Ui 框架",
            "date_published": "2021-03-17T16:00:00.000Z",
            "content_html": "<h1 id=\"自定义表格内外边框颜色\"><a class=\"anchor\" href=\"#自定义表格内外边框颜色\">#</a> 自定义表格内外边框颜色</h1>\n<h2 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<p>在我们使用饿了么 UI 框架做项目的时候，el-table 的自带的表格边框颜色有时候需要修改一下。本文简述一下修改 el-table 边框样式的注意事项。</p>\n<h3 id=\"初始代码\"><a class=\"anchor\" href=\"#初始代码\">#</a> 初始代码</h3>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;el-table \n      :data=&quot;tableData&quot; \n      style=&quot;width: 40%&quot; \n      border\n    &gt;\n      &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column prop=&quot;nation&quot; label=&quot;国别&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column prop=&quot;bornPlace&quot; label=&quot;出生地方&quot;&gt; &lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &quot;app&quot;,\n  data() &#123;\n    return &#123;\n      tableData: [\n        &#123;\n          name: &quot;刘备&quot;,\n          nation: &quot;蜀国&quot;,\n          bornPlace: &quot;涿郡涿县（河北省涿州市）&quot;,\n        &#125;,\n        &#123;\n          name: &quot;曹操&quot;,\n          nation: &quot;魏国&quot;,\n          bornPlace: &quot;沛国谯县（安徽省亳州市）&quot;,\n        &#125;,\n        &#123;\n          name: &quot;孙权&quot;,\n          nation: &quot;吴国&quot;,\n          bornPlace: &quot;吴郡富春县（浙江省杭州市富阳区）&quot;,\n        &#125;,\n        &#123;\n          name: &quot;关羽&quot;,\n          nation: &quot;蜀国&quot;,\n          bornPlace: &quot;河东郡解县（山西省运城市盐湖区解州镇）&quot;,\n        &#125;,\n      ],\n    &#125;;\n  &#125;,\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"初始效果\"><a class=\"anchor\" href=\"#初始效果\">#</a> 初始效果</h3>\n<p><img data-src=\"https://image-static.segmentfault.com/116/486/1164868583-600e6388628a4\" alt=\"image\"></p>\n<h3 id=\"第一步加入单元格的回调\"><a class=\"anchor\" href=\"#第一步加入单元格的回调\">#</a> 第一步，加入单元格的回调</h3>\n<h4 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/393/733/3937331683-600e642992093\" alt=\"image\"></p>\n<h4 id=\"效果如下\"><a class=\"anchor\" href=\"#效果如下\">#</a> 效果如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/384/833/3848336474-600e64951e0a1\" alt=\"image\"></p>\n<h3 id=\"第二步加入表头的回调\"><a class=\"anchor\" href=\"#第二步加入表头的回调\">#</a> 第二步，加入表头的回调</h3>\n<h4 id=\"代码如下-2\"><a class=\"anchor\" href=\"#代码如下-2\">#</a> 代码如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/364/434/364434355-600e654c78c83\" alt=\"image\"></p>\n<h4 id=\"效果如下-2\"><a class=\"anchor\" href=\"#效果如下-2\">#</a> 效果如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/248/389/2483891796-600e65a2a71b7\" alt=\"image\"></p>\n<h3 id=\"第三步单独给表格加样式\"><a class=\"anchor\" href=\"#第三步单独给表格加样式\">#</a> 第三步，单独给表格加样式</h3>\n<h4 id=\"代码如下-3\"><a class=\"anchor\" href=\"#代码如下-3\">#</a> 代码如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/200/720/200720399-600e67f13b8ef\" alt=\"image\"><br>\n<img data-src=\"https://image-static.segmentfault.com/405/061/4050614932-600e67c3c88e5\" alt=\"image\"></p>\n<h4 id=\"效果如下-3\"><a class=\"anchor\" href=\"#效果如下-3\">#</a> 效果如下</h4>\n<p><img data-src=\"https://image-static.segmentfault.com/179/167/1791671657-600e681be28ab\" alt=\"image\"></p>\n<h1 id=\"表格自适应宽\"><a class=\"anchor\" href=\"#表格自适应宽\">#</a> 表格自适应宽</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 表格的自适应宽 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>All Columns auto-fit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddColumn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Column<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddRows<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Row<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token attr-name\">border</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token attr-name\">auto-fit-column</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>姓名2222<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token attr-name\">fixed</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄3333<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(option, index) in options<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token attr-name\">:label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.label<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token attr-name\">:prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.prop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token attr-name\">sortable</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token attr-name\">auto-fit</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Type to search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Max-width<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token attr-name\">border</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token attr-name\">auto-fit-column</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>姓名2222<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token attr-name\">fixed</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄3333<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token attr-name\">:max-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>130<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(option, index) in options<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token attr-name\">:label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.label<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token attr-name\">:prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.prop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token attr-name\">:max-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token attr-name\">sortable</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token attr-name\">auto-fit</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>          <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Type to search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Some Columns auto-fit (name &amp; age)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddColumn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Column<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddRows<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Row<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token attr-name\">border</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token attr-name\">auto-fit-column</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token attr-name\">:fit-styles</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styles<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token attr-name\">:fit-columns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[<span class=\"token punctuation\">'</span>name<span class=\"token punctuation\">'</span>, <span class=\"token punctuation\">'</span>age<span class=\"token punctuation\">'</span>, <span class=\"token punctuation\">'</span>salary<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token attr-name\">fixed</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Age<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Salary<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>      <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>salary<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token attr-name\">:formatter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formatter<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(option, index) in options<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>      <span class=\"token attr-name\">:label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.label<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>      <span class=\"token attr-name\">:prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.prop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>      <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>      <span class=\"token attr-name\">sortable</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>      <span class=\"token attr-name\">auto-fit</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>      <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span></span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>          <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>          <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>          <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Type to search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Show Summary<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddColumn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Column<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleAddRows<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add Row<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleReverseColumn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Reverse Column<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleDynamicAutoColumn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Dynamic auth-width Column<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span></span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token attr-name\">border</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token attr-name\">auto-fit-column</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token attr-name\">show-summary</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token attr-name\">:summary-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>summaryMethod<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token attr-name\">:fit-styles</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styles<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token attr-name\">:fit-columns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fitColumns<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(column, cIndex) in autoWidthColumns<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>      <span class=\"token attr-name\">:label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column.label<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>      <span class=\"token attr-name\">:prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column.name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>      <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cIndex<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>      <span class=\"token attr-name\">:formatter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formatter<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>      <span class=\"token attr-name\">fixed</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(option, index) in options<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>      <span class=\"token attr-name\">:label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.label<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>      <span class=\"token attr-name\">:prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.prop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>      <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10 + index<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>      <span class=\"token attr-name\">sortable</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>      <span class=\"token attr-name\">auto-fit</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token punctuation\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span></span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>      <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年龄<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>      <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span></span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>          <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>          <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>          <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Type to search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>copyright<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&copy;\">&amp;copy;</span> www.kuaizi.ai<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currency</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> decimal <span class=\"token operator\">=</span> <span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>  <span class=\"token keyword\">let</span> parts</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  <span class=\"token keyword\">let</span> hasDecimal <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token comment\">// 检测是否有小数点</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    hasDecimal <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.\\d&#123;1,&#125;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token comment\">// 精度</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    n <span class=\"token operator\">=</span> hasDecimal <span class=\"token operator\">?</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span>decimal<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    parts <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\B(?=(\\d&#123;3&#125;)+(?!\\d))</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>hasDecimal <span class=\"token operator\">?</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token string\">'-'</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>  <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>      search<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>          age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>          salary<span class=\"token operator\">:</span> <span class=\"token number\">320000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>          remark<span class=\"token operator\">:</span> <span class=\"token string\">'sdfsdfsdfsdfsdfsdff'</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>          age<span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>          salary<span class=\"token operator\">:</span> <span class=\"token number\">525000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>          remark<span class=\"token operator\">:</span> <span class=\"token string\">'sdfsdfsdfsdfsdfsdff'</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>      autoWidthColumns<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>          label<span class=\"token operator\">:</span> <span class=\"token string\">'Name'</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>          label<span class=\"token operator\">:</span> <span class=\"token string\">'Age'</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'salary'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>          label<span class=\"token operator\">:</span> <span class=\"token string\">'Salary'</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'remark'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>          label<span class=\"token operator\">:</span> <span class=\"token string\">'Remark'</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>      styles<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>        header<span class=\"token operator\">:</span> <span class=\"token string\">'font-size: 14px; font-weight: bold; padding: 0 10px;'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        body<span class=\"token operator\">:</span> <span class=\"token string\">'font-size: 14px; padding: 0 10px;'</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token function\">fitColumns</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoWidthColumns<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>    <span class=\"token comment\">// formatter (row, column, cellValue, index) &#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>    <span class=\"token function\">formatter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">row<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">,</span> cellValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">.</span>property <span class=\"token operator\">!==</span> <span class=\"token string\">'salary'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cellValue</pre></td></tr><tr><td data-num=\"242\"></td><td><pre>      <span class=\"token comment\">// 获取字段名</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>      <span class=\"token comment\">// console.log(column.property)</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">currency</span><span class=\"token punctuation\">(</span>cellValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token function\">handleAddColumn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'remark'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'备注'</span><span class=\"token punctuation\">,</span> maxWidth<span class=\"token operator\">:</span> <span class=\"token number\">130</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token function\">handleAddRows</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>        name<span class=\"token operator\">:</span> <span class=\"token string\">'tommyshao'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>        salary<span class=\"token operator\">:</span> <span class=\"token number\">15000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>        remark<span class=\"token operator\">:</span> <span class=\"token string\">'sdfsdfsdf什么备注，不准换行啊啊啊啊啊啊啊啊啊啊啊'</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    <span class=\"token function\">summaryMethod</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> columns<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>      <span class=\"token keyword\">const</span> showSummaryCol <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'salary'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>      <span class=\"token keyword\">const</span> sums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>      columns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">column<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>          sums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'合计'</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>          <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>        <span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> showSummaryCol<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>          sums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> curr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>            <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>              <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> curr</pre></td></tr><tr><td data-num=\"271\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>              <span class=\"token keyword\">return</span> prev</pre></td></tr><tr><td data-num=\"273\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>          sums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">currency</span><span class=\"token punctuation\">(</span>sums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>          sums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>      <span class=\"token keyword\">return</span> sums</pre></td></tr><tr><td data-num=\"281\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>    <span class=\"token function\">handleReverseColumn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>      <span class=\"token comment\">// this.autoWidthColumns =</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoWidthColumns<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>    <span class=\"token function\">handleDynamicAutoColumn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoWidthColumns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>          name<span class=\"token operator\">:</span> <span class=\"token string\">'remark'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>          label<span class=\"token operator\">:</span> <span class=\"token string\">'Remark'</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>        <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoWidthColumns<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre></pre></td></tr><tr><td data-num=\"299\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre><span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>  <span class=\"token property\">overflow-x</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre><span class=\"token selector\">.el-table .cell</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>  <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre><span class=\"token selector\">.copyright</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 100px 20px 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px 0 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>  <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 1px solid #e7e7e7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"分页效果\"><a class=\"anchor\" href=\"#分页效果\">#</a> 分页效果</h1>\n<pre><code class=\"language-vue\">&lt;el-col :span=&quot;24&quot;&gt;\n    &lt;el-pagination\n    layout=&quot;prev, pager, next&quot;\n    :page-size=&quot;device.ps&quot;\n    :total=&quot;device.trw&quot;\n    @current-change=&quot;pageChange&quot;\n    /&gt;\n &lt;/el-col&gt;\n</code></pre>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pageChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">loadDevices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> pn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>分页效果使用在 element ui 的表格中，表格数据过多时，使它可以点击下一页。实现翻页，让页面美化。上面代码中， <code>layou</code> t 是组件的布局，其中<strong> prev</strong> 是表示上一页，默认是一个箭头。可以换为<strong> prev-test</strong> + 文字，自定义文字。反之 <code>next</code> 。中间的 pager 是组件的主体部分，显示一共几页。要给分页按钮添加颜色使用 background 属性即可。<strong>page-size</strong> 每页显示条目个数，即每页多少行。<strong>total</strong> 总的条目数，一共有多少行。pn 代表当前行。点击方法，点击以换分页显示数据。ps 代表每页可以显示多少行。</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Element-Ui",
                "ElementUi"
            ]
        }
    ]
}